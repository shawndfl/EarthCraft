/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/canvas.scss":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/canvas.scss ***!
  \**********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n  margin: 0px;\n  padding: 0px;\n  overflow: hidden;\n}\n\n.game-hidden {\n  display: none !important;\n}\n\n.game-error {\n  width: 100%;\n  padding: 20px;\n  display: flex;\n  height: 100%;\n  text-align: center;\n  z-index: 10;\n  align-content: center;\n  word-wrap: break-word;\n  margin: auto;\n  color: red;\n  background: black;\n}\n\n#game-container {\n  position: absolute;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  z-index: 0;\n}\n\n.canvas-container {\n  height: 85vh;\n  margin: 0px;\n  padding: 0px;\n}\n.canvas-container .canvas {\n  height: 100%;\n  width: 100%;\n  margin: auto;\n  background-color: lightgray;\n  margin: auto;\n  display: flex;\n}`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://earthquest/./src/css/canvas.scss?./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/editor.scss":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/editor.scss ***!
  \**********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `#editor-container {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1;\n  display: flex;\n  height: 100%;\n}\n\n.editor-canvas {\n  width: 100%;\n  height: 100%;\n  background-color: rgb(85, 82, 82);\n}\n\n.editor-entities {\n  width: 300px;\n  background-color: #646464;\n  height: 100%;\n}`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://earthquest/./src/css/editor.scss?./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./src/_game/assets/common/edge.png":
/*!******************************************!*\
  !*** ./src/_game/assets/common/edge.png ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"86af45d704d84bd8515b26edc4fff158.png\");\n\n//# sourceURL=webpack://earthquest/./src/_game/assets/common/edge.png?");

/***/ }),

/***/ "./src/_game/assets/common/enemies.png":
/*!*********************************************!*\
  !*** ./src/_game/assets/common/enemies.png ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"c06b8e2ac9d84e604062d6db0807b2d7.png\");\n\n//# sourceURL=webpack://earthquest/./src/_game/assets/common/enemies.png?");

/***/ }),

/***/ "./src/_game/assets/ui/hud.png":
/*!*************************************!*\
  !*** ./src/_game/assets/ui/hud.png ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"50479ccc133f7546d16a91c5a375a03d.png\");\n\n//# sourceURL=webpack://earthquest/./src/_game/assets/ui/hud.png?");

/***/ }),

/***/ "./src/assets/font.png":
/*!*****************************!*\
  !*** ./src/assets/font.png ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"81df8f4030b5ae0cbeddd833c8e0c69d.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/font.png?");

/***/ }),

/***/ "./src/assets/menu.png":
/*!*****************************!*\
  !*** ./src/assets/menu.png ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"43f1afc786187427bca1c7dd2e2ffa01.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/menu.png?");

/***/ }),

/***/ "./src/css/canvas.scss":
/*!*****************************!*\
  !*** ./src/css/canvas.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./canvas.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/canvas.scss\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://earthquest/./src/css/canvas.scss?");

/***/ }),

/***/ "./src/css/editor.scss":
/*!*****************************!*\
  !*** ./src/css/editor.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_editor_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./editor.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/editor.scss\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_editor_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_editor_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_editor_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_editor_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://earthquest/./src/css/editor.scss?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/_game/PlatformEngine.ts":
/*!*************************************!*\
  !*** ./src/_game/PlatformEngine.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PlatformEngine = void 0;\r\nconst Engine_1 = __webpack_require__(/*! ../core/Engine */ \"./src/core/Engine.ts\");\r\nconst SceneManager_1 = __webpack_require__(/*! ../systems/SceneManager */ \"./src/systems/SceneManager.ts\");\r\nconst PlayerController_1 = __webpack_require__(/*! ./components/PlayerController */ \"./src/_game/components/PlayerController.ts\");\r\nconst SceneFactory_1 = __webpack_require__(/*! ./scenes/SceneFactory */ \"./src/_game/scenes/SceneFactory.ts\");\r\nconst BulletManager_1 = __webpack_require__(/*! ./system/BulletManager */ \"./src/_game/system/BulletManager.ts\");\r\nconst GameAssetManager_1 = __webpack_require__(/*! ./system/GameAssetManager */ \"./src/_game/system/GameAssetManager.ts\");\r\n/**\r\n * This is the engine override that will kick off our editor\r\n * or the game.\r\n */\r\nclass PlatformEngine extends Engine_1.Engine {\r\n    constructor() {\r\n        super();\r\n        this.player = new PlayerController_1.PlayerController(this);\r\n        this.bullets = new BulletManager_1.BulletManager(this);\r\n    }\r\n    createSceneManager() {\r\n        return new SceneManager_1.SceneManager(this, new SceneFactory_1.SceneFactory(this));\r\n    }\r\n    createAssetManager() {\r\n        return new GameAssetManager_1.GameAssetManager(this);\r\n    }\r\n    async initialize(root) {\r\n        await super.initialize(root);\r\n        this.player.initialize();\r\n        await this.bullets.initialize();\r\n        // load the first scene\r\n        await this.sceneManager.changeScene(this.urlParams.get('level') ?? 'level.2.0');\r\n    }\r\n    handleUserAction(state) {\r\n        return (this.dialogManager.handleUserAction(state) ||\r\n            this.player.handleUserAction(state) ||\r\n            this.sceneManager.scene.handleUserAction(state));\r\n    }\r\n    gameUpdate(dt) {\r\n        if (this.sceneManager.sceneReady) {\r\n            this.sceneManager.update(dt);\r\n            this.physicsManager.update(dt);\r\n            this.backgroundManager.update(dt);\r\n            this.player.update(dt);\r\n            this.bullets.update(dt);\r\n            this.particleManager.update(dt);\r\n            this.dialogManager.update(dt);\r\n            this.textManager.update(dt);\r\n            this.annotationManager.update(dt);\r\n            this.sceneManager.postUpdate(dt);\r\n        }\r\n    }\r\n}\r\nexports.PlatformEngine = PlatformEngine;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/PlatformEngine.ts?");

/***/ }),

/***/ "./src/_game/components/AnimationComponent.ts":
/*!****************************************************!*\
  !*** ./src/_game/components/AnimationComponent.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AnimationComponent = void 0;\r\nconst GameComponent_1 = __webpack_require__(/*! ./GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\n/**\r\n * An animation component that runs different animations\r\n */\r\nclass AnimationComponent extends GameComponent_1.GameComponent {\r\n    onDone(done) {\r\n        this._onDone = done;\r\n        return this;\r\n    }\r\n    raiseOnDone() {\r\n        if (this._onDone) {\r\n            this._onDone();\r\n        }\r\n    }\r\n}\r\nexports.AnimationComponent = AnimationComponent;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/AnimationComponent.ts?");

/***/ }),

/***/ "./src/_game/components/BulletController.ts":
/*!**************************************************!*\
  !*** ./src/_game/components/BulletController.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BulletController = void 0;\r\nconst SpriteInstanceController_1 = __webpack_require__(/*! ../../graphics/SpriteInstanceController */ \"./src/graphics/SpriteInstanceController.ts\");\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst RidgeBody_1 = __webpack_require__(/*! ../../physics/RidgeBody */ \"./src/physics/RidgeBody.ts\");\r\nconst BulletType_1 = __webpack_require__(/*! ./BulletType */ \"./src/_game/components/BulletType.ts\");\r\nconst GameComponent_1 = __webpack_require__(/*! ./GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\nconst PlayerController_1 = __webpack_require__(/*! ./PlayerController */ \"./src/_game/components/PlayerController.ts\");\r\nclass BulletController extends GameComponent_1.GameComponent {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get bulletType() {\r\n        return this._bulletType;\r\n    }\r\n    constructor(eng, id) {\r\n        super(eng);\r\n        this._id = id;\r\n        this._ridgeBody = new RidgeBody_1.RidgeBody(eng, id, this);\r\n        this._ridgeBody.onPosition = this.onPositionChange.bind(this);\r\n        this._ridgeBody.onCollision = this.onCollision.bind(this);\r\n        this._ridgeBody.active = false;\r\n        // no gravity\r\n        this._ridgeBody.customGravity = vec3_1.default.zero.copy();\r\n        this.eng.physicsManager.addBody(this._ridgeBody);\r\n    }\r\n    get active() {\r\n        return this._active;\r\n    }\r\n    get position() {\r\n        return this._ridgeBody.position;\r\n    }\r\n    initialize(spriteCollection, options) {\r\n        // lazy create sprite controllers\r\n        if (!this.sprite) {\r\n            this.sprite = new SpriteInstanceController_1.SpriteInstanceController(this._id, spriteCollection);\r\n        }\r\n        this._options = options;\r\n        this._options.position.copy(this._ridgeBody.position);\r\n        this._options.velocity.copy(this._ridgeBody.instanceVelocity);\r\n        this._bulletType = this._options.bulletType;\r\n        this._ridgeBody.setId(this._id);\r\n        this.sprite.spriteImage('bullet.normal.1');\r\n        this.sprite.topOffset = -0.5;\r\n        this.sprite.leftOffset = 0.5;\r\n        this.sprite.xScale = 1.0;\r\n        this.sprite.yScale = 1.0;\r\n        this.sprite.left = options.position.x;\r\n        this.sprite.top = options.position.y;\r\n        this.sprite.depth = options.position.z;\r\n        // set bounds in pixels\r\n        this._ridgeBody.set(this._options.position.x, this.sprite.width, this._options.position.y, this.sprite.height);\r\n        this._ridgeBody.active = true;\r\n        this._active = true;\r\n        this.sprite.visible = true;\r\n    }\r\n    destroy() {\r\n        this._active = false;\r\n        this._ridgeBody.active = false;\r\n        this.sprite.visible = false;\r\n    }\r\n    onPositionChange(left, top, body) {\r\n        if (!this.sprite) {\r\n            return;\r\n        }\r\n        this.sprite.left = left;\r\n        this.sprite.top = top;\r\n    }\r\n    onCollision(collisions) {\r\n        if (!this.sprite || !collisions || collisions.length == 0) {\r\n            return;\r\n        }\r\n        if (!collisions) {\r\n            return;\r\n        }\r\n        // destroy bullet\r\n        this.destroy();\r\n        // if we hit an enemy\r\n        //if (c.tag instanceof EnemyController) {\r\n        //  const enemy = c.tag as EnemyController;\r\n        //  enemy.hit(this);\r\n        //  console.debug('hitting ', c);\r\n        //}\r\n        // hit a player\r\n        for (let c of collisions) {\r\n            if (this._bulletType == BulletType_1.BulletType.EnemyBullet) {\r\n                if (c.tag instanceof PlayerController_1.PlayerController) {\r\n                    //TODO\r\n                }\r\n            }\r\n        }\r\n    }\r\n    update(dt) { }\r\n}\r\nexports.BulletController = BulletController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/BulletController.ts?");

/***/ }),

/***/ "./src/_game/components/BulletType.ts":
/*!********************************************!*\
  !*** ./src/_game/components/BulletType.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BulletType = void 0;\r\nvar BulletType;\r\n(function (BulletType) {\r\n    BulletType[BulletType[\"None\"] = 0] = \"None\";\r\n    BulletType[BulletType[\"PlayerBullet\"] = 1] = \"PlayerBullet\";\r\n    BulletType[BulletType[\"EnemyBullet\"] = 2] = \"EnemyBullet\";\r\n    BulletType[BulletType[\"PlayerBomb\"] = 3] = \"PlayerBomb\";\r\n})(BulletType = exports.BulletType || (exports.BulletType = {}));\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/BulletType.ts?");

/***/ }),

/***/ "./src/_game/components/Direction.ts":
/*!*******************************************!*\
  !*** ./src/_game/components/Direction.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Direction = void 0;\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[Direction[\"Right\"] = 0] = \"Right\";\r\n    Direction[Direction[\"Left\"] = 1] = \"Left\";\r\n    Direction[Direction[\"Up\"] = 2] = \"Up\";\r\n    Direction[Direction[\"Down\"] = 3] = \"Down\";\r\n})(Direction = exports.Direction || (exports.Direction = {}));\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/Direction.ts?");

/***/ }),

/***/ "./src/_game/components/GameComponent.ts":
/*!***********************************************!*\
  !*** ./src/_game/components/GameComponent.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameComponent = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../../components/Component */ \"./src/components/Component.ts\");\r\n/**\r\n * An abstract class the allows access to the PlatfromEngine\r\n */\r\nclass GameComponent extends Component_1.Component {\r\n    get eng() {\r\n        return super.eng;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n    }\r\n}\r\nexports.GameComponent = GameComponent;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/GameComponent.ts?");

/***/ }),

/***/ "./src/_game/components/HitAnimation.ts":
/*!**********************************************!*\
  !*** ./src/_game/components/HitAnimation.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HitAnimation = void 0;\r\nconst ISprite_1 = __webpack_require__(/*! ../../graphics/ISprite */ \"./src/graphics/ISprite.ts\");\r\nconst Curve_1 = __webpack_require__(/*! ../../math/Curve */ \"./src/math/Curve.ts\");\r\nconst AnimationComponent_1 = __webpack_require__(/*! ./AnimationComponent */ \"./src/_game/components/AnimationComponent.ts\");\r\nclass HitAnimation extends AnimationComponent_1.AnimationComponent {\r\n    get isRunning() {\r\n        return this.curve.isRunning();\r\n    }\r\n    initialize(sprite) {\r\n        this.sprite = sprite;\r\n        this.facingRight = true;\r\n        // animation\r\n        this.curve = new Curve_1.Curve();\r\n        const points = [];\r\n        points.push({ p: 1, t: 0 });\r\n        points.push({ p: 2, t: 100 });\r\n        points.push({ p: 3, t: 200 });\r\n        points.push({ p: 3, t: 1500 });\r\n        this.curve.points(points);\r\n        let lastValue = -1;\r\n        this.curve\r\n            .onUpdate((value) => {\r\n            // wait for the value to change\r\n            if (value == lastValue) {\r\n                return;\r\n            }\r\n            lastValue = value;\r\n            // animation sprites\r\n            this.sprite.flipDirection = this.facingRight\r\n                ? ISprite_1.SpriteFlip.None\r\n                : ISprite_1.SpriteFlip.XFlip;\r\n            this.sprite.spriteImage('hit.' + value);\r\n            const heightDiff = this.sprite.height - this._defaultHeight;\r\n            this.sprite.top = this._initialTop + heightDiff;\r\n        })\r\n            .onDone((c) => {\r\n            this.raiseOnDone();\r\n        });\r\n        // TODO fade when spriteInstanceController can be used\r\n        this.curveFade = new Curve_1.Curve();\r\n        this.curveFade.curve(Curve_1.CurveType.linear);\r\n        this.curveFade.points([\r\n            { p: 1, t: 0 },\r\n            { p: 0, t: 1000 },\r\n        ]);\r\n        this.curveFade.onUpdate((value) => {\r\n            //this.sprite.se\r\n        });\r\n    }\r\n    start(facingRight) {\r\n        this.facingRight = facingRight;\r\n        this._initialTop = this.sprite.top;\r\n        this._defaultHeight = this.sprite.height;\r\n        if (!this.sprite) {\r\n            console.error('Need to call initialize() first.');\r\n            return null;\r\n        }\r\n        if (!this.curve.isRunning()) {\r\n            // start moving\r\n            this.curve.start(true);\r\n            // set the first frame\r\n            this.sprite.flipDirection = this.facingRight\r\n                ? ISprite_1.SpriteFlip.None\r\n                : ISprite_1.SpriteFlip.XFlip;\r\n            this.sprite.spriteImage('hit.1');\r\n        }\r\n        return this;\r\n    }\r\n    stop() {\r\n        this.sprite.spriteImage('default');\r\n        this.curve.pause();\r\n        return this;\r\n    }\r\n    update(dt) {\r\n        this.curve.update(dt);\r\n    }\r\n}\r\nexports.HitAnimation = HitAnimation;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/HitAnimation.ts?");

/***/ }),

/***/ "./src/_game/components/JumpAnimation.ts":
/*!***********************************************!*\
  !*** ./src/_game/components/JumpAnimation.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.JumpAnimation = void 0;\r\nconst ISprite_1 = __webpack_require__(/*! ../../graphics/ISprite */ \"./src/graphics/ISprite.ts\");\r\nconst Curve_1 = __webpack_require__(/*! ../../math/Curve */ \"./src/math/Curve.ts\");\r\nconst AnimationComponent_1 = __webpack_require__(/*! ./AnimationComponent */ \"./src/_game/components/AnimationComponent.ts\");\r\nclass JumpAnimation extends AnimationComponent_1.AnimationComponent {\r\n    initialize(sprite) {\r\n        this.sprite = sprite;\r\n        this.curve = new Curve_1.Curve();\r\n        const points = [];\r\n        points.push({ p: 1, t: 0 });\r\n        points.push({ p: 2, t: 150 });\r\n        points.push({ p: 3, t: 250 });\r\n        points.push({ p: 4, t: 300 });\r\n        points.push({ p: 4, t: 400 });\r\n        this.curve.points(points);\r\n        let lastValue = -1;\r\n        this.curve\r\n            .onUpdate((value) => {\r\n            // wait for the value to change\r\n            if (value == lastValue) {\r\n                return;\r\n            }\r\n            lastValue = value;\r\n            // animation sprites\r\n            this.sprite.flipDirection = this.facingRight\r\n                ? ISprite_1.SpriteFlip.None\r\n                : ISprite_1.SpriteFlip.XFlip;\r\n            this.sprite.spriteImage('jump.' + value);\r\n        })\r\n            .onDone((c) => {\r\n            this.raiseOnDone();\r\n        });\r\n    }\r\n    start(facingRight = true) {\r\n        this.facingRight = facingRight;\r\n        if (!this.sprite) {\r\n            console.error('Need to call initialize() first.');\r\n            return null;\r\n        }\r\n        this.curve.start(true);\r\n        // set the first frame\r\n        this.sprite.flipDirection = this.facingRight\r\n            ? ISprite_1.SpriteFlip.None\r\n            : ISprite_1.SpriteFlip.XFlip;\r\n        this.sprite.spriteImage('jump.1');\r\n    }\r\n    stop() {\r\n        this.curve.pause();\r\n        return this;\r\n    }\r\n    update(dt) {\r\n        if (this.curve) {\r\n            this.curve.update(dt);\r\n        }\r\n    }\r\n}\r\nexports.JumpAnimation = JumpAnimation;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/JumpAnimation.ts?");

/***/ }),

/***/ "./src/_game/components/PlayerController.ts":
/*!**************************************************!*\
  !*** ./src/_game/components/PlayerController.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PlayerController = void 0;\r\nconst UserAction_1 = __webpack_require__(/*! ../../core/UserAction */ \"./src/core/UserAction.ts\");\r\nconst GameAssetManager_1 = __webpack_require__(/*! ../system/GameAssetManager */ \"./src/_game/system/GameAssetManager.ts\");\r\nconst SpriteId_1 = __webpack_require__(/*! ../data/SpriteId */ \"./src/_game/data/SpriteId.ts\");\r\nconst rect_1 = __importDefault(__webpack_require__(/*! ../../math/rect */ \"./src/math/rect.ts\"));\r\nconst RidgeBody_1 = __webpack_require__(/*! ../../physics/RidgeBody */ \"./src/physics/RidgeBody.ts\");\r\nconst GameComponent_1 = __webpack_require__(/*! ./GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\nconst SpriteController2_1 = __webpack_require__(/*! ../../graphics/SpriteController2 */ \"./src/graphics/SpriteController2.ts\");\r\nconst EntityState_1 = __webpack_require__(/*! ../data/EntityState */ \"./src/_game/data/EntityState.ts\");\r\nconst ISprite_1 = __webpack_require__(/*! ../../graphics/ISprite */ \"./src/graphics/ISprite.ts\");\r\nclass PlayerController extends GameComponent_1.GameComponent {\r\n    get id() {\r\n        return SpriteId_1.SpriteId.Player;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        // config options\r\n        this.bulletSpeed = 3.0;\r\n        this.jumpVelocity = 3.0;\r\n        this.sprite = new SpriteController2_1.SpriteController2(eng);\r\n        // setup entity state\r\n        this.entityState = new EntityState_1.EntityState(this.eng);\r\n        this.entityState.onStateChange = this.onStateChange;\r\n        this.ridgeBody = new RidgeBody_1.RidgeBody(this.eng, 'player', this, new rect_1.default([0, 64, 0, 64]));\r\n        this.ridgeBody.onPosition = this.updateFromRidgeBodyPosition.bind(this);\r\n        this.ridgeBody.onCollision = this.onCollision.bind(this);\r\n        this.eng.physicsManager.addBody(this.ridgeBody);\r\n    }\r\n    reset() {\r\n        // offset the sprite from the center to the top left\r\n        this.sprite.leftOffset = 1;\r\n        this.sprite.topOffset = -1;\r\n        this.sprite.flipDirection = ISprite_1.SpriteFlip.None;\r\n        // set the default image and double the scale\r\n        this.sprite.spriteImage('default');\r\n        this.sprite.xScale = 2.0;\r\n        this.sprite.yScale = 2.0;\r\n        this._touchingGround = false;\r\n        this.sprite.depth = 0.7;\r\n        this.ridgeBody.reset();\r\n        // initial the player's position\r\n        // and collision box size\r\n        this.ridgeBody.set(0, this.sprite.width, 0 + this.sprite.height, this.sprite.height);\r\n        // add the ridge body back in\r\n        this.eng.physicsManager.addBody(this.ridgeBody);\r\n        // reset state\r\n        this.entityState.initialize(this.sprite, this.ridgeBody, new EntityState_1.EntityStateOptions());\r\n    }\r\n    initialize() {\r\n        const spriteData = this.eng.assetManager.getTexture(GameAssetManager_1.TextureAssets.edge);\r\n        this.sprite.initialize(spriteData.texture, spriteData.data);\r\n        // offset the sprite from the center to the top left\r\n        this.sprite.leftOffset = 1;\r\n        this.sprite.topOffset = -1;\r\n        // set the default image and double the scale\r\n        this.sprite.spriteImage('default');\r\n        this.sprite.xScale = 2.0;\r\n        this.sprite.yScale = 2.0;\r\n        this.sprite.depth = 0.7;\r\n        // initial the player's position\r\n        // and collision box size\r\n        this.ridgeBody.set(100, this.sprite.width, 150 + this.sprite.height, this.sprite.height);\r\n        this.ridgeBody.active = true;\r\n        this._touchingGround = false;\r\n    }\r\n    loadPlayer(options) {\r\n        const spriteData = this.eng.assetManager.getTexture(GameAssetManager_1.TextureAssets.edge);\r\n        this.sprite.initialize(spriteData.texture, spriteData.data);\r\n        // offset the sprite from the center to the top left\r\n        this.sprite.leftOffset = 1;\r\n        this.sprite.topOffset = -1;\r\n        // set the default image and double the scale\r\n        this.sprite.spriteImage('default');\r\n        this.sprite.xScale = 2.0;\r\n        this.sprite.yScale = 2.0;\r\n        this.sprite.depth = 0.7;\r\n        this.setPosition(options.position.x, options.position.y);\r\n        this.ridgeBody.showCollision = options.meta.get('debug') == 'true';\r\n        this.ridgeBody.active = true;\r\n        this.entityState.initialize(this.sprite, this.ridgeBody, new EntityState_1.EntityStateOptions());\r\n        // start by teleporting down\r\n        this.entityState.teleport(false);\r\n    }\r\n    onStateChange(before, after) { }\r\n    handleUserAction(state) {\r\n        if (state.isReleased(UserAction_1.UserAction.Up)) {\r\n            if (this.entityState.state() == EntityState_1.EntityStateFlags.Disable) {\r\n                this.entityState.teleport(false);\r\n            }\r\n            else {\r\n                this.entityState.teleport(true);\r\n            }\r\n        }\r\n        if (!this.ridgeBody.active) {\r\n            return false;\r\n        }\r\n        if (state.isDown(UserAction_1.UserAction.Right)) {\r\n            this.entityState.move(true);\r\n        }\r\n        if (state.isDown(UserAction_1.UserAction.Left)) {\r\n            this.entityState.move(false);\r\n        }\r\n        if (state.isReleased(UserAction_1.UserAction.Right)) {\r\n            this.entityState.stopMoving();\r\n        }\r\n        if (state.isReleased(UserAction_1.UserAction.Left)) {\r\n            this.entityState.stopMoving();\r\n        }\r\n        if (state.isReleased(UserAction_1.UserAction.A)) {\r\n            this.entityState.shoot();\r\n        }\r\n        if (state.isDown(UserAction_1.UserAction.B)) {\r\n            if (this._jumpReady || this._jumpReady === undefined) {\r\n                this._jumpReady = false;\r\n                this.entityState.jump();\r\n            }\r\n        }\r\n        if (state.isReleased(UserAction_1.UserAction.B)) {\r\n            this._jumpReady = true;\r\n            this.entityState.stopJumping();\r\n        }\r\n        return false;\r\n    }\r\n    onCollision(collisions) {\r\n        this._touchingGround = false;\r\n        this._collidingRight = false;\r\n        this._collidingLeft = false;\r\n        // see how we hit the collisions\r\n        for (let c of collisions) {\r\n            if (c.top == this.ridgeBody.bottom) {\r\n                this._touchingGround = true;\r\n            }\r\n            if (c.right == this.ridgeBody.left) {\r\n                this._collidingLeft = true;\r\n            }\r\n            if (c.left == this.ridgeBody.right) {\r\n                this._collidingRight = true;\r\n            }\r\n        }\r\n        if (!this._touchingGround &&\r\n            (this._collidingLeft || this._collidingRight)) {\r\n            this.entityState.slidingDown(this._collidingRight);\r\n        }\r\n        else if (this._touchingGround) {\r\n            this.entityState.landed();\r\n        }\r\n    }\r\n    /**\r\n     * Used to manually set the player's position.\r\n     * This should only be done during setup and from then on the\r\n     * ridgeBody will manage the position.\r\n     * @param left\r\n     * @param top\r\n     */\r\n    setPosition(left, top) {\r\n        this.ridgeBody.set(left, this.sprite.width, top + this.sprite.height, this.sprite.height);\r\n        this.updateFromRidgeBodyPosition(left, top, this.ridgeBody);\r\n    }\r\n    /**\r\n     * This is used to set the position of the player.\r\n     * This will check for collisions and adjust the position\r\n     * @param position\r\n     */\r\n    updateFromRidgeBodyPosition(left, top, body) {\r\n        // update the screen position.\r\n        this.sprite.left = left; // + this.sprite.width * 0.5;\r\n        this.sprite.top = top; // - this.sprite.height * 0.5;\r\n        // update view manager position\r\n        const forwardPadding = 200;\r\n        const upPadding = 100;\r\n        const xOffset = this.sprite.left - this.eng.width / 2 + forwardPadding;\r\n        const yOffset = this.sprite.top - this.eng.height / 2 + upPadding;\r\n        this.eng.viewManager.setTarget(xOffset, yOffset);\r\n        //console.debug('player: pos ' + this.screenPosition);\r\n    }\r\n    hit(by) {\r\n        this.entityState.die();\r\n        /*\r\n        if (!this.hitAnimation.isRunning) {\r\n          this.ridgeBody.active = false;\r\n          this.hitAnimation.start(this.facingDirection == Direction.Right);\r\n          this.hitAnimation.onDone = (curve: Curve) => {\r\n            this.eng.sceneManager.setNextScene('level.2.0');\r\n            console.debug('die');\r\n          };\r\n        }\r\n        */\r\n    }\r\n    update(dt) {\r\n        this.entityState.update(dt);\r\n        this.sprite.update(dt);\r\n    }\r\n}\r\nexports.PlayerController = PlayerController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/PlayerController.ts?");

/***/ }),

/***/ "./src/_game/components/RunAnimation.ts":
/*!**********************************************!*\
  !*** ./src/_game/components/RunAnimation.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RunAnimation = void 0;\r\nconst ISprite_1 = __webpack_require__(/*! ../../graphics/ISprite */ \"./src/graphics/ISprite.ts\");\r\nconst Curve_1 = __webpack_require__(/*! ../../math/Curve */ \"./src/math/Curve.ts\");\r\nconst AnimationComponent_1 = __webpack_require__(/*! ./AnimationComponent */ \"./src/_game/components/AnimationComponent.ts\");\r\nclass RunAnimation extends AnimationComponent_1.AnimationComponent {\r\n    initialize(sprite) {\r\n        this.sprite = sprite;\r\n        this.curve = new Curve_1.Curve();\r\n        const points = [];\r\n        this.touchingFloor = true;\r\n        this.firstOne = true;\r\n        this.facingRight = true;\r\n        points.push({ p: 1, t: 0 });\r\n        points.push({ p: 2, t: 50 });\r\n        points.push({ p: 3, t: 100 });\r\n        points.push({ p: 4, t: 150 });\r\n        points.push({ p: 5, t: 200 });\r\n        points.push({ p: 6, t: 250 });\r\n        points.push({ p: 7, t: 300 });\r\n        points.push({ p: 8, t: 350 });\r\n        points.push({ p: 8, t: 400 });\r\n        points.push({ p: 9, t: 450 });\r\n        points.push({ p: 10, t: 500 });\r\n        points.push({ p: 10, t: 550 });\r\n        this.curve.points(points);\r\n        let lastValue = -1;\r\n        this.curve.onUpdate((value) => {\r\n            // wait for the value to change\r\n            if (value == lastValue) {\r\n                return;\r\n            }\r\n            lastValue = value;\r\n            // animation sprites\r\n            if (!this.firstOne) {\r\n                value++;\r\n            }\r\n            value = value > 10 ? 2 : value;\r\n            this.sprite.flipDirection = this.facingRight\r\n                ? ISprite_1.SpriteFlip.None\r\n                : ISprite_1.SpriteFlip.XFlip;\r\n            if (this.touchingFloor) {\r\n                this.sprite.spriteImage('run.' + value);\r\n            }\r\n            else {\r\n                this.sprite.spriteImage('jump.5');\r\n            }\r\n            if (value >= 10) {\r\n                this.firstOne = false;\r\n            }\r\n        });\r\n    }\r\n    stop() {\r\n        this.curve.pause();\r\n        return this;\r\n    }\r\n    start(facingRight) {\r\n        this.facingRight = facingRight;\r\n        if (!this.sprite) {\r\n            console.error('Need to call initialize() first.');\r\n            return null;\r\n        }\r\n        if (!this.curve.isRunning()) {\r\n            // start moving\r\n            this.firstOne = true;\r\n            this.curve.repeat(-1).start(true);\r\n            // set the first frame\r\n            this.sprite.flipDirection = this.facingRight\r\n                ? ISprite_1.SpriteFlip.None\r\n                : ISprite_1.SpriteFlip.XFlip;\r\n            if (this.touchingFloor) {\r\n                this.sprite.spriteImage('run.1');\r\n            }\r\n            else {\r\n                this.sprite.spriteImage('jump.5');\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    update(dt) {\r\n        if (this.curve) {\r\n            this.curve.update(dt);\r\n        }\r\n    }\r\n}\r\nexports.RunAnimation = RunAnimation;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/RunAnimation.ts?");

/***/ }),

/***/ "./src/_game/components/ShootAnimation.ts":
/*!************************************************!*\
  !*** ./src/_game/components/ShootAnimation.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ShootAnimation = void 0;\r\nconst ISprite_1 = __webpack_require__(/*! ../../graphics/ISprite */ \"./src/graphics/ISprite.ts\");\r\nconst Curve_1 = __webpack_require__(/*! ../../math/Curve */ \"./src/math/Curve.ts\");\r\nconst AnimationComponent_1 = __webpack_require__(/*! ./AnimationComponent */ \"./src/_game/components/AnimationComponent.ts\");\r\nclass ShootAnimation extends AnimationComponent_1.AnimationComponent {\r\n    initialize(sprite) {\r\n        this.sprite = sprite;\r\n        this.curve = new Curve_1.Curve();\r\n        const points = [];\r\n        this.facingRight = true;\r\n        points.push({ p: 1, t: 0 });\r\n        points.push({ p: 2, t: 150 });\r\n        points.push({ p: 3, t: 300 });\r\n        this.curve.points(points);\r\n        let lastValue = -1;\r\n        this.curve\r\n            .onUpdate((value) => {\r\n            // wait for the value to change\r\n            if (value == lastValue) {\r\n                return;\r\n            }\r\n            lastValue = value;\r\n            this.sprite.flipDirection = this.facingRight\r\n                ? ISprite_1.SpriteFlip.None\r\n                : ISprite_1.SpriteFlip.XFlip;\r\n            if (value > 2) {\r\n                this.sprite.spriteImage('default');\r\n            }\r\n            else {\r\n                this.sprite.spriteImage('ground.shoot.' + value);\r\n            }\r\n        })\r\n            .onDone((c) => {\r\n            this.raiseOnDone();\r\n        });\r\n    }\r\n    stop() {\r\n        this.sprite.spriteImage('default');\r\n        this.curve.pause();\r\n        return this;\r\n    }\r\n    start(facingRight) {\r\n        this.facingRight = facingRight;\r\n        if (!this.sprite) {\r\n            console.error('Need to call initialize() first.');\r\n            return null;\r\n        }\r\n        // start moving\r\n        this.curve.start(true);\r\n        // set the first frame\r\n        this.sprite.flipDirection = this.facingRight\r\n            ? ISprite_1.SpriteFlip.None\r\n            : ISprite_1.SpriteFlip.XFlip;\r\n        this.sprite.spriteImage('ground.shoot.1');\r\n        return this;\r\n    }\r\n    update(dt) {\r\n        if (this.curve) {\r\n            this.curve.update(dt);\r\n        }\r\n    }\r\n}\r\nexports.ShootAnimation = ShootAnimation;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/ShootAnimation.ts?");

/***/ }),

/***/ "./src/_game/components/TeleportAnimation.ts":
/*!***************************************************!*\
  !*** ./src/_game/components/TeleportAnimation.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TeleportAnimation = void 0;\r\nconst Curve_1 = __webpack_require__(/*! ../../math/Curve */ \"./src/math/Curve.ts\");\r\nconst AnimationComponent_1 = __webpack_require__(/*! ./AnimationComponent */ \"./src/_game/components/AnimationComponent.ts\");\r\nclass TeleportAnimation extends AnimationComponent_1.AnimationComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.speed = 0.2; // how many seconds to move from top to bottom\r\n        this.animationSpeedScale = 1; // normal speed is 1 .5 is half time, 2 is twice as fast\r\n        /**\r\n         * The ground level + the height of the sprite.\r\n         * This should be where the top corner of the\r\n         * sprite rests\r\n         */\r\n        this.groundLevel = 300;\r\n        this.xOffset = 10;\r\n    }\r\n    get running() {\r\n        return this._running;\r\n    }\r\n    get isUp() {\r\n        return this._isUp;\r\n    }\r\n    initialize(sprite) {\r\n        this._isUp = true;\r\n        this.sprite = sprite;\r\n        this.curveMove = new Curve_1.Curve();\r\n        this.curve = new Curve_1.Curve();\r\n        this._running = false;\r\n        this.curveMove.curve(Curve_1.CurveType.linear);\r\n        this.curveMove.onUpdate((value) => {\r\n            this.sprite.left = this.xOffset;\r\n            this.sprite.top = value + this.sprite.height;\r\n        });\r\n        this.curveMove.onDone((curve) => {\r\n            if (this.goingUp) {\r\n                this._isUp = true;\r\n                this._running = false;\r\n                // if we were going up then we are done here\r\n                this.raiseOnDone();\r\n            }\r\n            else {\r\n                // then start the animation\r\n                this.curve.reverse(false).start(true);\r\n            }\r\n        });\r\n        const points = [];\r\n        const scale = 1 / this.animationSpeedScale;\r\n        points.push({ p: 1, t: 0 });\r\n        points.push({ p: 2, t: 50 * scale });\r\n        points.push({ p: 3, t: 100 * scale });\r\n        points.push({ p: 4, t: 150 * scale });\r\n        points.push({ p: 5, t: 200 * scale });\r\n        points.push({ p: 6, t: 250 * scale });\r\n        points.push({ p: 7, t: 300 * scale });\r\n        points.push({ p: 8, t: 350 * scale });\r\n        points.push({ p: 8, t: 400 * scale });\r\n        this.curve.points(points);\r\n        this.curve.onUpdate((value) => {\r\n            // animation sprites\r\n            if (value == 8) {\r\n                this.sprite.spriteImage('default');\r\n            }\r\n            else {\r\n                this.sprite.spriteImage('teleport.' + value);\r\n            }\r\n            this.sprite.left = this.xOffset;\r\n            this.sprite.top = this.groundLevel + this.sprite.height;\r\n        });\r\n        this.curve.onDone((curve) => {\r\n            if (!this.goingUp) {\r\n                this._running = false;\r\n                this.raiseOnDone();\r\n            }\r\n            else {\r\n                this.curveMove.reverse(true).start(true);\r\n            }\r\n        });\r\n    }\r\n    start(goingUp) {\r\n        this._isUp = false;\r\n        this._running = true;\r\n        const padding = 500;\r\n        const maxHeight = this.eng.viewManager.top + padding;\r\n        const distance = maxHeight + this.groundLevel;\r\n        const t = distance * this.speed;\r\n        this.curveMove.points([\r\n            { p: maxHeight, t: 0 },\r\n            { p: this.groundLevel, t },\r\n        ]);\r\n        if (!this.sprite) {\r\n            console.error('Need to call initialize() first.');\r\n            return null;\r\n        }\r\n        this.goingUp = goingUp;\r\n        if (this.goingUp) {\r\n            this.sprite.spriteImage('default');\r\n            this.curveMove.pause();\r\n            this.curve.reverse(true).start(true);\r\n        }\r\n        else {\r\n            // start moving\r\n            this.sprite.spriteImage('teleport.1');\r\n            this.curve.pause();\r\n            this.curveMove.reverse(false).start(true);\r\n        }\r\n        return this;\r\n    }\r\n    stop() {\r\n        this.curve.pause();\r\n        this.curveMove.pause();\r\n        this._running = false;\r\n    }\r\n    update(dt) {\r\n        if (this.curve) {\r\n            this.curve.update(dt);\r\n        }\r\n        if (this.curveMove) {\r\n            this.curveMove.update(dt);\r\n        }\r\n    }\r\n}\r\nexports.TeleportAnimation = TeleportAnimation;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/components/TeleportAnimation.ts?");

/***/ }),

/***/ "./src/_game/data/EntityState.ts":
/*!***************************************!*\
  !*** ./src/_game/data/EntityState.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EntityState = exports.EntityStateOptions = exports.EntityStateFlags = void 0;\r\nconst ISprite_1 = __webpack_require__(/*! ../../graphics/ISprite */ \"./src/graphics/ISprite.ts\");\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst BulletType_1 = __webpack_require__(/*! ../components/BulletType */ \"./src/_game/components/BulletType.ts\");\r\nconst Direction_1 = __webpack_require__(/*! ../components/Direction */ \"./src/_game/components/Direction.ts\");\r\nconst GameComponent_1 = __webpack_require__(/*! ../components/GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\nconst HitAnimation_1 = __webpack_require__(/*! ../components/HitAnimation */ \"./src/_game/components/HitAnimation.ts\");\r\nconst JumpAnimation_1 = __webpack_require__(/*! ../components/JumpAnimation */ \"./src/_game/components/JumpAnimation.ts\");\r\nconst RunAnimation_1 = __webpack_require__(/*! ../components/RunAnimation */ \"./src/_game/components/RunAnimation.ts\");\r\nconst ShootAnimation_1 = __webpack_require__(/*! ../components/ShootAnimation */ \"./src/_game/components/ShootAnimation.ts\");\r\nconst TeleportAnimation_1 = __webpack_require__(/*! ../components/TeleportAnimation */ \"./src/_game/components/TeleportAnimation.ts\");\r\n/**\r\n * State an entity can be in\r\n */\r\nvar EntityStateFlags;\r\n(function (EntityStateFlags) {\r\n    EntityStateFlags[EntityStateFlags[\"Disable\"] = 0] = \"Disable\"; /** the player is hidden. Like before they get teleported in. */\r\n    EntityStateFlags[EntityStateFlags[\"Idle\"] = 1] = \"Idle\";\r\n    EntityStateFlags[EntityStateFlags[\"Running\"] = 2] = \"Running\";\r\n    EntityStateFlags[EntityStateFlags[\"Falling\"] = 3] = \"Falling\";\r\n    EntityStateFlags[EntityStateFlags[\"FirstJump\"] = 4] = \"FirstJump\";\r\n    EntityStateFlags[EntityStateFlags[\"MidAirJump\"] = 5] = \"MidAirJump\";\r\n    EntityStateFlags[EntityStateFlags[\"SlidingDownWall\"] = 6] = \"SlidingDownWall\";\r\n    EntityStateFlags[EntityStateFlags[\"Hit\"] = 7] = \"Hit\";\r\n    EntityStateFlags[EntityStateFlags[\"Recovery\"] = 8] = \"Recovery\";\r\n    EntityStateFlags[EntityStateFlags[\"Dead\"] = 9] = \"Dead\";\r\n    EntityStateFlags[EntityStateFlags[\"TeleportUp\"] = 10] = \"TeleportUp\";\r\n    EntityStateFlags[EntityStateFlags[\"TeleportDown\"] = 11] = \"TeleportDown\";\r\n})(EntityStateFlags = exports.EntityStateFlags || (exports.EntityStateFlags = {}));\r\nclass EntityStateOptions {\r\n    constructor() {\r\n        this.runSpeed = 1;\r\n        this.runAcceleration = 0.9;\r\n        this.runMaxSpeed = 4;\r\n        this.jumpSpeed = 3.5;\r\n        this.midAirJumps = 1;\r\n        this.midAirNudge = 1;\r\n        this.bulletSpeed = 5;\r\n    }\r\n}\r\nexports.EntityStateOptions = EntityStateOptions;\r\nclass EntityState extends GameComponent_1.GameComponent {\r\n    get facingDirection() {\r\n        return this._facingDirection;\r\n    }\r\n    get facingRight() {\r\n        return this._facingDirection == Direction_1.Direction.Right;\r\n    }\r\n    shooting() {\r\n        return this._shooting;\r\n    }\r\n    state() {\r\n        return this._state;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.teleportAnimation = new TeleportAnimation_1.TeleportAnimation(this.eng);\r\n        this.runAnimation = new RunAnimation_1.RunAnimation(this.eng);\r\n        this.shootAnimation = new ShootAnimation_1.ShootAnimation(this.eng);\r\n        this.jumpAnimation = new JumpAnimation_1.JumpAnimation(this.eng);\r\n        this.hitAnimation = new HitAnimation_1.HitAnimation(this.eng);\r\n        this._facingDirection = Direction_1.Direction.Right;\r\n        this._midAirJump = 0;\r\n        this._shooting = false;\r\n    }\r\n    initialize(sprite, ridgeBody, options) {\r\n        this.changeState(EntityStateFlags.Idle);\r\n        this.sprite = sprite;\r\n        this.ridgeBody = ridgeBody;\r\n        this.options = options;\r\n        this.ridgeBody.maxVelocity = new vec3_1.default(options.runMaxSpeed, 1000, 1000);\r\n        this.ridgeBody.minVelocity = new vec3_1.default(-options.runMaxSpeed, -1000, -1000);\r\n        this._facingDirection = Direction_1.Direction.Right;\r\n        this._midAirJump = options.midAirJumps;\r\n        this._shooting = false;\r\n        // initialize animations\r\n        this.teleportAnimation.initialize(this.sprite);\r\n        this.runAnimation.initialize(this.sprite);\r\n        this.shootAnimation.initialize(this.sprite);\r\n        this.jumpAnimation.initialize(this.sprite);\r\n        this.hitAnimation.initialize(this.sprite);\r\n    }\r\n    falling() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                this.ridgeBody.velocity.y = 0;\r\n                this.changeState(EntityStateFlags.Falling);\r\n                this.sprite.spriteImage('jumping.6');\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                this.ridgeBody.velocity.y = 0;\r\n                this.runAnimation.stop();\r\n                this.changeState(EntityStateFlags.Falling);\r\n                this.sprite.spriteImage('jumping.6');\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n            case EntityStateFlags.SlidingDownWall:\r\n            case EntityStateFlags.Hit:\r\n            case EntityStateFlags.Recovery:\r\n            case EntityStateFlags.Dead:\r\n            case EntityStateFlags.TeleportUp:\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    /**\r\n     * The entity is now on the ground\r\n     */\r\n    landed() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                if (!this._shooting) {\r\n                    this.sprite.spriteImage('default');\r\n                    this.changeState(EntityStateFlags.Idle);\r\n                }\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n            case EntityStateFlags.SlidingDownWall:\r\n                this.sprite.spriteImage('default');\r\n                this.jumpAnimation.stop();\r\n                this.changeState(EntityStateFlags.Idle);\r\n                this._midAirJump = this.options.midAirJumps;\r\n                break;\r\n            case EntityStateFlags.Hit:\r\n            case EntityStateFlags.Recovery:\r\n            case EntityStateFlags.Dead:\r\n            case EntityStateFlags.TeleportUp:\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    stopJumping() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n            case EntityStateFlags.SlidingDownWall:\r\n                this.ridgeBody.velocity.y = 0;\r\n                this.changeState(EntityStateFlags.Falling);\r\n                break;\r\n            case EntityStateFlags.Hit:\r\n            case EntityStateFlags.Recovery:\r\n            case EntityStateFlags.Dead:\r\n            case EntityStateFlags.TeleportUp:\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    /**\r\n     * The player stops moving by releasing the arrow keys or stops jumping\r\n     * @returns\r\n     */\r\n    stopMoving() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                this.sprite.spriteImage('default');\r\n                this.runAnimation.stop();\r\n                this.ridgeBody.velocity.x = 0;\r\n                this.ridgeBody.instanceVelocity.x = 0;\r\n                this.ridgeBody.acceleration.x = 0;\r\n                this.changeState(EntityStateFlags.Idle);\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n            case EntityStateFlags.SlidingDownWall:\r\n                this.ridgeBody.velocity.x = 0;\r\n                this.ridgeBody.instanceVelocity.x = 0;\r\n                this.ridgeBody.acceleration.x = 0;\r\n                break;\r\n            case EntityStateFlags.Hit:\r\n            case EntityStateFlags.Recovery:\r\n            case EntityStateFlags.Dead:\r\n            case EntityStateFlags.TeleportUp:\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    slidingDown(right) {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n                this.changeState(EntityStateFlags.SlidingDownWall);\r\n                break;\r\n            case EntityStateFlags.SlidingDownWall:\r\n                break;\r\n            case EntityStateFlags.Hit:\r\n                break;\r\n            case EntityStateFlags.Recovery:\r\n                break;\r\n            case EntityStateFlags.Dead:\r\n                break;\r\n            case EntityStateFlags.TeleportUp:\r\n                break;\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    move(right) {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                this._facingDirection = right ? Direction_1.Direction.Right : Direction_1.Direction.Left;\r\n                this.sprite.flipDirection = right ? ISprite_1.SpriteFlip.None : ISprite_1.SpriteFlip.XFlip;\r\n                this.runAnimation.start(this.facingRight);\r\n                this.changeState(EntityStateFlags.Running);\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n                this._facingDirection = right ? Direction_1.Direction.Right : Direction_1.Direction.Left;\r\n                this.sprite.flipDirection = right ? ISprite_1.SpriteFlip.None : ISprite_1.SpriteFlip.XFlip;\r\n                this.ridgeBody.instanceVelocity.x = right\r\n                    ? this.options.midAirNudge\r\n                    : -this.options.midAirNudge;\r\n                break;\r\n            case EntityStateFlags.SlidingDownWall:\r\n                break;\r\n            case EntityStateFlags.Hit:\r\n                break;\r\n            case EntityStateFlags.Recovery:\r\n                break;\r\n            case EntityStateFlags.Dead:\r\n                break;\r\n            case EntityStateFlags.TeleportUp:\r\n                break;\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    jump() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                this.changeState(EntityStateFlags.FirstJump);\r\n                this.ridgeBody.velocity.y = this.options.jumpSpeed;\r\n                this.jumpAnimation.start(this.facingRight);\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                this.changeState(EntityStateFlags.FirstJump);\r\n                this.ridgeBody.velocity.y = this.options.jumpSpeed;\r\n                this.runAnimation.stop();\r\n                this.jumpAnimation.start(this.facingRight);\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n                // we are starting a mid air jump\r\n                if (this._midAirJump > 0) {\r\n                    this._midAirJump--;\r\n                    this.changeState(EntityStateFlags.MidAirJump);\r\n                    this.ridgeBody.velocity.y = this.options.jumpSpeed;\r\n                    this.runAnimation.stop();\r\n                    this.jumpAnimation.start(this.facingRight);\r\n                }\r\n                break;\r\n            case EntityStateFlags.MidAirJump:\r\n            case EntityStateFlags.SlidingDownWall:\r\n            case EntityStateFlags.Hit:\r\n            case EntityStateFlags.Recovery:\r\n            case EntityStateFlags.Dead:\r\n            case EntityStateFlags.TeleportUp:\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    shoot() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n                this._shooting = true;\r\n                const startPos = new vec3_1.default(this.ridgeBody.left, this.ridgeBody.bottom, 0);\r\n                startPos.y += 45;\r\n                startPos.x += this.ridgeBody.width * 0.5;\r\n                startPos.z = this.sprite.depth - 0.001;\r\n                const speed = this.options.bulletSpeed; // m/second\r\n                const velocity = new vec3_1.default(this.facingRight ? speed : -speed, 0, 0);\r\n                this.eng.bullets.addBullet({\r\n                    bulletType: BulletType_1.BulletType.PlayerBullet,\r\n                    position: startPos,\r\n                    velocity,\r\n                });\r\n                this.shootAnimation.start(this.facingRight).onDone(() => {\r\n                    this._shooting = false;\r\n                });\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n                break;\r\n            case EntityStateFlags.FirstJump:\r\n                break;\r\n            case EntityStateFlags.MidAirJump:\r\n                break;\r\n            case EntityStateFlags.SlidingDownWall:\r\n                break;\r\n            case EntityStateFlags.Hit:\r\n                break;\r\n            case EntityStateFlags.Recovery:\r\n                break;\r\n            case EntityStateFlags.Dead:\r\n                break;\r\n            case EntityStateFlags.TeleportUp:\r\n                break;\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    teleport(up) {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n            case EntityStateFlags.Idle:\r\n                this.changeState(up ? EntityStateFlags.TeleportUp : EntityStateFlags.TeleportDown);\r\n                this.ridgeBody.active = false;\r\n                // update teleport position\r\n                this.teleportAnimation.groundLevel = this.ridgeBody.bottom;\r\n                this.teleportAnimation.xOffset = this.ridgeBody.left;\r\n                this.teleportAnimation.start(up).onDone(() => {\r\n                    if (this.teleportAnimation.isUp) {\r\n                        this.changeState(EntityStateFlags.Disable);\r\n                    }\r\n                    else {\r\n                        this.changeState(EntityStateFlags.Idle);\r\n                        this.ridgeBody.active = true;\r\n                    }\r\n                });\r\n                break;\r\n            case EntityStateFlags.Running:\r\n                break;\r\n            case EntityStateFlags.Falling:\r\n                break;\r\n            case EntityStateFlags.FirstJump:\r\n                break;\r\n            case EntityStateFlags.MidAirJump:\r\n                break;\r\n            case EntityStateFlags.SlidingDownWall:\r\n                break;\r\n            case EntityStateFlags.Hit:\r\n                break;\r\n            case EntityStateFlags.Recovery:\r\n                break;\r\n            case EntityStateFlags.Dead:\r\n                break;\r\n            case EntityStateFlags.TeleportUp:\r\n                break;\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    hit() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n            case EntityStateFlags.Running:\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n            case EntityStateFlags.SlidingDownWall:\r\n                this.hitAnimation.start(this._facingDirection == Direction_1.Direction.Right);\r\n                this.runAnimation.stop();\r\n                this.ridgeBody.active = false;\r\n            case EntityStateFlags.Hit:\r\n            case EntityStateFlags.Recovery:\r\n            case EntityStateFlags.Dead:\r\n            case EntityStateFlags.TeleportUp:\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    die() {\r\n        switch (this._state) {\r\n            case EntityStateFlags.Disable:\r\n                break;\r\n            case EntityStateFlags.Idle:\r\n            case EntityStateFlags.Running:\r\n            case EntityStateFlags.Falling:\r\n            case EntityStateFlags.FirstJump:\r\n            case EntityStateFlags.MidAirJump:\r\n            case EntityStateFlags.SlidingDownWall:\r\n                this.changeState(EntityStateFlags.Dead);\r\n                this.hitAnimation\r\n                    .start(this._facingDirection == Direction_1.Direction.Right)\r\n                    .onDone(() => {\r\n                    this.eng.sceneManager.setNextScene('level.2.0');\r\n                });\r\n                this.runAnimation.stop();\r\n                this.ridgeBody.active = false;\r\n            case EntityStateFlags.Hit:\r\n            case EntityStateFlags.Recovery:\r\n            case EntityStateFlags.Dead:\r\n            case EntityStateFlags.TeleportUp:\r\n            case EntityStateFlags.TeleportDown:\r\n                break;\r\n            default:\r\n                console.error('unknown state!');\r\n        }\r\n    }\r\n    changeState(nextState) {\r\n        // make sure we set the shooting flag\r\n        let next = nextState;\r\n        if (this.onStateChange) {\r\n            this.onStateChange(this._state, next);\r\n        }\r\n        this._state = next;\r\n    }\r\n    /**\r\n     * Updates all the animations for what ever state the entity is in\r\n     * @param dt\r\n     */\r\n    update(dt) {\r\n        if (this.sprite) {\r\n            this.jumpAnimation.update(dt);\r\n            this.teleportAnimation.update(dt);\r\n            this.runAnimation.update(dt);\r\n            this.shootAnimation.update(dt);\r\n            this.hitAnimation.update(dt);\r\n            // move when running\r\n            if (this._state == EntityStateFlags.Running) {\r\n                this.ridgeBody.acceleration.x =\r\n                    this.options.runAcceleration * (this.facingRight ? 1 : -1);\r\n                this.ridgeBody.instanceVelocity.x =\r\n                    this.options.runSpeed * (this.facingRight ? 1 : -1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.EntityState = EntityState;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/data/EntityState.ts?");

/***/ }),

/***/ "./src/_game/data/ILevelData2.ts":
/*!***************************************!*\
  !*** ./src/_game/data/ILevelData2.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LevelData2 = void 0;\r\nconst rect_1 = __importDefault(__webpack_require__(/*! ../../math/rect */ \"./src/math/rect.ts\"));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../../math/vec2 */ \"./src/math/vec2.ts\"));\r\n/**\r\n * This is the level data that will be used in code.\r\n */\r\nclass LevelData2 {\r\n    constructor(data) {\r\n        this.entities = [];\r\n        this.collision = [];\r\n        this.backgrounds = [];\r\n        this.size = new vec2_1.default(data.size);\r\n        this.player = {\r\n            meta: new Map(data.player.meta),\r\n            position: new vec2_1.default(data.player.pos),\r\n        };\r\n        data.entities.forEach((e) => {\r\n            const pos = new vec2_1.default(e.pos);\r\n            const meta = new Map(e.meta);\r\n            this.entities.push({ id: e.id, pos, meta, type: e.type });\r\n        });\r\n        data.backgrounds.forEach((e) => {\r\n            const meta = new Map(e.meta);\r\n            this.backgrounds.push({ id: e.id, image: e.image, meta, type: e.type });\r\n        });\r\n        data.collision.forEach((e) => {\r\n            const meta = new Map(e.meta);\r\n            this.collision.push({\r\n                id: e.id,\r\n                box: new rect_1.default(e.box),\r\n                meta,\r\n                type: e.type,\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.LevelData2 = LevelData2;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/data/ILevelData2.ts?");

/***/ }),

/***/ "./src/_game/data/SpriteId.ts":
/*!************************************!*\
  !*** ./src/_game/data/SpriteId.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpriteId = void 0;\r\nvar SpriteId;\r\n(function (SpriteId) {\r\n    SpriteId[\"Player\"] = \"Player\";\r\n    SpriteId[\"Particel\"] = \"Particel\";\r\n    SpriteId[\"Spark\"] = \"Spark\";\r\n    SpriteId[\"Smoke\"] = \"Smoke\";\r\n    SpriteId[\"Water\"] = \"Water\";\r\n    SpriteId[\"bullet\"] = \"Bullet\";\r\n})(SpriteId = exports.SpriteId || (exports.SpriteId = {}));\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/data/SpriteId.ts?");

/***/ }),

/***/ "./src/_game/editor/EditorCanvas.tsx":
/*!*******************************************!*\
  !*** ./src/_game/editor/EditorCanvas.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EditorCanvas = void 0;\r\nconst jsx_runtime_1 = __webpack_require__(/*! jsx-dom/jsx-runtime */ \"./node_modules/jsx-dom/jsx-runtime.js\");\r\nclass EditorCanvas {\r\n    async initialize() {\r\n        this.container = ((0, jsx_runtime_1.jsx)(\"div\", { class: 'canvas-container' }));\r\n        this.element = document.createElement('canvas');\r\n        this.element.classList.add('editor-canvas', 'canvas');\r\n        this.container.append(this.element);\r\n    }\r\n}\r\nexports.EditorCanvas = EditorCanvas;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/editor/EditorCanvas.tsx?");

/***/ }),

/***/ "./src/_game/editor/EditorEntityList.tsx":
/*!***********************************************!*\
  !*** ./src/_game/editor/EditorEntityList.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EditorEntityList = void 0;\r\nconst jsx_runtime_1 = __webpack_require__(/*! jsx-dom/jsx-runtime */ \"./node_modules/jsx-dom/jsx-runtime.js\");\r\nconst Component_1 = __webpack_require__(/*! ../../components/Component */ \"./src/components/Component.ts\");\r\nclass EditorEntityList extends Component_1.Component {\r\n    constructor(eng) {\r\n        super(eng);\r\n    }\r\n    buildView(parent) {\r\n        const panel = ((0, jsx_runtime_1.jsx)(\"div\", { class: 'editor-entities' }));\r\n        parent.append(panel);\r\n    }\r\n}\r\nexports.EditorEntityList = EditorEntityList;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/editor/EditorEntityList.tsx?");

/***/ }),

/***/ "./src/_game/editor/GameEditor.tsx":
/*!*****************************************!*\
  !*** ./src/_game/editor/GameEditor.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameEditor = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../../components/Component */ \"./src/components/Component.ts\");\r\nconst EditorEntityList_1 = __webpack_require__(/*! ./EditorEntityList */ \"./src/_game/editor/EditorEntityList.tsx\");\r\nconst EditorCanvas_1 = __webpack_require__(/*! ./EditorCanvas */ \"./src/_game/editor/EditorCanvas.tsx\");\r\n__webpack_require__(/*! ../../css/editor.scss */ \"./src/css/editor.scss\");\r\nclass GameEditor extends Component_1.Component {\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.canvas = new EditorCanvas_1.EditorCanvas();\r\n        const queryString = window.location.search;\r\n        this.urlParams = new URLSearchParams(queryString);\r\n        this._isActive = !!this.urlParams.get('editor');\r\n    }\r\n    async initialize(root) {\r\n        if (!this._isActive) {\r\n            return;\r\n        }\r\n        this.entityList = new EditorEntityList_1.EditorEntityList(this.eng);\r\n        this.entityList.buildView(root);\r\n        await this.canvas.initialize();\r\n        root.append(this.canvas.container);\r\n        this._ready = true;\r\n    }\r\n    onGameInitialized() { }\r\n    update(dt) {\r\n        if (this._ready) {\r\n        }\r\n    }\r\n}\r\nexports.GameEditor = GameEditor;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/editor/GameEditor.tsx?");

/***/ }),

/***/ "./src/_game/hud/ToggleButton.ts":
/*!***************************************!*\
  !*** ./src/_game/hud/ToggleButton.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ToggleButton = void 0;\r\nconst SpriteController2_1 = __webpack_require__(/*! ../../graphics/SpriteController2 */ \"./src/graphics/SpriteController2.ts\");\r\nconst rect_1 = __importDefault(__webpack_require__(/*! ../../math/rect */ \"./src/math/rect.ts\"));\r\nconst GameComponent_1 = __webpack_require__(/*! ../components/GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\nconst GameAssetManager_1 = __webpack_require__(/*! ../system/GameAssetManager */ \"./src/_game/system/GameAssetManager.ts\");\r\n/**\r\n * Creates a toggle button\r\n */\r\nclass ToggleButton extends GameComponent_1.GameComponent {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get isOn() {\r\n        return this._isOn;\r\n    }\r\n    set alpha(value) {\r\n        this.onSprite.alpha = value;\r\n        this.offSprite.alpha = value;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n    }\r\n    initialize(id, userAction, actionOnDown, collection) {\r\n        this._id = id;\r\n        this._userAction = userAction;\r\n        this._actionOnDown = actionOnDown;\r\n        const spriteAsset = this.eng.assetManager.getTexture(GameAssetManager_1.TextureAssets.hud);\r\n        this.onSprite = new SpriteController2_1.SpriteController2(this.eng);\r\n        this.onSprite.initialize(spriteAsset.texture, spriteAsset.data);\r\n        //this.onSprite = new SpriteInstanceController(id + '.on', collection);\r\n        this.onSprite.spriteImage(id + '.on');\r\n        this.onSprite.leftOffset = 1;\r\n        this.onSprite.topOffset = -1;\r\n        this.onSprite.xScale = 1;\r\n        this.onSprite.yScale = 1;\r\n        //this.offSprite = new SpriteInstanceController(id + '.off', collection);\r\n        this.offSprite = new SpriteController2_1.SpriteController2(this.eng);\r\n        this.offSprite.initialize(spriteAsset.texture, spriteAsset.data);\r\n        this.offSprite.spriteImage(id + '.off');\r\n        this.offSprite.leftOffset = 1;\r\n        this.offSprite.topOffset = -1;\r\n        this.offSprite.xScale = 1;\r\n        this.offSprite.yScale = 1;\r\n        this.offSprite.visible = false;\r\n    }\r\n    setPosition(pos) {\r\n        this.onSprite.left = pos.x;\r\n        this.onSprite.top = pos.y;\r\n        this.onSprite.depth = pos.z;\r\n        this.offSprite.left = pos.x;\r\n        this.offSprite.top = pos.y;\r\n        this.offSprite.depth = pos.z;\r\n        //TODO fix this for all buttons\r\n        this.eng.input.setTouchRect(this.id, {\r\n            name: this.id,\r\n            bounds: new rect_1.default([\r\n                this.onSprite.left,\r\n                this.onSprite.width,\r\n                this.onSprite.top,\r\n                this.onSprite.height,\r\n            ]),\r\n            action: this._userAction,\r\n            isDown: false,\r\n            touchId: -1,\r\n        });\r\n    }\r\n    toggle(on) {\r\n        this._isOn = on;\r\n        this.onSprite.visible = this._isOn;\r\n        this.offSprite.visible = !this._isOn;\r\n    }\r\n    /**\r\n     * Is this toggle hit\r\n     * @param pos\r\n     * @returns\r\n     */\r\n    isHit(pos) {\r\n        // hit on x axis\r\n        if (pos.x >= this.onSprite.left &&\r\n            pos.x <= this.onSprite.left + this.onSprite.width) {\r\n            // hit on y axis\r\n            if (pos.y <= this.onSprite.top + this.onSprite.height &&\r\n                pos.y >= this.onSprite.top) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    update(dt, projection) {\r\n        this.onSprite.update(dt, projection);\r\n        this.offSprite.update(dt, projection);\r\n    }\r\n}\r\nexports.ToggleButton = ToggleButton;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/hud/ToggleButton.ts?");

/***/ }),

/***/ "./src/_game/hud/inputHud.ts":
/*!***********************************!*\
  !*** ./src/_game/hud/inputHud.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InputHud = void 0;\r\nconst UserAction_1 = __webpack_require__(/*! ../../core/UserAction */ \"./src/core/UserAction.ts\");\r\nconst SpriteInstanceCollection_1 = __webpack_require__(/*! ../../graphics/SpriteInstanceCollection */ \"./src/graphics/SpriteInstanceCollection.ts\");\r\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../../math/mat4 */ \"./src/math/mat4.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst GameComponent_1 = __webpack_require__(/*! ../components/GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\nconst GameAssetManager_1 = __webpack_require__(/*! ../system/GameAssetManager */ \"./src/_game/system/GameAssetManager.ts\");\r\nconst ToggleButton_1 = __webpack_require__(/*! ./ToggleButton */ \"./src/_game/hud/ToggleButton.ts\");\r\n/**\r\n * This class is used to control the touch screen hud and icons that support it.\r\n */\r\nclass InputHud extends GameComponent_1.GameComponent {\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.spriteCollection = new SpriteInstanceCollection_1.SpriteInstanceCollection(eng);\r\n        this.upToggle = new ToggleButton_1.ToggleButton(this.eng);\r\n        this.rightToggle = new ToggleButton_1.ToggleButton(this.eng);\r\n        this.leftToggle = new ToggleButton_1.ToggleButton(this.eng);\r\n        this.attackToggle = new ToggleButton_1.ToggleButton(this.eng);\r\n        this.jumpToggle = new ToggleButton_1.ToggleButton(this.eng);\r\n        this.startToggle = new ToggleButton_1.ToggleButton(this.eng);\r\n    }\r\n    initialize() {\r\n        const spriteAsset = this.eng.assetManager.getTexture(GameAssetManager_1.TextureAssets.hud);\r\n        //this.spriteCollection.initialize(spriteAsset.texture, spriteAsset.data);\r\n        this.upToggle.initialize('up', UserAction_1.UserAction.Up, true, this.spriteCollection);\r\n        this.rightToggle.initialize('right', UserAction_1.UserAction.Right, false, this.spriteCollection);\r\n        this.leftToggle.initialize('left', UserAction_1.UserAction.Left, true, this.spriteCollection);\r\n        this.attackToggle.initialize('attack', UserAction_1.UserAction.A, false, this.spriteCollection);\r\n        this.jumpToggle.initialize('jump', UserAction_1.UserAction.B, false, this.spriteCollection);\r\n        this.startToggle.initialize('pause', UserAction_1.UserAction.Start, false, this.spriteCollection);\r\n        // set alpha\r\n        this.upToggle.alpha = 0.5;\r\n        this.rightToggle.alpha = 0.5;\r\n        this.leftToggle.alpha = 0.5;\r\n        this.attackToggle.alpha = 0.5;\r\n        this.jumpToggle.alpha = 0.5;\r\n        this.startToggle.alpha = 0.5;\r\n        // turn off\r\n        this.upToggle.toggle(false);\r\n        this.rightToggle.toggle(false);\r\n        this.leftToggle.toggle(false);\r\n        this.attackToggle.toggle(false);\r\n        this.jumpToggle.toggle(false);\r\n        this.startToggle.toggle(false);\r\n        this.leftToggle.setPosition(new vec3_1.default(10, 80, -0.5));\r\n        this.upToggle.setPosition(new vec3_1.default(74, 100, -0.5));\r\n        this.rightToggle.setPosition(new vec3_1.default(138, 80, -0.5));\r\n        this.startToggle.setPosition(new vec3_1.default(400, 50, -0.5));\r\n        this.attackToggle.setPosition(new vec3_1.default(600, 50, -0.5));\r\n        this.jumpToggle.setPosition(new vec3_1.default(664, 50, -0.5));\r\n        this._projection = mat4_1.default.orthographic(0, this.eng.width, 0, this.eng.height, 1, -1);\r\n    }\r\n    handleUserAction(action) {\r\n        /*\r\n        //console.debug('input action ', action);\r\n        if (action.inputReleased) {\r\n          if (this.upToggle.isOn) {\r\n            action.buttonsDown = UserAction.None;\r\n            action.buttonsReleased = UserAction.Up;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.rightToggle.isOn) {\r\n            action.buttonsDown = UserAction.None;\r\n            action.buttonsReleased = UserAction.Right;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.leftToggle.isOn) {\r\n            action.buttonsDown = UserAction.None;\r\n            action.buttonsReleased = UserAction.Left;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.attackToggle.isOn) {\r\n            action.buttonsDown = UserAction.None;\r\n            action.buttonsReleased = UserAction.A;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.jumpToggle.isOn) {\r\n            action.buttonsDown = UserAction.None;\r\n            action.buttonsReleased = UserAction.B;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.startToggle.isOn) {\r\n            action.buttonsDown = UserAction.None;\r\n            action.buttonsReleased = UserAction.Start;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n        }\r\n    \r\n        if (action.inputDown[0]) {\r\n          if (this.upToggle.isHit(action.touchPoint[0])) {\r\n            action.buttonsDown = action.buttonsDown | UserAction.Up;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.rightToggle.isHit(action.touchPoint[0])) {\r\n            action.buttonsDown = action.buttonsDown | UserAction.Right;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.leftToggle.isHit(action.touchPoint[0])) {\r\n            action.buttonsDown = action.buttonsDown | UserAction.Left;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.attackToggle.isHit(action.touchPoint[0])) {\r\n            action.buttonsDown = action.buttonsDown | UserAction.A;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.jumpToggle.isHit(action.touchPoint[0])) {\r\n            action.buttonsDown = action.buttonsDown | UserAction.B;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n          if (this.startToggle.isHit(action.touchPoint[0])) {\r\n            action.buttonsDown = action.buttonsDown | UserAction.Start;\r\n            this.eng.input.injectSate(action);\r\n          }\r\n        }\r\n    \r\n        this.upToggle.toggle(action.isDown(UserAction.Up));\r\n        this.rightToggle.toggle(action.isDown(UserAction.Right));\r\n        this.leftToggle.toggle(action.isDown(UserAction.Left));\r\n        this.attackToggle.toggle(action.isDown(UserAction.A));\r\n        this.jumpToggle.toggle(action.isDown(UserAction.B));\r\n        this.startToggle.toggle(action.isDown(UserAction.Start));\r\n    */\r\n        return false;\r\n    }\r\n    update(dt) {\r\n        //this.spriteCollection.update(dt, this._projection);\r\n        this.upToggle.update(dt, this._projection);\r\n        this.rightToggle.update(dt, this._projection);\r\n        this.leftToggle.update(dt, this._projection);\r\n        this.attackToggle.update(dt, this._projection);\r\n        this.jumpToggle.update(dt, this._projection);\r\n        this.startToggle.update(dt, this._projection);\r\n    }\r\n}\r\nexports.InputHud = InputHud;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/hud/inputHud.ts?");

/***/ }),

/***/ "./src/_game/samples/ParticleTest.ts":
/*!*******************************************!*\
  !*** ./src/_game/samples/ParticleTest.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ParticleTest = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../../components/Component */ \"./src/components/Component.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../../math/vec4 */ \"./src/math/vec4.ts\"));\r\nconst Emitter_1 = __webpack_require__(/*! ../../particle/Emitter */ \"./src/particle/Emitter.ts\");\r\nclass ParticleTest extends Component_1.Component {\r\n    initialize() {\r\n        this.water = new Emitter_1.Emitter(this.eng, 'water.1');\r\n        this.water.initialize({\r\n            textureAsset: this.eng.assetManager.getTexture('enemies'),\r\n            sprite: 'particle.1',\r\n            waitForAll: false,\r\n            position: new vec2_1.default(250, 700),\r\n            maxParticles: 150,\r\n            creationDelay: 10,\r\n            positionMin: new vec2_1.default(0, 0),\r\n            positionMax: new vec2_1.default(0, 0),\r\n            angleMin: 90,\r\n            angleMax: 45,\r\n            speedMin: 0.5,\r\n            speedMax: 0.8,\r\n            scaleMin: 0.3,\r\n            scaleMax: 0.4,\r\n            rotation: 0,\r\n            angularVelocity: 0,\r\n            scaleAspectRatio: 1,\r\n            scaleGrowth: 3 /** grow by 200% over the life time */,\r\n            colorStart: new vec4_1.default(0, 0.5, 0.7, 1),\r\n            colorEnd: new vec4_1.default(1.0, 1.0, 1.0, 0.3),\r\n            gravity: new vec3_1.default(0, -7.9, 0),\r\n            lifeTimeMin: 800,\r\n            lifeTimeMax: 900,\r\n            loc: [0, 0, 0, 0],\r\n        });\r\n        this.explode = new Emitter_1.Emitter(this.eng, 'explode.1');\r\n        this.explode.initialize({\r\n            textureAsset: this.eng.assetManager.getTexture('enemies'),\r\n            sprite: 'particle.1',\r\n            waitForAll: true,\r\n            position: new vec2_1.default(650, 700),\r\n            maxParticles: 200,\r\n            creationDelay: 0,\r\n            positionMin: new vec2_1.default(0, 0),\r\n            positionMax: new vec2_1.default(0, 0),\r\n            scaleMin: 0.2,\r\n            scaleMax: 0.2,\r\n            angleMin: 0,\r\n            angleMax: 360,\r\n            speedMin: 2,\r\n            speedMax: 2,\r\n            rotation: 0,\r\n            angularVelocity: 0,\r\n            scaleAspectRatio: 1,\r\n            scaleGrowth: 5 /** grow by 200% over the life time */,\r\n            colorStart: new vec4_1.default(1, 1, 1, 1),\r\n            colorEnd: new vec4_1.default(0.0, 0.0, 1.0, 0.3),\r\n            gravity: new vec3_1.default(0, 0, 0),\r\n            lifeTimeMin: 1000,\r\n            lifeTimeMax: 1000,\r\n            loc: [0, 0, 0, 0],\r\n        });\r\n    }\r\n    update(dt) {\r\n        this.water.update(dt);\r\n        this.explode.update(dt);\r\n    }\r\n}\r\nexports.ParticleTest = ParticleTest;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/samples/ParticleTest.ts?");

/***/ }),

/***/ "./src/_game/scenes/Level2.ts":
/*!************************************!*\
  !*** ./src/_game/scenes/Level2.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Level2 = void 0;\r\nconst SceneComponent_1 = __webpack_require__(/*! ../../components/SceneComponent */ \"./src/components/SceneComponent.ts\");\r\nconst level2_json_1 = __importDefault(__webpack_require__(/*! ../assets/level2/level2.json */ \"./src/_game/assets/level2/level2.json\"));\r\nconst ILevelData2_1 = __webpack_require__(/*! ../data/ILevelData2 */ \"./src/_game/data/ILevelData2.ts\");\r\nconst ParticleTest_1 = __webpack_require__(/*! ../samples/ParticleTest */ \"./src/_game/samples/ParticleTest.ts\");\r\nconst BackgroundComponet_1 = __webpack_require__(/*! ../../components/BackgroundComponet */ \"./src/components/BackgroundComponet.ts\");\r\nconst CollisionFactory_1 = __webpack_require__(/*! ../tiles/CollisionFactory */ \"./src/_game/tiles/CollisionFactory.ts\");\r\nconst inputHud_1 = __webpack_require__(/*! ../hud/inputHud */ \"./src/_game/hud/inputHud.ts\");\r\nclass Level2 extends SceneComponent_1.SceneComponent {\r\n    get eng() {\r\n        return super.eng;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.particleTest = new ParticleTest_1.ParticleTest(this.eng);\r\n        this.inputHud = new inputHud_1.InputHud(eng);\r\n    }\r\n    async initialize() {\r\n        this.particleTest.initialize();\r\n        this.inputHud.initialize();\r\n        // save the level data\r\n        const data = new ILevelData2_1.LevelData2(level2_json_1.default);\r\n        this.levelData = data;\r\n        console.debug(this.levelData);\r\n        // set the view and the limits\r\n        this.eng.viewManager.setXLimits(0, data.size.x);\r\n        this.eng.viewManager.setYLimits(0, data.size.y);\r\n        this.eng.physicsManager.initializeBounds(data.size.x, data.size.y);\r\n        // setup the player for this level\r\n        this.eng.player.loadPlayer(this.levelData.player);\r\n        // create the bullets\r\n        await this.eng.bullets.initialize();\r\n        // load all the collision\r\n        this.collisions = [];\r\n        this.updatableCollisions = [];\r\n        for (let i = 0; i < data.collision.length; i++) {\r\n            const options = data.collision[i];\r\n            // create different collision types\r\n            const collision = CollisionFactory_1.CollisionFactory.create(this.eng, options);\r\n            // save the collision\r\n            this.collisions.push(collision);\r\n            // check if it requires an update\r\n            if (collision.requireUpdate) {\r\n                this.updatableCollisions.push(collision);\r\n            }\r\n        }\r\n        // show the background image\r\n        const promises = [];\r\n        for (let i = 0; i < data.backgrounds.length; i++) {\r\n            const bgData = data.backgrounds[i];\r\n            // create the background\r\n            const bg = new BackgroundComponet_1.BackgroundComponent(this.eng, bgData.id ?? this.eng.random.getUuid());\r\n            // load the image\r\n            promises.push(bg.initialize(bgData.image, data.size));\r\n            this.eng.backgroundManager.addBackground(bg);\r\n        }\r\n        // wait for all images to load\r\n        await Promise.all(promises);\r\n    }\r\n    /**\r\n     * Handle user input\r\n     * @param action\r\n     * @returns\r\n     */\r\n    handleUserAction(action) {\r\n        this.inputHud.handleUserAction(action);\r\n        return false;\r\n    }\r\n    update(dt) {\r\n        //this.particleTest.update(dt);\r\n        this.updatableCollisions.forEach((c) => c.update(dt));\r\n    }\r\n    postUpdate(dt) {\r\n        this.inputHud.update(dt);\r\n    }\r\n    dispose() {\r\n        this.eng.physicsManager.reset();\r\n        this.eng.annotationManager.reset();\r\n        this.eng.player.reset();\r\n        this.eng.bullets.reset();\r\n        //this.eng.backgroundManager.dispose();\r\n    }\r\n}\r\nexports.Level2 = Level2;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/scenes/Level2.ts?");

/***/ }),

/***/ "./src/_game/scenes/SceneFactory.ts":
/*!******************************************!*\
  !*** ./src/_game/scenes/SceneFactory.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SceneFactory = void 0;\r\nconst GameComponent_1 = __webpack_require__(/*! ../components/GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\nconst Level2_1 = __webpack_require__(/*! ./Level2 */ \"./src/_game/scenes/Level2.ts\");\r\n//import { LevelRenderTest } from \"./LevelRenderTest\";\r\n/**\r\n * Used to create scenes\r\n */\r\nclass SceneFactory extends GameComponent_1.GameComponent {\r\n    constructor(eng) {\r\n        super(eng);\r\n    }\r\n    createScene(type) {\r\n        switch (type) {\r\n            //case 'levelRenderTest':\r\n            //  return new LevelRenderTest(this.eng);\r\n            case 'level.2.0':\r\n                return new Level2_1.Level2(this.eng);\r\n        }\r\n    }\r\n}\r\nexports.SceneFactory = SceneFactory;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/scenes/SceneFactory.ts?");

/***/ }),

/***/ "./src/_game/system/BulletManager.ts":
/*!*******************************************!*\
  !*** ./src/_game/system/BulletManager.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BulletManager = exports.BulletOptions = void 0;\r\nconst SpriteInstanceCollection_1 = __webpack_require__(/*! ../../graphics/SpriteInstanceCollection */ \"./src/graphics/SpriteInstanceCollection.ts\");\r\nconst BulletController_1 = __webpack_require__(/*! ../components/BulletController */ \"./src/_game/components/BulletController.ts\");\r\nconst GameComponent_1 = __webpack_require__(/*! ../components/GameComponent */ \"./src/_game/components/GameComponent.ts\");\r\nconst GameAssetManager_1 = __webpack_require__(/*! ./GameAssetManager */ \"./src/_game/system/GameAssetManager.ts\");\r\nclass BulletOptions {\r\n}\r\nexports.BulletOptions = BulletOptions;\r\nclass BulletManager extends GameComponent_1.GameComponent {\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.MaxBullets = 50;\r\n        this.bullets = [];\r\n        this.inactiveBullets = [];\r\n        this.sprite = new SpriteInstanceCollection_1.SpriteInstanceCollection(this.eng);\r\n    }\r\n    /**\r\n     * Add a bullet\r\n     * @param options\r\n     * @returns\r\n     */\r\n    addBullet(options) {\r\n        const bullet = this.inactiveBullets.pop();\r\n        if (bullet) {\r\n            bullet.initialize(this.sprite, options);\r\n            this.bullets.push(bullet);\r\n        }\r\n        return bullet;\r\n    }\r\n    initialize() {\r\n        const texture = this.eng.assetManager.getTexture(GameAssetManager_1.TextureAssets.edge);\r\n        this.sprite.initialize(texture.texture, texture.data);\r\n        for (let i = 0; i < this.MaxBullets; i++) {\r\n            this.inactiveBullets.push(new BulletController_1.BulletController(this.eng, 'bullet_' + i));\r\n        }\r\n    }\r\n    update(dt) {\r\n        this.sprite.update(dt);\r\n        this.bullets.forEach((b) => {\r\n            b.update(dt);\r\n            if (!b.active) {\r\n                this.inactiveBullets.push(b);\r\n            }\r\n        });\r\n        this.bullets = this.bullets.filter((b) => b.active);\r\n    }\r\n    reset() {\r\n        this.bullets.forEach((b) => {\r\n            b.destroy();\r\n        });\r\n        this.inactiveBullets = [];\r\n        this.bullets = [];\r\n    }\r\n}\r\nexports.BulletManager = BulletManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/system/BulletManager.ts?");

/***/ }),

/***/ "./src/_game/system/GameAssetManager.ts":
/*!**********************************************!*\
  !*** ./src/_game/system/GameAssetManager.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameAssetManager = exports.TextureAssets = void 0;\r\nconst AssetManager_1 = __webpack_require__(/*! ../../systems/AssetManager */ \"./src/systems/AssetManager.ts\");\r\nconst edge_png_1 = __importDefault(__webpack_require__(/*! ../assets/common/edge.png */ \"./src/_game/assets/common/edge.png\"));\r\nconst edge_json_1 = __importDefault(__webpack_require__(/*! ../assets/common/edge.json */ \"./src/_game/assets/common/edge.json\"));\r\nconst hud_png_1 = __importDefault(__webpack_require__(/*! ../assets/ui/hud.png */ \"./src/_game/assets/ui/hud.png\"));\r\nconst hud_json_1 = __importDefault(__webpack_require__(/*! ../assets/ui/hud.json */ \"./src/_game/assets/ui/hud.json\"));\r\n//import zero from '../assets/common/zero.png';\r\n//import zeroData from '../assets/common/zero.json';\r\nconst enemies_png_1 = __importDefault(__webpack_require__(/*! ../assets/common/enemies.png */ \"./src/_game/assets/common/enemies.png\"));\r\nconst enemies_json_1 = __importDefault(__webpack_require__(/*! ../assets/common/enemies.json */ \"./src/_game/assets/common/enemies.json\"));\r\nclass TextureAssets extends AssetManager_1.BuiltInTextureAssets {\r\n}\r\nexports.TextureAssets = TextureAssets;\r\nTextureAssets.edge = 'edge';\r\nTextureAssets.enemies = 'enemies';\r\n//static readonly zero = 'zero';\r\nTextureAssets.hud = 'hud';\r\n/**\r\n * Manages game asses for this platform game\r\n */\r\nclass GameAssetManager extends AssetManager_1.AssetManager {\r\n    constructor(eng) {\r\n        super(eng);\r\n    }\r\n    async initialize() {\r\n        const promises = [];\r\n        promises.push(this.loadTexture(TextureAssets.edge, edge_png_1.default, edge_json_1.default));\r\n        promises.push(this.loadTexture(TextureAssets.hud, hud_png_1.default, hud_json_1.default));\r\n        //promises.push(this.loadTexture(TextureAssets.zero, zero, zeroData));\r\n        promises.push(this.loadTexture(TextureAssets.enemies, enemies_png_1.default, enemies_json_1.default));\r\n        // this must be last\r\n        promises.push(super.initialize());\r\n        await Promise.all(promises);\r\n    }\r\n}\r\nexports.GameAssetManager = GameAssetManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/system/GameAssetManager.ts?");

/***/ }),

/***/ "./src/_game/tiles/Bottomless.ts":
/*!***************************************!*\
  !*** ./src/_game/tiles/Bottomless.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Bottomless = void 0;\r\nconst PlayerController_1 = __webpack_require__(/*! ../components/PlayerController */ \"./src/_game/components/PlayerController.ts\");\r\nconst CollisionBox_1 = __webpack_require__(/*! ./CollisionBox */ \"./src/_game/tiles/CollisionBox.ts\");\r\n/**\r\n * This is an elevator that can move up and down and side to side\r\n */\r\nclass Bottomless extends CollisionBox_1.CollisionBox {\r\n    constructor(eng, options) {\r\n        super(eng, options);\r\n        this.options = options;\r\n    }\r\n    collisionTriggered(others) {\r\n        super.collisionTriggered(others);\r\n        // see if the player hit this\r\n        for (let other of others) {\r\n            if (other.tag instanceof PlayerController_1.PlayerController) {\r\n                const player = other.tag;\r\n                player.hit(this);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    update(dt) { }\r\n}\r\nexports.Bottomless = Bottomless;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/tiles/Bottomless.ts?");

/***/ }),

/***/ "./src/_game/tiles/CollisionBox.ts":
/*!*****************************************!*\
  !*** ./src/_game/tiles/CollisionBox.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CollisionBox = void 0;\r\nconst Collision2D_1 = __webpack_require__(/*! ../../physics/Collision2D */ \"./src/physics/Collision2D.ts\");\r\nclass CollisionBox extends Collision2D_1.Collision2D {\r\n    constructor(eng, options) {\r\n        super(eng, options.id ?? eng.random.getUuid(), null, options.bounds);\r\n        this.options = options;\r\n        this._debugColor = options.color;\r\n        this.showCollision = options.debug;\r\n        this.eng.physicsManager.setCollision(this);\r\n    }\r\n}\r\nexports.CollisionBox = CollisionBox;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/tiles/CollisionBox.ts?");

/***/ }),

/***/ "./src/_game/tiles/CollisionFactory.ts":
/*!*********************************************!*\
  !*** ./src/_game/tiles/CollisionFactory.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CollisionFactory = void 0;\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../../math/vec4 */ \"./src/math/vec4.ts\"));\r\nconst Bottomless_1 = __webpack_require__(/*! ./Bottomless */ \"./src/_game/tiles/Bottomless.ts\");\r\nconst CollisionBox_1 = __webpack_require__(/*! ./CollisionBox */ \"./src/_game/tiles/CollisionBox.ts\");\r\nconst Elevator_1 = __webpack_require__(/*! ./Elevator */ \"./src/_game/tiles/Elevator.ts\");\r\nclass CollisionFactory {\r\n    static create(eng, args) {\r\n        let collision;\r\n        // some common variables\r\n        const id = args.id;\r\n        const debug = args.meta.get('debug') == 'true';\r\n        const color = this.stringToVec4(args.meta.get('color'), new vec4_1.default(1, 1, 0, 1));\r\n        const bounds = args.box;\r\n        // create different collision types\r\n        if (args.type == 'box') {\r\n            const options = {\r\n                id,\r\n                bounds,\r\n                color,\r\n                debug,\r\n            };\r\n            collision = new CollisionBox_1.CollisionBox(eng, options);\r\n        }\r\n        else if (args.type == 'elevator') {\r\n            const options = {\r\n                id,\r\n                bounds,\r\n                color,\r\n                debug,\r\n                msTime: Number(args.meta.get('msTime')),\r\n                offset: this.stringToVec2(args.meta.get('offset')),\r\n            };\r\n            collision = new Elevator_1.Elevator(eng, options);\r\n        }\r\n        else if (args.type == 'bottomless') {\r\n            const options = {\r\n                id,\r\n                bounds,\r\n                color,\r\n                debug,\r\n            };\r\n            collision = new Bottomless_1.Bottomless(eng, options);\r\n        }\r\n        else {\r\n            console.error('cannot create: ' + args.type);\r\n        }\r\n        return collision;\r\n    }\r\n    static stringToVec2(value, dest) {\r\n        if (!dest) {\r\n            dest = new vec2_1.default();\r\n        }\r\n        if (value) {\r\n            const components = value.split(',');\r\n            if (components.length > 1) {\r\n                dest.x = Number(components[0]);\r\n                dest.y = Number(components[1]);\r\n            }\r\n        }\r\n        return dest;\r\n    }\r\n    static stringToVec4(value, dest) {\r\n        if (!dest) {\r\n            dest = new vec4_1.default();\r\n        }\r\n        if (value) {\r\n            const components = value.split(',');\r\n            if (components.length > 3) {\r\n                dest.x = Number(components[0]);\r\n                dest.y = Number(components[1]);\r\n                dest.z = Number(components[2]);\r\n                dest.w = Number(components[3]);\r\n            }\r\n        }\r\n        return dest;\r\n    }\r\n}\r\nexports.CollisionFactory = CollisionFactory;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/tiles/CollisionFactory.ts?");

/***/ }),

/***/ "./src/_game/tiles/Elevator.ts":
/*!*************************************!*\
  !*** ./src/_game/tiles/Elevator.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Elevator = void 0;\r\nconst Curve_1 = __webpack_require__(/*! ../../math/Curve */ \"./src/math/Curve.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst CollisionBox_1 = __webpack_require__(/*! ./CollisionBox */ \"./src/_game/tiles/CollisionBox.ts\");\r\n/**\r\n * This is an elevator that can move up and down and side to side\r\n */\r\nclass Elevator extends CollisionBox_1.CollisionBox {\r\n    constructor(eng, options) {\r\n        super(eng, options);\r\n        this.options = options;\r\n        this.attached = new Map();\r\n        this._requiresUpdate = true;\r\n        this.startPoint = new vec2_1.default(options.bounds.left, options.bounds.top);\r\n        this.time = options.msTime;\r\n        this.endPoint = this.startPoint.copy().add(options.offset);\r\n        this.curves = new Curve_1.Curve();\r\n        this.curves.points([\r\n            { p: 0, t: 0 },\r\n            { p: 1, t: this.time },\r\n        ]);\r\n        this.curves.curve(Curve_1.CurveType.linear);\r\n        this.curves.repeat(-1);\r\n        this.curves.pingPong(true);\r\n        this.lastPosition = this.startPoint.copy(this.lastPosition);\r\n        // start the curve and update the position\r\n        this.curves.start(true, undefined, (value) => {\r\n            this.lastPosition.x = this.bounds.left;\r\n            this.lastPosition.y = this.bounds.top;\r\n            const left = this.startPoint.x + value * (this.endPoint.x - this.startPoint.x);\r\n            const top = this.startPoint.y + value * (this.endPoint.y - this.startPoint.y);\r\n            this.bounds.setPosition(left, top);\r\n            // update the position of the graphic\r\n            this.showCollision = this.options.debug;\r\n            const dx = left - this.lastPosition.x;\r\n            const dy = top - this.lastPosition.y;\r\n            // update the position of all the attached things\r\n            this.attached.forEach((c) => {\r\n                // the attached thing needs to be on the surface of the elevator\r\n                c.setPos(c.bounds.left + dx, c.bounds.top + dy);\r\n            });\r\n            this.attached.clear();\r\n        });\r\n    }\r\n    collisionTriggered(others) {\r\n        super.collisionTriggered(others);\r\n        if (!others) {\r\n            return;\r\n        }\r\n        // attach it\r\n        for (let other of others) {\r\n            if (other.bounds.bottom == this.bounds.top) {\r\n                this.attached.set(other.id, other);\r\n            }\r\n        }\r\n    }\r\n    update(dt) {\r\n        this.curves.update(dt);\r\n    }\r\n}\r\nexports.Elevator = Elevator;\r\n\n\n//# sourceURL=webpack://earthquest/./src/_game/tiles/Elevator.ts?");

/***/ }),

/***/ "./src/components/BackgroundComponet.ts":
/*!**********************************************!*\
  !*** ./src/components/BackgroundComponet.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BackgroundComponent = void 0;\r\nconst ISpriteData_1 = __webpack_require__(/*! ../graphics/ISpriteData */ \"./src/graphics/ISpriteData.ts\");\r\nconst SpriteController2_1 = __webpack_require__(/*! ../graphics/SpriteController2 */ \"./src/graphics/SpriteController2.ts\");\r\nconst Texture_1 = __webpack_require__(/*! ../graphics/Texture */ \"./src/graphics/Texture.ts\");\r\nconst Component_1 = __webpack_require__(/*! ./Component */ \"./src/components/Component.ts\");\r\n/**\r\n * This is a simple background image that scrolls behind the level\r\n */\r\nclass BackgroundComponent extends Component_1.Component {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    constructor(eng, _id) {\r\n        super(eng);\r\n        this._id = _id;\r\n        this.texture = new Texture_1.Texture(this.id, eng.gl);\r\n        this.sprite = new SpriteController2_1.SpriteController2(this.eng);\r\n    }\r\n    async initialize(image, levelSize) {\r\n        await this.texture.loadImage(image);\r\n        this.sprite.initialize(this.texture, ISpriteData_1.DefaultSpriteData);\r\n        this.sprite.spriteImage('default');\r\n        const scaleX = levelSize.x / this.texture.width;\r\n        const scaleY = levelSize.y / this.texture.height;\r\n        this.sprite.depth = 0.8;\r\n        this.sprite.top = this.texture.height * scaleY * 0.5;\r\n        this.sprite.left = this.texture.width * scaleX * 0.5;\r\n        this.sprite.xScale = scaleX;\r\n        this.sprite.yScale = scaleY;\r\n    }\r\n    update(dt) {\r\n        this.sprite.update(dt);\r\n    }\r\n    dispose() {\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n        }\r\n        if (this.sprite) {\r\n            this.sprite.dispose();\r\n        }\r\n    }\r\n}\r\nexports.BackgroundComponent = BackgroundComponent;\r\n\n\n//# sourceURL=webpack://earthquest/./src/components/BackgroundComponet.ts?");

/***/ }),

/***/ "./src/components/Component.ts":
/*!*************************************!*\
  !*** ./src/components/Component.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Component = void 0;\r\n/**\r\n * A component is something that is part of the game engine and has a reference\r\n * to the game engine and all the subsystems like text managers, collision and raise events.\r\n */\r\nclass Component {\r\n    /**\r\n     * Give components easier access to gl\r\n     */\r\n    get gl() {\r\n        return this.eng.gl;\r\n    }\r\n    get eng() {\r\n        return this._eng;\r\n    }\r\n    constructor(_eng) {\r\n        this._eng = _eng;\r\n    }\r\n}\r\nexports.Component = Component;\r\n\n\n//# sourceURL=webpack://earthquest/./src/components/Component.ts?");

/***/ }),

/***/ "./src/components/SceneComponent.ts":
/*!******************************************!*\
  !*** ./src/components/SceneComponent.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SceneComponent = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\n/**\r\n * This is a base class for a scene\r\n */\r\nclass SceneComponent extends Component_1.Component {\r\n    /**\r\n     * constructor\r\n     * @param eng\r\n     */\r\n    constructor(eng) {\r\n        super(eng);\r\n    }\r\n    /**\r\n     * Handles user input. The logic goes through a chain of commands\r\n     * @param action the action from keyboard or gamepad\r\n     * @returns True if the action was handled else false\r\n     */\r\n    handleUserAction(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * When the window is resized\r\n     */\r\n    resize(width, height) { }\r\n    /**\r\n     * Dispose the scene\r\n     */\r\n    dispose() { }\r\n}\r\nexports.SceneComponent = SceneComponent;\r\n\n\n//# sourceURL=webpack://earthquest/./src/components/SceneComponent.ts?");

/***/ }),

/***/ "./src/core/CanvasController.tsx":
/*!***************************************!*\
  !*** ./src/core/CanvasController.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CanvasController = void 0;\r\nconst jsx_runtime_1 = __webpack_require__(/*! jsx-dom/jsx-runtime */ \"./node_modules/jsx-dom/jsx-runtime.js\");\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst constants_1 = __webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\");\r\n__webpack_require__(/*! ../css/canvas.scss */ \"./src/css/canvas.scss\");\r\n/**\r\n * This controller manages the canvas\r\n */\r\nclass CanvasController extends Component_1.Component {\r\n    get gl() {\r\n        return this._glContext;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.defaultAspectRatio = 1.33333;\r\n        this._container = ((0, jsx_runtime_1.jsx)(\"div\", { class: 'canvas-container' }));\r\n        // add canvas\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = 800;\r\n        this.canvas.height = 600;\r\n        this.canvas.classList.add('canvas');\r\n        this._container.append(this.canvas);\r\n        // add an error screen\r\n        this.errorHtml = ((0, jsx_runtime_1.jsx)(\"div\", { class: 'game-error game-hidden', children: \"Width too small, try landscape\" }));\r\n        this._container.append(this.errorHtml);\r\n        window.addEventListener('resize', (e) => {\r\n            const w = (0, constants_1.clamp)(window.screen.width, 800, 1920);\r\n            const h = window.screen.height;\r\n            //this.canvas.width = w;\r\n            //this.canvas.height = w * 0.75;\r\n            /*\r\n            if (window.screen.width < 800) {\r\n              this.errorHtml.classList.remove('game-hidden');\r\n              this.canvas.classList.add('game-hidden');\r\n            } else {\r\n              this.errorHtml.classList.add('game-hidden');\r\n              this.canvas.classList.remove('game-hidden');\r\n            }\r\n      */\r\n            this.eng.resize(this.canvas.width, this.canvas.height);\r\n        });\r\n        if (this.eng.urlParams.get('debug')) {\r\n            /** @type {WebGL2RenderingContext} render context from this canvas*/\r\n            // @ts-ignore\r\n            this._glContext = WebGLDebugUtils.makeDebugContext(this.canvas.getContext('webgl2'), this.logGlError.bind(this), this.logGLCall.bind(this));\r\n        }\r\n        else {\r\n            this._glContext = this.canvas.getContext('webgl2');\r\n            if (!this._glContext) {\r\n                this.errorHtml.classList.remove('game-hidden');\r\n                this.errorHtml.innerHTML = 'webgl2 not supported!';\r\n                this.canvas.classList.add('game-hidden');\r\n            }\r\n        }\r\n        // Only continue if WebGL is available and working\r\n        if (this.gl === null) {\r\n            console.error('Unable to initialize WebGL2. Your browser or machine may not support it.');\r\n            return;\r\n        }\r\n    }\r\n    initialize(rootElement) {\r\n        rootElement.append(this._container);\r\n    }\r\n    logGlError(error, functionName, args) {\r\n        const errorString = 'GL error: ' +\r\n            error +\r\n            ' in gl.' +\r\n            functionName +\r\n            '(' +\r\n            // @ts-ignore\r\n            WebGLDebugUtils.glFunctionArgsToString(functionName, args) +\r\n            ')';\r\n        this.error(errorString);\r\n    }\r\n    error(e) {\r\n        this.errorHtml.classList.remove('game-hidden');\r\n        this.errorHtml.innerHTML += e + '<br>';\r\n        this.canvas.classList.add('game-hidden');\r\n        console.error(e);\r\n    }\r\n    logGLCall(functionName, args) {\r\n        /*\r\n        console.log(\r\n          'gl.' +\r\n            functionName +\r\n            '(' +\r\n            // @ts-ignore\r\n            (WebGLDebugUtils as any).glFunctionArgsToString(functionName, args) +\r\n            ')'\r\n        );\r\n        */\r\n    }\r\n}\r\nexports.CanvasController = CanvasController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/core/CanvasController.tsx?");

/***/ }),

/***/ "./src/core/Engine.ts":
/*!****************************!*\
  !*** ./src/core/Engine.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Engine = void 0;\r\nconst FpsController_1 = __webpack_require__(/*! ./FpsController */ \"./src/core/FpsController.ts\");\r\nconst SpritePerspectiveShader_1 = __webpack_require__(/*! ../shaders/SpritePerspectiveShader */ \"./src/shaders/SpritePerspectiveShader.ts\");\r\nconst AssetManager_1 = __webpack_require__(/*! ../systems/AssetManager */ \"./src/systems/AssetManager.ts\");\r\nconst GameManager_1 = __webpack_require__(/*! ../systems/GameManager */ \"./src/systems/GameManager.ts\");\r\nconst TextManager_1 = __webpack_require__(/*! ../systems/TextManager */ \"./src/systems/TextManager.ts\");\r\nconst ViewManager_1 = __webpack_require__(/*! ../systems/ViewManager */ \"./src/systems/ViewManager.ts\");\r\nconst Random_1 = __webpack_require__(/*! ../utilities/Random */ \"./src/utilities/Random.ts\");\r\nconst CanvasController_1 = __webpack_require__(/*! ./CanvasController */ \"./src/core/CanvasController.tsx\");\r\nconst InputHandler_1 = __webpack_require__(/*! ./InputHandler */ \"./src/core/InputHandler.ts\");\r\nconst SoundManager_1 = __webpack_require__(/*! ../systems/SoundManager */ \"./src/systems/SoundManager.ts\");\r\nconst DialogManager_1 = __webpack_require__(/*! ../systems/DialogManager */ \"./src/systems/DialogManager.ts\");\r\nconst ParticleManager_1 = __webpack_require__(/*! ../systems/ParticleManager */ \"./src/systems/ParticleManager.ts\");\r\nconst PhysicsManager_1 = __webpack_require__(/*! ../systems/PhysicsManager */ \"./src/systems/PhysicsManager.ts\");\r\nconst AnnotationManager_1 = __webpack_require__(/*! ../systems/AnnotationManager */ \"./src/systems/AnnotationManager.ts\");\r\nconst SpriteShader_1 = __webpack_require__(/*! ../shaders/SpriteShader */ \"./src/shaders/SpriteShader.ts\");\r\nconst SpriteInstanceShader_1 = __webpack_require__(/*! ../shaders/SpriteInstanceShader */ \"./src/shaders/SpriteInstanceShader.ts\");\r\nconst BackgroundManager_1 = __webpack_require__(/*! ../systems/BackgroundManager */ \"./src/systems/BackgroundManager.ts\");\r\nconst SceneManager_1 = __webpack_require__(/*! ../systems/SceneManager */ \"./src/systems/SceneManager.ts\");\r\n/**\r\n * The engine for this game. There is one instance of this\r\n * that is passed to every component. From there each component\r\n * can access the engine.\r\n */\r\nclass Engine {\r\n    get width() {\r\n        return this.gl.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.gl.canvas.height;\r\n    }\r\n    get clientHeight() {\r\n        return this.gl.canvas.clientHeight;\r\n    }\r\n    get gl() {\r\n        return this.canvasController.gl;\r\n    }\r\n    constructor() {\r\n        const queryString = window.location.search;\r\n        this.urlParams = new URLSearchParams(queryString);\r\n        // create the canvas with the gl context so everything downstream can now use it\r\n        this.canvasController = new CanvasController_1.CanvasController(this);\r\n        this.random = new Random_1.Random(1001);\r\n        this.gameManager = new GameManager_1.GameManager(this);\r\n        this.input = new InputHandler_1.InputHandler(this);\r\n        this.dialogManager = new DialogManager_1.DialogManager(this);\r\n        this.soundManager = new SoundManager_1.SoundManager();\r\n        this.viewManager = new ViewManager_1.ViewManager(this);\r\n        this.textManager = new TextManager_1.TextManager(this);\r\n        this.fps = new FpsController_1.FpsController(this);\r\n        this.assetManager = this.createAssetManager();\r\n        this.spritePerspectiveShader = new SpritePerspectiveShader_1.SpritePerspectiveShader(this.gl, 'spritePerspectiveShader');\r\n        this.spriteShader = new SpriteShader_1.SpriteShader(this.gl, 'spriteShader');\r\n        this.spriteInstanceShader = new SpriteInstanceShader_1.SpriteInstanceShader(this.gl, 'spriteInstanceShader');\r\n        this.sceneManager = this.createSceneManager();\r\n        this.particleManager = new ParticleManager_1.ParticleManager(this);\r\n        this.physicsManager = new PhysicsManager_1.PhysicsManager(this);\r\n        this.annotationManager = new AnnotationManager_1.AnnotationManager(this);\r\n        this.backgroundManager = new BackgroundManager_1.BackgroundManager(this);\r\n    }\r\n    createSceneManager() {\r\n        return new SceneManager_1.SceneManager(this, {\r\n            createScene(type) {\r\n                console.error('no scene factor found');\r\n                return null;\r\n            },\r\n        });\r\n    }\r\n    createAssetManager() {\r\n        return new AssetManager_1.AssetManager(this);\r\n    }\r\n    async initialize(root) {\r\n        try {\r\n            if (!root) {\r\n                console.error('cannot find root element');\r\n            }\r\n            this.canvasController.initialize(root);\r\n            // Browsers copy pixels from the loaded image in top-to-bottom order —\r\n            // from the top-left corner; but WebGL wants the pixels in bottom-to-top\r\n            // order — starting from the bottom-left corner. So in order to prevent\r\n            // the resulting image texture from having the wrong orientation when\r\n            // rendered, we need to make the following call, to cause the pixels to\r\n            // be flipped into the bottom-to-top order that WebGL expects.\r\n            // See jameshfisher.com/2020/10/22/why-is-my-webgl-texture-upside-down\r\n            // NOTE, this must be done before any textures are loaded\r\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);\r\n            //await this.gameManager.initialize();\r\n            await this.assetManager.initialize();\r\n            await this.textManager.initialize();\r\n            await this.dialogManager.initialize();\r\n            await this.sceneManager.initialize();\r\n            await this.particleManager.initialize();\r\n            await this.physicsManager.initialize();\r\n            await this.annotationManager.initialize();\r\n            // some gl setup\r\n            this.gl.enable(this.gl.CULL_FACE);\r\n            this.gl.cullFace(this.gl.BACK);\r\n            this.gl.enable(this.gl.BLEND);\r\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n            this.gl.enable(this.gl.DEPTH_TEST); // Enable depth testing\r\n            this.gl.depthFunc(this.gl.LEQUAL); // Near things obscure far things\r\n        }\r\n        catch (ex) {\r\n            console.error('error', ex);\r\n        }\r\n    }\r\n    handleUserAction(state) {\r\n        return (this.dialogManager.handleUserAction(state) ||\r\n            this.sceneManager.scene.handleUserAction(state));\r\n    }\r\n    gameUpdate(dt) {\r\n        this.physicsManager.update(dt);\r\n        this.sceneManager.update(dt);\r\n        this.particleManager.update(dt);\r\n        this.dialogManager.update(dt);\r\n        this.textManager.update(dt);\r\n        this.annotationManager.update(dt);\r\n        this.backgroundManager.update(dt);\r\n    }\r\n    update(dt) {\r\n        // handle gamepad polling\r\n        this.input.preUpdate(dt);\r\n        // update the fps\r\n        this.fps.update(dt);\r\n        // handle input\r\n        this.soundManager.UserReady();\r\n        const inputState = this.input.getInputState();\r\n        // handle dialog input first\r\n        this.handleUserAction(inputState);\r\n        // clear the buffers\r\n        this.gl.clearColor(0.3, 0.3, 0.3, 1.0); // Clear to black, fully opaque\r\n        this.gl.clearDepth(1.0); // Clear everything\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n        this.gameUpdate(dt);\r\n        this.input.postUpdate(dt);\r\n    }\r\n    resize(width, height) {\r\n        //this.gl.viewport(0, 0, width, height);\r\n        this.viewManager.resize(width, height);\r\n    }\r\n    dispose() { }\r\n}\r\nexports.Engine = Engine;\r\n\n\n//# sourceURL=webpack://earthquest/./src/core/Engine.ts?");

/***/ }),

/***/ "./src/core/FpsController.ts":
/*!***********************************!*\
  !*** ./src/core/FpsController.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FpsController = void 0;\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\n/**\r\n * Shows the FPS\r\n */\r\nclass FpsController extends Component_1.Component {\r\n    constructor(eng) {\r\n        super(eng);\r\n        /** The frames per second (float) */\r\n        this.fps = 0;\r\n        this.frames = 0;\r\n        this.seconds = 0;\r\n        /** Just a counter for displaying FPS to the console */\r\n        this.delayCounter = 0;\r\n        /** Show the FPS every second */\r\n        this.displayInterval = 1000;\r\n    }\r\n    /**\r\n     * Calculate the FPS\r\n     * @param {float} dt delta time in ms\r\n     */\r\n    update(dt) {\r\n        this.delayCounter += dt;\r\n        this.seconds += dt / 1000;\r\n        this.frames++;\r\n        if (this.delayCounter >= this.displayInterval) {\r\n            this.fps = this.frames / this.seconds;\r\n            this.frames = 0;\r\n            this.seconds = 0;\r\n            //console.debug('ms ' + dt.toFixed(2) + ' FPS: ' + this.fps.toFixed(2));\r\n            this.eng.textManager.setTextBlock({\r\n                id: 'FPS',\r\n                text: 'FPS: ' + this.fps.toFixed(2) + ' dt ' + dt.toFixed(2),\r\n                position: new vec2_1.default([450, 580]),\r\n                color: new vec4_1.default([0.9, 0.5, 0.8, 1.0]),\r\n                depth: -1,\r\n                scale: 0.8,\r\n            });\r\n            this.delayCounter = 0;\r\n        }\r\n    }\r\n}\r\nexports.FpsController = FpsController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/core/FpsController.ts?");

/***/ }),

/***/ "./src/core/InputHandler.ts":
/*!**********************************!*\
  !*** ./src/core/InputHandler.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InputHandler = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst InputState_1 = __webpack_require__(/*! ./InputState */ \"./src/core/InputState.ts\");\r\nconst UserAction_1 = __webpack_require__(/*! ./UserAction */ \"./src/core/UserAction.ts\");\r\nconst MouseId = 999;\r\n/**\r\n * Translates keyboard and gamepad events to game actions\r\n */\r\nclass InputHandler extends Component_1.Component {\r\n    get gamepad() {\r\n        return this._gamepad;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        /**\r\n         * touch location\r\n         */\r\n        this._touchRect = new Map();\r\n        this.gamepadPolling = 0;\r\n        this.mappingIndex = {\r\n            Start: 0,\r\n            Select: 1,\r\n            A: 2,\r\n            B: 3,\r\n            X: 4,\r\n            Y: 5,\r\n            Up: 6,\r\n            Down: 7,\r\n            Right: 8,\r\n            Left: 9,\r\n            TriggerR: 10,\r\n            TriggerL: 11,\r\n        };\r\n        this.buttonsDown = UserAction_1.UserAction.None;\r\n        this.buttonsReleased = UserAction_1.UserAction.None;\r\n        this._hasGamePad = 'getGamepads' in navigator;\r\n        console.debug('initializing input:');\r\n        this.inputMappings = {\r\n            gamePadMapping: new Map(),\r\n        };\r\n        window.addEventListener('keydown', (e) => {\r\n            this.keydown(e);\r\n        });\r\n        window.addEventListener('keyup', (e) => {\r\n            console.debug('key up ' + e.key);\r\n            this.keyup(e);\r\n        });\r\n        console.debug(' mouse enabled');\r\n        window.addEventListener('mousedown', (e) => {\r\n            if (!(e.target instanceof HTMLCanvasElement)) {\r\n                return;\r\n            }\r\n            const canvas = e.target;\r\n            const xScale = canvas.width / canvas.clientWidth;\r\n            const yScale = canvas.height / canvas.clientHeight;\r\n            const x = e.offsetX * xScale;\r\n            const y = canvas.height - e.offsetY * yScale;\r\n            this.pointerDown(MouseId, x, y);\r\n            e.preventDefault();\r\n        });\r\n        window.addEventListener('mouseup', (e) => {\r\n            if (!(e.target instanceof HTMLCanvasElement)) {\r\n                return;\r\n            }\r\n            const canvas = e.target;\r\n            const xScale = canvas.width / canvas.clientWidth;\r\n            const yScale = canvas.height / canvas.clientHeight;\r\n            const x = e.offsetX * xScale;\r\n            const y = canvas.height - e.offsetY * yScale;\r\n            this.pointerUp(MouseId, x, y);\r\n            e.preventDefault();\r\n        });\r\n        window.addEventListener('touchstart', (e) => {\r\n            if (e.touches.length == 0) {\r\n                return;\r\n            }\r\n            if (!(e.target instanceof HTMLCanvasElement)) {\r\n                return;\r\n            }\r\n            const canvas = e.target;\r\n            const xScale = canvas.width / canvas.clientWidth;\r\n            const yScale = canvas.height / canvas.clientHeight;\r\n            for (let touch of e.touches) {\r\n                const x = touch.pageX * xScale;\r\n                const y = canvas.height - touch.pageY * yScale;\r\n                this.pointerDown(touch.identifier, x, y);\r\n            }\r\n        });\r\n        window.addEventListener('touchend', (e) => {\r\n            const canvas = e.target;\r\n            const xScale = canvas.width / canvas.clientWidth;\r\n            const yScale = canvas.height / canvas.clientHeight;\r\n            for (let touch of e.changedTouches) {\r\n                const x = touch.pageX * xScale;\r\n                const y = canvas.height - touch.pageY * yScale;\r\n                this.pointerUp(touch.identifier, x, y);\r\n            }\r\n            e.preventDefault();\r\n        });\r\n        window.addEventListener('touchcancel', (e) => {\r\n            const canvas = e.target;\r\n            const xScale = canvas.width / canvas.clientWidth;\r\n            const yScale = canvas.height / canvas.clientHeight;\r\n            for (let touch of e.changedTouches) {\r\n                const x = touch.pageX * xScale;\r\n                const y = canvas.height - touch.pageY * yScale;\r\n                this.pointerUp(touch.identifier, x, y);\r\n            }\r\n            e.preventDefault();\r\n        });\r\n        this.resetInput();\r\n        this.loadMapping();\r\n    }\r\n    /**\r\n     * Removes a touch rect\r\n     * @param name\r\n     */\r\n    removeTouchRect(name) {\r\n        this._touchRect.delete(name);\r\n    }\r\n    /**\r\n     * Add a touch rect\r\n     * @param name\r\n     * @param touchRect\r\n     */\r\n    setTouchRect(name, touchRect) {\r\n        touchRect.name = name;\r\n        this._touchRect.set(name, touchRect);\r\n    }\r\n    /**\r\n     * When something is touched set the buttonsDown for\r\n     * the touch rect\r\n     * @param x\r\n     * @param y\r\n     */\r\n    pointerDown(id, x, y) {\r\n        const touchRect = this.getTouchRect(x, y);\r\n        // set when down\r\n        if (touchRect) {\r\n            this.buttonsDown = this.buttonsDown | touchRect.action;\r\n        }\r\n        console.debug('pointer Down: ' + id + ': ', x, y);\r\n    }\r\n    pointerUp(id, x, y) {\r\n        const touchRect = this.getTouchRect(x, y);\r\n        // set when released\r\n        if (touchRect) {\r\n            this.buttonsDown = this.buttonsDown & ~touchRect.action;\r\n            this.buttonsReleased = this.buttonsReleased | touchRect.action;\r\n        }\r\n        console.debug('pointer up: ' + id + ': ', x, y);\r\n    }\r\n    /**\r\n     * Get the touch rect that this point hits\r\n     * @param x\r\n     * @param y\r\n     * @returns\r\n     */\r\n    getTouchRect(x, y) {\r\n        let touchRect;\r\n        // return a touch rect\r\n        this._touchRect.forEach((v) => {\r\n            if (v.bounds.pointInside(x, y)) {\r\n                touchRect = v;\r\n            }\r\n        });\r\n        return touchRect;\r\n    }\r\n    /**\r\n     * Get a copy of the input state from this input handler\r\n     * @returns\r\n     */\r\n    getInputState() {\r\n        const state = new InputState_1.InputState();\r\n        state.buttonsDown = this.buttonsDown;\r\n        state.buttonsReleased = this.buttonsReleased;\r\n        return state;\r\n    }\r\n    isTouchEnabled() {\r\n        return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n    }\r\n    keydown(e) {\r\n        if (e.key == 'ArrowRight') {\r\n            this.buttonsDown = this.buttonsDown | UserAction_1.UserAction.Right;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'ArrowLeft') {\r\n            this.buttonsDown = this.buttonsDown | UserAction_1.UserAction.Left;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'ArrowUp') {\r\n            this.buttonsDown = this.buttonsDown | UserAction_1.UserAction.Up;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'ArrowDown') {\r\n            this.buttonsDown = this.buttonsDown | UserAction_1.UserAction.Down;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == ' ') {\r\n            this.buttonsDown = this.buttonsDown | UserAction_1.UserAction.A;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'b') {\r\n            this.buttonsDown = this.buttonsDown | UserAction_1.UserAction.B;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'Enter') {\r\n            this.buttonsDown = this.buttonsDown | UserAction_1.UserAction.Start;\r\n            e.preventDefault();\r\n        }\r\n    }\r\n    keyup(e) {\r\n        if (e.key == 'ArrowRight') {\r\n            this.buttonsDown = this.buttonsDown & ~UserAction_1.UserAction.Right;\r\n            this.buttonsReleased = this.buttonsReleased | UserAction_1.UserAction.Right;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'ArrowLeft') {\r\n            this.buttonsDown = this.buttonsDown & ~UserAction_1.UserAction.Left;\r\n            this.buttonsReleased = this.buttonsReleased | UserAction_1.UserAction.Left;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'ArrowUp') {\r\n            this.buttonsDown = this.buttonsDown & ~UserAction_1.UserAction.Up;\r\n            this.buttonsReleased = this.buttonsReleased | UserAction_1.UserAction.Up;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'ArrowDown') {\r\n            this.buttonsDown = this.buttonsDown & ~UserAction_1.UserAction.Down;\r\n            this.buttonsReleased = this.buttonsReleased | UserAction_1.UserAction.Down;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == ' ') {\r\n            this.buttonsDown = this.buttonsDown & ~UserAction_1.UserAction.A;\r\n            this.buttonsReleased = this.buttonsReleased | UserAction_1.UserAction.A;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'b') {\r\n            this.buttonsDown = this.buttonsDown & ~UserAction_1.UserAction.B;\r\n            this.buttonsReleased = this.buttonsReleased | UserAction_1.UserAction.B;\r\n            e.preventDefault();\r\n        }\r\n        if (e.key == 'Enter') {\r\n            this.buttonsDown = this.buttonsDown & ~UserAction_1.UserAction.Start;\r\n            this.buttonsReleased = this.buttonsReleased | UserAction_1.UserAction.Start;\r\n            e.preventDefault();\r\n        }\r\n    }\r\n    preUpdate(dt) {\r\n        this.pollGamePad(dt);\r\n        // Always call `navigator.getGamepads()` inside of\r\n        // the game loop, not outside.\r\n        const gamepads = navigator.getGamepads();\r\n        for (const gamepad of gamepads) {\r\n            // Disregard empty slots.\r\n            if (!gamepad) {\r\n                continue;\r\n            }\r\n            this._gamepad = gamepad;\r\n        }\r\n    }\r\n    postUpdate(dt) {\r\n        // reset press actions\r\n        this.buttonsReleased = UserAction_1.UserAction.None;\r\n    }\r\n    connectGamepad(e) {\r\n        console.log('✅ 🎮 A gamepad connected:', e.gamepad);\r\n        this._gamepad = e.gamepad;\r\n    }\r\n    disconnectGamepad(e) {\r\n        console.debug('Gamepad disconnected', e.gamepad);\r\n        this._gamepad = null;\r\n    }\r\n    loadMapping() {\r\n        const inputMappingString = window.localStorage.getItem('inputMapping');\r\n        if (inputMappingString) {\r\n            this.inputMappings = JSON.parse(inputMappingString);\r\n            console.debug('loading input map...');\r\n            /*\r\n            console.debug('  up       = ' + this.inputMappings.keyboardMapping[this.mappingIndex.Up]);\r\n            console.debug('  down     = ' + this.inputMappings.keyboardMapping[this.mappingIndex.Down]);\r\n            console.debug('  right    = ' + this.inputMappings.keyboardMapping[this.mappingIndex.Right]);\r\n            console.debug('  left     = ' + this.inputMappings.keyboardMapping[this.mappingIndex.Left]);\r\n            console.debug('  start    = ' + this.inputMappings.keyboardMapping[this.mappingIndex.Start]);\r\n            console.debug('  A        = ' + this.inputMappings.keyboardMapping[this.mappingIndex.A]);\r\n            console.debug('  B        = ' + this.inputMappings.keyboardMapping[this.mappingIndex.B]);\r\n            */\r\n        }\r\n        else {\r\n            this.inputMappings = {\r\n                gamePadMapping: new Map(),\r\n            };\r\n        }\r\n    }\r\n    pollGamePad(dt) {\r\n        this.gamepadPolling += dt;\r\n        if (this.gamepadPolling > 1500) {\r\n            this._hasGamePad = navigator.getGamepads()[0] != null;\r\n            if (this._hasGamePad && !this._gamepad) {\r\n                this.connectGamepad(new GamepadEvent('gamepadConnect', {\r\n                    gamepad: navigator.getGamepads()[0],\r\n                }));\r\n            }\r\n            else if (!this._hasGamePad && this._gamepad) {\r\n                this.disconnectGamepad(new GamepadEvent('gamepadDisconnect', { gamepad: this._gamepad }));\r\n            }\r\n            this.gamepadPolling = 0;\r\n        }\r\n    }\r\n    resetInput() {\r\n        this.buttonsDown = UserAction_1.UserAction.None;\r\n        this.buttonsReleased = UserAction_1.UserAction.None;\r\n        this._hasGamePad = 'getGamepads' in navigator;\r\n        if (this._hasGamePad) {\r\n            console.debug(' gamepad supported ', navigator.getGamepads());\r\n            window.removeEventListener('gamepadconnected', this.boundConnectGamepad);\r\n            window.removeEventListener('gamepaddisconnected', this.boundDisconnectGamepad);\r\n            window.addEventListener('gamepadconnected', this.boundConnectGamepad);\r\n            window.addEventListener('gamepaddisconnected', this.boundDisconnectGamepad);\r\n        }\r\n        else {\r\n            console.warn('gamepad not supported!');\r\n        }\r\n    }\r\n    closeLevel() {\r\n        this.resetInput();\r\n    }\r\n}\r\nexports.InputHandler = InputHandler;\r\n\n\n//# sourceURL=webpack://earthquest/./src/core/InputHandler.ts?");

/***/ }),

/***/ "./src/core/InputState.ts":
/*!********************************!*\
  !*** ./src/core/InputState.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InputState = void 0;\r\n/**\r\n * Used to pass input state to other classes.\r\n */\r\nclass InputState {\r\n    isReleased(btn) {\r\n        return (this.buttonsReleased & btn) > 0;\r\n    }\r\n    isDown(btn) {\r\n        return (this.buttonsDown & btn) > 0;\r\n    }\r\n}\r\nexports.InputState = InputState;\r\n\n\n//# sourceURL=webpack://earthquest/./src/core/InputState.ts?");

/***/ }),

/***/ "./src/core/UserAction.ts":
/*!********************************!*\
  !*** ./src/core/UserAction.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserAction = void 0;\r\n/**\r\n * User input action.\r\n */\r\nvar UserAction;\r\n(function (UserAction) {\r\n    UserAction[UserAction[\"None\"] = 0] = \"None\";\r\n    UserAction[UserAction[\"Right\"] = 1] = \"Right\";\r\n    UserAction[UserAction[\"Left\"] = 2] = \"Left\";\r\n    UserAction[UserAction[\"Up\"] = 4] = \"Up\";\r\n    UserAction[UserAction[\"Down\"] = 8] = \"Down\";\r\n    UserAction[UserAction[\"UpRight\"] = 5] = \"UpRight\";\r\n    UserAction[UserAction[\"UpLeft\"] = 6] = \"UpLeft\";\r\n    UserAction[UserAction[\"DownRight\"] = 9] = \"DownRight\";\r\n    UserAction[UserAction[\"DownLeft\"] = 10] = \"DownLeft\";\r\n    UserAction[UserAction[\"Start\"] = 16] = \"Start\";\r\n    UserAction[UserAction[\"A\"] = 64] = \"A\";\r\n    UserAction[UserAction[\"B\"] = 128] = \"B\";\r\n})(UserAction = exports.UserAction || (exports.UserAction = {}));\r\n\n\n//# sourceURL=webpack://earthquest/./src/core/UserAction.ts?");

/***/ }),

/***/ "./src/data/GameData.ts":
/*!******************************!*\
  !*** ./src/data/GameData.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameData = void 0;\r\nconst PlayerData_1 = __webpack_require__(/*! ./PlayerData */ \"./src/data/PlayerData.ts\");\r\nclass GameData {\r\n    constructor() {\r\n        this.player = new PlayerData_1.PlayerData();\r\n    }\r\n}\r\nexports.GameData = GameData;\r\n\n\n//# sourceURL=webpack://earthquest/./src/data/GameData.ts?");

/***/ }),

/***/ "./src/data/PlayerData.ts":
/*!********************************!*\
  !*** ./src/data/PlayerData.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PlayerData = void 0;\r\n/**\r\n * Data for the player\r\n */\r\nclass PlayerData {\r\n    constructor() {\r\n        this.gold = 0;\r\n        this.timePlayed = { h: 0, m: 0, s: 0 };\r\n    }\r\n}\r\nexports.PlayerData = PlayerData;\r\n\n\n//# sourceURL=webpack://earthquest/./src/data/PlayerData.ts?");

/***/ }),

/***/ "./src/geometry/GlBuffer.ts":
/*!**********************************!*\
  !*** ./src/geometry/GlBuffer.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GlBuffer = void 0;\r\n/**\r\n * Creates a buffer of a quad.\r\n */\r\nclass GlBuffer {\r\n    /** were the buffers created */\r\n    get buffersCreated() {\r\n        return this.vertArrayBuffer != 0;\r\n    }\r\n    /**\r\n     * Constructor\r\n     * @param {WebGL2RenderingContext} gl\r\n     */\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.vertBuffer = 0;\r\n        this.indexBuffer = 0;\r\n        this.indexCount = 0;\r\n        this.vertArrayBuffer = 0;\r\n        this.verts = new Float32Array();\r\n        this.index = new Uint16Array();\r\n    }\r\n    /**\r\n     * Creates the buffers\r\n     */\r\n    createBuffer() {\r\n        this.dispose();\r\n        // create vert array buffer\r\n        this.vertArrayBuffer = this.gl.createVertexArray();\r\n        // position buffer\r\n        this.vertBuffer = this.gl.createBuffer();\r\n        // index buffer\r\n        this.indexBuffer = this.gl.createBuffer();\r\n    }\r\n    /**\r\n     * Create the buffer\r\n     * @param quads A array of quads that will be added to this buffer\r\n     * @param isStatic Is this buffer static\r\n     * @returns\r\n     */\r\n    setBuffers(quads, isStatic = true, bufferIndex = 0, quadLength) {\r\n        const length = quadLength ?? quads.length;\r\n        // check if we have buffer\r\n        if (!this.vertBuffer || !this.indexBuffer) {\r\n            this.createBuffer();\r\n        }\r\n        if (this.verts.length < length * (4 * 5)) {\r\n            this.verts = new Float32Array(length * (4 * 5));\r\n        }\r\n        if (this.index.length < length * 6) {\r\n            this.index = new Uint16Array(length * 6);\r\n        }\r\n        // reset counters\r\n        this.indexCount = length * 6;\r\n        //               Building a quad\r\n        //\r\n        //    Pos[-1, 1]                Texture [0,1]\r\n        //   p0---------p1 (max)      p0 ---------p1 (max)\r\n        //   |        / |              |        / |\r\n        //   |      /   |              |      /   |\r\n        //   |    /     |              |    /     |\r\n        //   |  /       |              |  /       |\r\n        //   p3---------p2             p3---------p2\r\n        //  (min)                      (min)\r\n        //\r\n        let vertCount = 0;\r\n        let vertIndex = 0;\r\n        let indexIndex = 0;\r\n        for (let i = 0; i < length; i++) {\r\n            const quad = quads[i];\r\n            this.verts[vertIndex++] = quad.min.x;\r\n            this.verts[vertIndex++] = quad.min.y;\r\n            this.verts[vertIndex++] = quad.min.z;\r\n            this.verts[vertIndex++] = quad.minTex.x;\r\n            this.verts[vertIndex++] = quad.maxTex.y;\r\n            this.verts[vertIndex++] = quad.max.x;\r\n            this.verts[vertIndex++] = quad.min.y;\r\n            this.verts[vertIndex++] = quad.min.z;\r\n            this.verts[vertIndex++] = quad.maxTex.x;\r\n            this.verts[vertIndex++] = quad.maxTex.y;\r\n            this.verts[vertIndex++] = quad.max.x;\r\n            this.verts[vertIndex++] = quad.max.y;\r\n            this.verts[vertIndex++] = quad.max.z;\r\n            this.verts[vertIndex++] = quad.maxTex.x;\r\n            this.verts[vertIndex++] = quad.minTex.y;\r\n            this.verts[vertIndex++] = quad.min.x;\r\n            this.verts[vertIndex++] = quad.max.y;\r\n            this.verts[vertIndex++] = quad.max.z;\r\n            this.verts[vertIndex++] = quad.minTex.x;\r\n            this.verts[vertIndex++] = quad.minTex.y;\r\n            this.index[indexIndex++] = vertCount + 0;\r\n            this.index[indexIndex++] = vertCount + 1;\r\n            this.index[indexIndex++] = vertCount + 3;\r\n            this.index[indexIndex++] = vertCount + 1;\r\n            this.index[indexIndex++] = vertCount + 2;\r\n            this.index[indexIndex++] = vertCount + 3;\r\n            vertCount += 4;\r\n        }\r\n        ;\r\n        // bind the array buffer\r\n        this.gl.bindVertexArray(this.vertArrayBuffer);\r\n        // Create a buffer for positions.\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.verts, isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, bufferIndex, vertIndex);\r\n        // in order for this to work the vertex shader will\r\n        // need to have position\r\n        //  vec3 aPos;\r\n        //  vec2 aTex;\r\n        //\r\n        const positionAttribute = 0;\r\n        const textureAttribute = 1;\r\n        // Tell WebGL how to pull out the positions from the position\r\n        // buffer into the vertexPosition attribute\r\n        {\r\n            const numComponents = 3; // position x, y, z\r\n            const type = this.gl.FLOAT;\r\n            const normalize = false;\r\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\r\n            const offset = 0;\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n            this.gl.vertexAttribPointer(positionAttribute, numComponents, type, normalize, stride, offset);\r\n            this.gl.enableVertexAttribArray(positionAttribute);\r\n        }\r\n        // Tell WebGL how to pull out the texture coordinates from\r\n        // the texture coordinate buffer into the textureCoord attribute.\r\n        {\r\n            const numComponents = 2;\r\n            const type = this.gl.FLOAT;\r\n            const normalize = false;\r\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\r\n            const offset = 3 * 4; // start after the position\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n            this.gl.vertexAttribPointer(textureAttribute, numComponents, type, normalize, stride, offset);\r\n            this.gl.enableVertexAttribArray(textureAttribute);\r\n        }\r\n        // index buffer\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.index, isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, bufferIndex, this.indexCount);\r\n    }\r\n    /**\r\n     * Enable vertex attributes and element buffer\r\n     */\r\n    enable() {\r\n        if (!this.buffersCreated) {\r\n            console.error('buffers were not created!');\r\n        }\r\n        else {\r\n            // the vertex and index buffer are grouped with this so we only need\r\n            // to enable this array buffer\r\n            this.gl.bindVertexArray(this.vertArrayBuffer);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up buffer\r\n     */\r\n    dispose() {\r\n        if (this.vertBuffer) {\r\n            this.gl.deleteBuffer(this.vertBuffer);\r\n            this.vertBuffer = 0;\r\n        }\r\n        if (this.indexBuffer) {\r\n            this.gl.deleteBuffer(this.indexBuffer);\r\n            this.indexBuffer = 0;\r\n        }\r\n        if (this.vertArrayBuffer) {\r\n            this.gl.deleteVertexArray(this.vertArrayBuffer);\r\n        }\r\n        this.verts = new Float32Array();\r\n        this.index = new Uint16Array();\r\n    }\r\n}\r\nexports.GlBuffer = GlBuffer;\r\n\n\n//# sourceURL=webpack://earthquest/./src/geometry/GlBuffer.ts?");

/***/ }),

/***/ "./src/geometry/GlBuffer2.ts":
/*!***********************************!*\
  !*** ./src/geometry/GlBuffer2.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GlBuffer2 = void 0;\r\n/**\r\n * Creates a buffer of a quad.\r\n */\r\nclass GlBuffer2 {\r\n    /** were the buffers created */\r\n    get buffersCreated() {\r\n        return this.vertArrayBuffer != 0;\r\n    }\r\n    /**\r\n     * Constructor\r\n     * @param {WebGL2RenderingContext} gl\r\n     */\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.vertBuffer = 0;\r\n        this.indexBuffer = 0;\r\n        this.indexCount = 0;\r\n        this.vertArrayBuffer = 0;\r\n        this.verts = new Float32Array();\r\n        this.index = new Uint16Array();\r\n    }\r\n    /**\r\n     * Creates the buffers\r\n     */\r\n    createBuffer() {\r\n        this.dispose();\r\n        // create vert array buffer\r\n        this.vertArrayBuffer = this.gl.createVertexArray();\r\n        // position buffer\r\n        this.vertBuffer = this.gl.createBuffer();\r\n        // index buffer\r\n        this.indexBuffer = this.gl.createBuffer();\r\n    }\r\n    /**\r\n     * Create the buffer\r\n     * @param quads A array of quads that will be added to this buffer\r\n     * @param isStatic Is this buffer static\r\n     * @returns\r\n     */\r\n    setBuffers(quad, isStatic = true) {\r\n        // check if we have buffer\r\n        if (!this.vertBuffer || !this.indexBuffer) {\r\n            this.createBuffer();\r\n        }\r\n        if (this.verts.length < 4 * 5) {\r\n            this.verts = new Float32Array(4 * 5);\r\n        }\r\n        if (this.index.length < 6) {\r\n            this.index = new Uint16Array(6);\r\n        }\r\n        // reset counters\r\n        this.indexCount = 6;\r\n        //               Building a quad\r\n        //\r\n        //    Pos[-1, 1]                Texture [0,1]\r\n        //   p0---------p1 (max)      p0 ---------p1 (max)\r\n        //   |        / |              |        / |\r\n        //   |      /   |              |      /   |\r\n        //   |    /     |              |    /     |\r\n        //   |  /       |              |  /       |\r\n        //   p3---------p2             p3---------p2\r\n        //  (min)                      (min)\r\n        //\r\n        let vertCount = 0;\r\n        let vertIndex = 0;\r\n        let indexIndex = 0;\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = quad.minTex.x;\r\n        this.verts[vertIndex++] = quad.maxTex.y;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = quad.maxTex.x;\r\n        this.verts[vertIndex++] = quad.maxTex.y;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = quad.maxTex.x;\r\n        this.verts[vertIndex++] = quad.minTex.y;\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = quad.minTex.x;\r\n        this.verts[vertIndex++] = quad.minTex.y;\r\n        this.index[indexIndex++] = vertCount + 0;\r\n        this.index[indexIndex++] = vertCount + 1;\r\n        this.index[indexIndex++] = vertCount + 3;\r\n        this.index[indexIndex++] = vertCount + 1;\r\n        this.index[indexIndex++] = vertCount + 2;\r\n        this.index[indexIndex++] = vertCount + 3;\r\n        vertCount += 4;\r\n        // bind the array buffer\r\n        this.gl.bindVertexArray(this.vertArrayBuffer);\r\n        // Create a buffer for positions.\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.verts, isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, 0, vertIndex);\r\n        // in order for this to work the vertex shader will\r\n        // need to have position\r\n        //  vec3 aPos;\r\n        //  vec2 aTex;\r\n        //\r\n        const positionAttribute = 0;\r\n        const textureAttribute = 1;\r\n        // Tell WebGL how to pull out the positions from the position\r\n        // buffer into the vertexPosition attribute\r\n        {\r\n            const numComponents = 3; // position x, y, z\r\n            const type = this.gl.FLOAT;\r\n            const normalize = false;\r\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\r\n            const offset = 0;\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n            this.gl.vertexAttribPointer(positionAttribute, numComponents, type, normalize, stride, offset);\r\n            this.gl.enableVertexAttribArray(positionAttribute);\r\n        }\r\n        // Tell WebGL how to pull out the texture coordinates from\r\n        // the texture coordinate buffer into the textureCoord attribute.\r\n        {\r\n            const numComponents = 2;\r\n            const type = this.gl.FLOAT;\r\n            const normalize = false;\r\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\r\n            const offset = 3 * 4; // start after the position\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n            this.gl.vertexAttribPointer(textureAttribute, numComponents, type, normalize, stride, offset);\r\n            this.gl.enableVertexAttribArray(textureAttribute);\r\n        }\r\n        // index buffer\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.index, isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, 0, this.indexCount);\r\n    }\r\n    /**\r\n     * Enable vertex attributes and element buffer\r\n     */\r\n    enable() {\r\n        if (!this.buffersCreated) {\r\n            console.error('buffers were not created!');\r\n        }\r\n        else {\r\n            // the vertex and index buffer are grouped with this so we only need\r\n            // to enable this array buffer\r\n            this.gl.bindVertexArray(this.vertArrayBuffer);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up buffer\r\n     */\r\n    dispose() {\r\n        if (this.vertBuffer) {\r\n            this.gl.deleteBuffer(this.vertBuffer);\r\n            this.vertBuffer = 0;\r\n        }\r\n        if (this.indexBuffer) {\r\n            this.gl.deleteBuffer(this.indexBuffer);\r\n            this.indexBuffer = 0;\r\n        }\r\n        if (this.vertArrayBuffer) {\r\n            this.gl.deleteVertexArray(this.vertArrayBuffer);\r\n        }\r\n        this.verts = new Float32Array();\r\n        this.index = new Uint16Array();\r\n    }\r\n}\r\nexports.GlBuffer2 = GlBuffer2;\r\n\n\n//# sourceURL=webpack://earthquest/./src/geometry/GlBuffer2.ts?");

/***/ }),

/***/ "./src/geometry/GlBufferQuadInstance.ts":
/*!**********************************************!*\
  !*** ./src/geometry/GlBufferQuadInstance.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GlBufferQuadInstance = void 0;\r\nconst mat2_1 = __importDefault(__webpack_require__(/*! ../math/mat2 */ \"./src/math/mat2.ts\"));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\n/**\r\n * Creates a buffer of a quad.\r\n */\r\nclass GlBufferQuadInstance {\r\n    /** were the buffers created */\r\n    get buffersCreated() {\r\n        return this.vertArrayBufferGeometry != 0;\r\n    }\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.vertBuffer = 0;\r\n        this.indexBuffer = 0;\r\n        this.indexCount = 0;\r\n        this.instanceCount = 0;\r\n        this.vertArrayBufferGeometry = 0;\r\n        this.instanceBuffer = 0;\r\n        this.verts = new Float32Array();\r\n        this.index = new Uint16Array();\r\n        this.instances = new Float32Array();\r\n    }\r\n    /**\r\n     * Creates the buffers\r\n     */\r\n    createBuffer() {\r\n        this.dispose();\r\n        // create vert array buffer\r\n        this.vertArrayBufferGeometry = this.gl.createVertexArray();\r\n        // position buffer\r\n        this.vertBuffer = this.gl.createBuffer();\r\n        // index buffer\r\n        this.indexBuffer = this.gl.createBuffer();\r\n        // instance buffer\r\n        this.instanceBuffer = this.gl.createBuffer();\r\n    }\r\n    /**\r\n     * Create the buffer\r\n     * @param quads A array of quads that will be added to this buffer\r\n     * @param isStatic Is this buffer static\r\n     * @returns\r\n     */\r\n    setBuffers(quads) {\r\n        const length = (this.instanceCount = quads.length);\r\n        // check if we have buffer\r\n        if (!this.vertBuffer || !this.indexBuffer) {\r\n            this.createBuffer();\r\n        }\r\n        // make sure the buffers have enough space for data needed to create each quad\r\n        // pos (x,y,z), tex (u,v) size of each float is 4\r\n        if (this.verts.length < length * (3 + 2) * 4) {\r\n            this.verts = new Float32Array(length * (3 + 2) * 4);\r\n        }\r\n        if (this.index.length < length * 6) {\r\n            this.index = new Uint16Array(length * 6);\r\n        }\r\n        // this will hold transform (mat2), offset (vec2) translation (vec3), color(vec4), and uvTransform(vec4)\r\n        // size of each float is 4\r\n        if (this.instances.length < length * (4 + 2 + 3 + 4 + 3) * 4) {\r\n            this.instances = new Float32Array(length * (4 + 2 + 3 + 4 + 3) * 4);\r\n        }\r\n        // reset counters\r\n        this.indexCount = length * 6;\r\n        //               Building a quad\r\n        //\r\n        //    Pos[-1, 1]               Texture [0,0]\r\n        //   p3---------p2 (max)      p0 ---------p2\r\n        //   |        / |              |        / |\r\n        //   |      /   |              |      /   |\r\n        //   |    /     |              |    /     |\r\n        //   |  /       |              |  /       |\r\n        //   p0---------p1             p0---------p1(max)\r\n        //  (min)\r\n        //\r\n        let vertCount = 0;\r\n        let vertIndex = 0;\r\n        let indexIndex = 0;\r\n        let instanceIndex = 0;\r\n        // pos x,y,z, u,v\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = -1;\r\n        this.verts[vertIndex++] = 1;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = 0;\r\n        this.verts[vertIndex++] = 0;\r\n        this.index[indexIndex++] = vertCount + 0;\r\n        this.index[indexIndex++] = vertCount + 1;\r\n        this.index[indexIndex++] = vertCount + 3;\r\n        this.index[indexIndex++] = vertCount + 1;\r\n        this.index[indexIndex++] = vertCount + 2;\r\n        this.index[indexIndex++] = vertCount + 3;\r\n        vertCount += 4;\r\n        for (let i = 0; i < length; i++) {\r\n            const quad = quads[i];\r\n            const rotScale = quad.rotScale ?? new mat2_1.default();\r\n            const translate = quad.translation ?? new vec3_1.default();\r\n            const offset = quad.offset ?? new vec2_1.default();\r\n            const color = quad.color;\r\n            const uvTransform = new vec4_1.default([\r\n                quad.maxTex.x - quad.minTex.x,\r\n                quad.maxTex.y - quad.minTex.y,\r\n                quad.minTex.x,\r\n                quad.minTex.y,\r\n            ]);\r\n            // rotate scale mat 2\r\n            rotScale.foreach((val) => (this.instances[instanceIndex++] = val));\r\n            // offset vec2\r\n            offset.foreach((val) => (this.instances[instanceIndex++] = val));\r\n            // translation vec3\r\n            translate.foreach((val) => (this.instances[instanceIndex++] = val));\r\n            // color scale vec4\r\n            color.foreach((val) => (this.instances[instanceIndex++] = val));\r\n            // uv scale, uv translation vec4\r\n            uvTransform.foreach((val) => (this.instances[instanceIndex++] = val));\r\n        }\r\n        // bind the array buffer\r\n        this.gl.bindVertexArray(this.vertArrayBufferGeometry);\r\n        // Create a buffer for positions.\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.verts, this.gl.STATIC_DRAW, 0);\r\n        // instance buffer\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.instanceBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.instances, this.gl.DYNAMIC_DRAW, 0);\r\n        // index buffer\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.index, this.gl.STATIC_DRAW, 0);\r\n        // in order for this to work the vertex shader will\r\n        // need to have position\r\n        //  vec3 aPos;\r\n        //  vec2 aTex;\r\n        //  mat2 aTransform;\r\n        //  vec2 aOffset;\r\n        //  vec3 aTranslate;\r\n        //  vec4 aColorScale;\r\n        //  vec4 aTextureTransform\r\n        if (!this.pointersSet) {\r\n            this.positionAttribute();\r\n            this.textureAttribute();\r\n            // instancing\r\n            this.transformAttribute();\r\n            this.offsetAttribute();\r\n            this.translateAttribute();\r\n            this.colorScaleAttribute();\r\n            this.uvTransformAttribute();\r\n            this.pointersSet = true;\r\n        }\r\n        this.gl.bindVertexArray(null);\r\n    }\r\n    positionAttribute() {\r\n        const index = 0;\r\n        const numComponents = 3; // position x, y, z\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const stride = (3 + 2) * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\r\n        const offset = 0;\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n        this.gl.vertexAttribPointer(index, numComponents, type, normalize, stride, offset);\r\n        this.gl.enableVertexAttribArray(index);\r\n    }\r\n    textureAttribute() {\r\n        const index = 1;\r\n        const numComponents = 2; // texture u,v\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const stride = (3 + 2) * 4; // pos(x,y,x) * 4 byte float\r\n        const offset = 3 * 4;\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n        this.gl.vertexAttribPointer(index, numComponents, type, normalize, stride, offset);\r\n        this.gl.enableVertexAttribArray(index);\r\n    }\r\n    transformAttribute() {\r\n        const index = 2;\r\n        const numComponents = 4;\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const stride = (4 + 2 + 3 + 4 + 4) * 4; // (transform (mat2) + offset (vec2) + trans(vec3) + color(vec4) + uv(vec4)) * byte of float\r\n        let offset = 0;\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.instanceBuffer);\r\n        this.gl.vertexAttribPointer(index, numComponents, type, normalize, stride, offset);\r\n        this.gl.enableVertexAttribArray(index);\r\n        this.gl.vertexAttribDivisor(index, 1);\r\n    }\r\n    offsetAttribute() {\r\n        const index = 3;\r\n        const numComponents = 2;\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const stride = (4 + 2 + 3 + 4 + 4) * 4; // (transform (mat2) + offset (vec2) + trans(vec3) + color(vec4) + uv(vec4)) * byte of float\r\n        let offset = 4 * 4; // after mat2\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.instanceBuffer);\r\n        this.gl.vertexAttribPointer(index, numComponents, type, normalize, stride, offset);\r\n        this.gl.enableVertexAttribArray(index);\r\n        this.gl.vertexAttribDivisor(index, 1);\r\n    }\r\n    translateAttribute() {\r\n        const index = 4;\r\n        const numComponents = 3;\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const stride = (4 + 2 + 3 + 4 + 4) * 4; // (transform (mat2) + offset (vec2) + trans(vec3) + color(vec4) + uv(vec4)) * byte of float\r\n        let offset = (4 + 2) * 4;\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.instanceBuffer);\r\n        this.gl.vertexAttribPointer(index, numComponents, type, normalize, stride, offset);\r\n        this.gl.enableVertexAttribArray(index);\r\n        this.gl.vertexAttribDivisor(index, 1);\r\n    }\r\n    colorScaleAttribute() {\r\n        const index = 5;\r\n        const numComponents = 4;\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const stride = (4 + 2 + 3 + 4 + 4) * 4; // (transform (mat2) + offset (vec2) + trans(vec3) + color(vec4) + uv(vec4)) * byte of float\r\n        let offset = (4 + 2 + 3) * 4;\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.instanceBuffer);\r\n        this.gl.vertexAttribPointer(index, numComponents, type, normalize, stride, offset);\r\n        this.gl.enableVertexAttribArray(index);\r\n        this.gl.vertexAttribDivisor(index, 1);\r\n    }\r\n    uvTransformAttribute() {\r\n        const index = 6;\r\n        const numComponents = 4;\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const stride = (4 + 2 + 3 + 4 + 4) * 4; // (transform (mat2) + offset (vec2) + trans(vec3) + color(vec4) + uv(vec4)) * byte of float\r\n        let offset = (4 + 2 + 3 + 4) * 4;\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.instanceBuffer);\r\n        this.gl.vertexAttribPointer(index, numComponents, type, normalize, stride, offset);\r\n        this.gl.enableVertexAttribArray(index);\r\n        this.gl.vertexAttribDivisor(index, 1);\r\n    }\r\n    /**\r\n     * Enable vertex attributes and element buffer\r\n     */\r\n    enable() {\r\n        if (!this.buffersCreated) {\r\n            console.debug('buffers were not created!');\r\n            return false;\r\n        }\r\n        else {\r\n            // the vertex and index buffer are grouped with this so we only need\r\n            // to enable this array buffer\r\n            this.gl.bindVertexArray(this.vertArrayBufferGeometry);\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * Clean up buffer\r\n     */\r\n    dispose() {\r\n        if (this.vertBuffer) {\r\n            this.gl.deleteBuffer(this.vertBuffer);\r\n            this.vertBuffer = 0;\r\n        }\r\n        if (this.instanceBuffer) {\r\n            this.gl.deleteBuffer(this.instanceBuffer);\r\n            this.instanceBuffer = 0;\r\n        }\r\n        if (this.indexBuffer) {\r\n            this.gl.deleteBuffer(this.indexBuffer);\r\n            this.indexBuffer = 0;\r\n        }\r\n        if (this.vertArrayBufferGeometry) {\r\n            this.gl.deleteVertexArray(this.vertArrayBufferGeometry);\r\n        }\r\n        this.verts = new Float32Array();\r\n        this.index = new Uint16Array();\r\n    }\r\n}\r\nexports.GlBufferQuadInstance = GlBufferQuadInstance;\r\n\n\n//# sourceURL=webpack://earthquest/./src/geometry/GlBufferQuadInstance.ts?");

/***/ }),

/***/ "./src/graphics/ISprite.ts":
/*!*********************************!*\
  !*** ./src/graphics/ISprite.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpriteFlip = void 0;\r\nvar SpriteFlip;\r\n(function (SpriteFlip) {\r\n    SpriteFlip[SpriteFlip[\"None\"] = 0] = \"None\";\r\n    SpriteFlip[SpriteFlip[\"XFlip\"] = 1] = \"XFlip\";\r\n    SpriteFlip[SpriteFlip[\"YFlip\"] = 2] = \"YFlip\";\r\n    SpriteFlip[SpriteFlip[\"Both\"] = 3] = \"Both\";\r\n})(SpriteFlip = exports.SpriteFlip || (exports.SpriteFlip = {}));\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/ISprite.ts?");

/***/ }),

/***/ "./src/graphics/ISpriteData.ts":
/*!*************************************!*\
  !*** ./src/graphics/ISpriteData.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DefaultSpriteData = exports.SpriteData = void 0;\r\n/**\r\n * The interface for a sprite\r\n */\r\nclass SpriteData {\r\n    constructor(data) {\r\n        this.tiles = new Map();\r\n        data.tiles.forEach((t) => this.tiles.set(t.id, t));\r\n    }\r\n}\r\nexports.SpriteData = SpriteData;\r\nexports.DefaultSpriteData = new SpriteData({\r\n    tiles: [{ id: 'default', loc: [0, 0, 0, 0] }],\r\n});\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/ISpriteData.ts?");

/***/ }),

/***/ "./src/graphics/ShaderController.ts":
/*!******************************************!*\
  !*** ./src/graphics/ShaderController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ShaderController = void 0;\r\n/**\r\n * Manages one shader program\r\n */\r\nclass ShaderController {\r\n    /**\r\n     * Creates the shader controller\r\n     * @param {WebGL2RenderingContext} gl GL Context\r\n     * @param {string} shaderName The name of the shader. This is just a way to id different shader for debugging\r\n     */\r\n    constructor(gl, shaderName) {\r\n        this.gl = gl;\r\n        this.shaderName = shaderName;\r\n    }\r\n    /**\r\n     * Initialize a shader program, so WebGL knows how to draw our data\r\n     * @param {*} vsSource\r\n     * @param {*} fsSource\r\n     * @returns\r\n     */\r\n    initShaderProgram(vsSource, fsSource) {\r\n        const vertexShader = this._loadShader(this.gl.VERTEX_SHADER, vsSource);\r\n        const fragmentShader = this._loadShader(this.gl.FRAGMENT_SHADER, fsSource);\r\n        // Create the shader program\r\n        this.shaderProgram = this.gl.createProgram();\r\n        this.gl.attachShader(this.shaderProgram, vertexShader);\r\n        this.gl.attachShader(this.shaderProgram, fragmentShader);\r\n        // set the attribute locations\r\n        // not these must exist in the shader so that\r\n        // the buffer maps to the correct locations.\r\n        this.gl.bindAttribLocation(this.shaderProgram, 0, 'aPos');\r\n        this.gl.bindAttribLocation(this.shaderProgram, 1, 'aTex');\r\n        // link the program\r\n        this.gl.linkProgram(this.shaderProgram);\r\n        // needed for get program parameter\r\n        this.gl.useProgram(this.shaderProgram);\r\n        // If creating the shader program failed, alert\r\n        if (!this.gl.getProgramParameter(this.shaderProgram, this.gl.LINK_STATUS)) {\r\n            console.error(`Unable to initialize the shader program: ${this.gl.getProgramInfoLog(this.shaderProgram)}`);\r\n        }\r\n    }\r\n    /**\r\n     * Get a shader attribute location\r\n     * @param {string} name Name of the attribute\r\n     * @return {number} The attribute location\r\n     */\r\n    getAttribute(name) {\r\n        this.gl.useProgram(this.shaderProgram);\r\n        const loc = this.gl.getAttribLocation(this.shaderProgram, name);\r\n        if (loc === null) {\r\n            console.error('can not find attribute: ' + name + ' in shader ' + this.shaderName);\r\n        }\r\n        return loc;\r\n    }\r\n    /**\r\n     * Get a shader attribute location\r\n     * @param {string} name Name of the attribute\r\n     * @return {number} The attribute location\r\n     */\r\n    getUniform(name) {\r\n        this.gl.useProgram(this.shaderProgram);\r\n        const loc = this.gl.getUniformLocation(this.shaderProgram, name);\r\n        if (loc === null) {\r\n            console.error('can not find uniform: ' + name + ' in shader ' + this.shaderName);\r\n        }\r\n        return loc;\r\n    }\r\n    /**\r\n     * Sets a uniform for a vec4\r\n     * @param loc\r\n     * @param value\r\n     */\r\n    setVec4(loc, value) {\r\n        this.gl.uniform4f(loc, value.x, value.y, value.z, value.w);\r\n    }\r\n    /**\r\n     * Set the mat 4\r\n     * @param loc\r\n     * @param value\r\n     */\r\n    setMat4(loc, value) {\r\n        this.gl.uniformMatrix4fv(loc, false, value.getValues());\r\n    }\r\n    /**\r\n     * Sets a uniform for a vec3\r\n     * @param loc\r\n     * @param value\r\n     */\r\n    setVec3(loc, value) {\r\n        this.gl.uniform3f(loc, value.x, value.y, value.z);\r\n    }\r\n    setVec2(loc, value) {\r\n        this.gl.uniform2f(loc, value.x, value.y);\r\n    }\r\n    /**\r\n     * Enable the shader\r\n     */\r\n    enable() {\r\n        // Tell WebGL to use our program when drawing\r\n        this.gl.useProgram(this.shaderProgram);\r\n    }\r\n    /**\r\n     * creates a shader of the given type, uploads the source and\r\n     * compiles it.\r\n     * @param {*} gl\r\n     * @param {*} type\r\n     * @param {*} source\r\n     * @returns\r\n     */\r\n    _loadShader(type, source) {\r\n        const shader = this.gl.createShader(type);\r\n        // Send the source to the shader object\r\n        this.gl.shaderSource(shader, source);\r\n        // Compile the shader program\r\n        this.gl.compileShader(shader);\r\n        // See if it compiled successfully\r\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            const typeString = type == this.gl.VERTEX_SHADER ? 'vertex' : 'fragment';\r\n            console.error(`An error occurred compiling the ${typeString} shaders in ${this.shaderName}: ${this.gl.getShaderInfoLog(shader)}`);\r\n            this.gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        return shader;\r\n    }\r\n}\r\nexports.ShaderController = ShaderController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/ShaderController.ts?");

/***/ }),

/***/ "./src/graphics/Sprite.ts":
/*!********************************!*\
  !*** ./src/graphics/Sprite.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Sprite = void 0;\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst MathConst = __importStar(__webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../math/mat4 */ \"./src/math/mat4.ts\"));\r\nconst ISprite_1 = __webpack_require__(/*! ./ISprite */ \"./src/graphics/ISprite.ts\");\r\n/**\r\n * This is a utility class that is used to create a IQuadModel that\r\n * is used to create a GLBuffer.\r\n */\r\nclass Sprite {\r\n    get tag() {\r\n        return this._tag;\r\n    }\r\n    /**\r\n     * Get the position in pixels.\r\n     */\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    get depth() {\r\n        return this._depth;\r\n    }\r\n    get rotation() {\r\n        return this._spriteRotate;\r\n    }\r\n    getSpriteWidth() {\r\n        return this._spriteLoc.width * this._scale.x;\r\n    }\r\n    getSpriteHeight() {\r\n        return this._spriteLoc.height * this._scale.y;\r\n    }\r\n    get quad() {\r\n        return this._quad;\r\n    }\r\n    constructor(tag) {\r\n        this._tag = tag;\r\n        this.initialize({ width: 0, height: 0 }, 800, 600);\r\n    }\r\n    /**\r\n     * Setup the sprite with a sprite sheet and screen size. All calculations are done in\r\n     * pixels.\r\n     * @param spriteSheet\r\n     * @param screenWidth\r\n     * @param screenHeight\r\n     */\r\n    initialize(spriteSheetSize, screenWidth, screenHeight) {\r\n        this._quad = {\r\n            min: new vec3_1.default([-1, -1, -1]),\r\n            max: new vec3_1.default([1, 1, 1]),\r\n            minTex: new vec2_1.default([0, 0]),\r\n            maxTex: new vec2_1.default([1, 1]),\r\n            transform: new mat4_1.default(),\r\n        };\r\n        this._position = new vec2_1.default();\r\n        this._spriteLoc = { x: 0, y: 0, width: 0, height: 0 };\r\n        this._spriteSheetSize = {\r\n            width: spriteSheetSize.width,\r\n            height: spriteSheetSize.height,\r\n        };\r\n        this._spriteFlip = ISprite_1.SpriteFlip.None;\r\n        this._spriteRotate = 0;\r\n        this._scale = new vec2_1.default([1.0, 1.0]);\r\n        this._depth = 0;\r\n        this._positionOffset = new vec2_1.default();\r\n    }\r\n    /**\r\n     * This function is used to select a sprite from the sprite sheet\r\n     */\r\n    setSprite(opt) {\r\n        this._spriteLoc.x = opt.pixelXOffset;\r\n        this._spriteLoc.y = opt.pixelYOffset;\r\n        this._spriteLoc.width = opt.spriteWidth;\r\n        this._spriteLoc.height = opt.spriteHeight;\r\n        this.calculateQuad();\r\n    }\r\n    getSpriteFlip() {\r\n        return this._spriteFlip;\r\n    }\r\n    setSpriteFlip(spriteFlip) {\r\n        this._spriteFlip = spriteFlip ?? ISprite_1.SpriteFlip.None;\r\n        this.calculateQuad();\r\n    }\r\n    /**\r\n     * Scale can be set uniform as one number or as separate components (x,y).\r\n     * @param scale a number or {x: number, y: number}\r\n     */\r\n    setSpriteScale(scale) {\r\n        if (typeof scale === 'number') {\r\n            this._scale.x = scale;\r\n            this._scale.y = scale;\r\n        }\r\n        else {\r\n            this._scale.x = scale.x;\r\n            this._scale.y = scale.y;\r\n        }\r\n        this.calculateQuad();\r\n    }\r\n    /**\r\n     * Sets an offset for the position based on what the image is.\r\n     * This allows sprites to be position in the cells correctly.\r\n     * @param x in pixels\r\n     * @param y in pixels\r\n     */\r\n    setSpritePositionOffset(x, y) {\r\n        this._positionOffset.x = x;\r\n        this._positionOffset.y = y;\r\n    }\r\n    /**\r\n     * Set the rotate of the sprite\r\n     * @param rotation rotation in degrees\r\n     */\r\n    setSpriteRotate(rotation = 1.0) {\r\n        this._spriteRotate = rotation;\r\n        this.calculateQuad();\r\n    }\r\n    /**\r\n     * Set  x and y in pixels and depth in screen space\r\n     * @param x\r\n     * @param y\r\n     * @param depth screen space [-1, 1]. 1 is far -1 is close\r\n     */\r\n    setPosition(x, y, depth) {\r\n        this._position.x = x;\r\n        this._position.y = y;\r\n        if (depth != undefined) {\r\n            this._depth = depth;\r\n        }\r\n        this.calculateQuad();\r\n    }\r\n    /**\r\n     * Builds a IQuadModel\r\n     */\r\n    calculateQuad() {\r\n        const sheetW = this._spriteSheetSize.width;\r\n        const sheetH = this._spriteSheetSize.height;\r\n        let minX = this._spriteLoc.x / sheetW;\r\n        let minY = 1.0 - this._spriteLoc.y / sheetH;\r\n        let maxX = (this._spriteLoc.x + this._spriteLoc.width) / sheetW;\r\n        let maxY = 1.0 - (this._spriteLoc.y + this._spriteLoc.height) / sheetH;\r\n        if (this._spriteFlip == ISprite_1.SpriteFlip.XFlip) {\r\n            this._quad.minTex.x = maxX;\r\n            this._quad.minTex.y = minY;\r\n            this._quad.maxTex.x = minX;\r\n            this._quad.maxTex.y = maxY;\r\n        }\r\n        else if (this._spriteFlip == ISprite_1.SpriteFlip.YFlip) {\r\n            this._quad.minTex.x = minX;\r\n            this._quad.minTex.y = maxY;\r\n            this._quad.maxTex.x = maxX;\r\n            this._quad.maxTex.y = minY;\r\n        }\r\n        else if (this._spriteFlip == ISprite_1.SpriteFlip.Both) {\r\n            this._quad.minTex.x = maxX;\r\n            this._quad.minTex.y = maxY;\r\n            this._quad.maxTex.x = minX;\r\n            this._quad.maxTex.y = minY;\r\n        }\r\n        else {\r\n            this._quad.minTex.x = minX;\r\n            this._quad.minTex.y = minY;\r\n            this._quad.maxTex.x = maxX;\r\n            this._quad.maxTex.y = maxY;\r\n        }\r\n        // set the offset\r\n        this._quad.min.x = this._positionOffset.x;\r\n        this._quad.min.y = this._positionOffset.y;\r\n        this._quad.min.z = this._depth;\r\n        this._quad.max.x = this._spriteLoc.width + this._positionOffset.x;\r\n        this._quad.max.y = this._spriteLoc.height + this._positionOffset.y;\r\n        this._quad.max.z = this._depth;\r\n        // rotate and scale\r\n        const transform = this._quad.transform.setIdentity();\r\n        transform.setIdentity();\r\n        transform.rotate(MathConst.toRadian(this._spriteRotate), vec3_1.default.forward);\r\n        transform.scale(this._scale);\r\n        transform.translate(this._position);\r\n        // transform min and max\r\n        transform.multiplyVec3(this._quad.max, this._quad.max);\r\n        transform.multiplyVec3(this._quad.min, this._quad.min);\r\n    }\r\n}\r\nexports.Sprite = Sprite;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/Sprite.ts?");

/***/ }),

/***/ "./src/graphics/SpriteBaseController.ts":
/*!**********************************************!*\
  !*** ./src/graphics/SpriteBaseController.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpritBaseController = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst GlBuffer_1 = __webpack_require__(/*! ../geometry/GlBuffer */ \"./src/geometry/GlBuffer.ts\");\r\nconst ISprite_1 = __webpack_require__(/*! ./ISprite */ \"./src/graphics/ISprite.ts\");\r\n/**\r\n * This class controls a sprite's position and scale\r\n * given a sprite sheet and some json data that holds the\r\n * sprite offset and size in pixels.\r\n */\r\nclass SpritBaseController extends Component_1.Component {\r\n    get rotation() {\r\n        return this.sprite.rotation;\r\n    }\r\n    get buffer() {\r\n        return this._buffer;\r\n    }\r\n    get selectedSpriteIndex() {\r\n        return this._selectedSpriteIndex;\r\n    }\r\n    get selectedSpriteId() {\r\n        return this._selectedSpriteId;\r\n    }\r\n    get spriteCount() {\r\n        return this._spriteData.tiles.size;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._spriteData;\r\n        this._selectedSpriteIndex = 0;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * setup the sprite\r\n     * @param texture\r\n     * @param spriteData\r\n     */\r\n    initialize(texture, spriteData, defaultSprite) {\r\n        // save the data\r\n        this._spriteData = spriteData;\r\n        if (this._buffer) {\r\n            this._buffer.dispose();\r\n        }\r\n        // create the gl buffers for this sprite\r\n        this._buffer = new GlBuffer_1.GlBuffer(this.gl);\r\n        // setup the shader for the sprite\r\n        this._spriteTexture = texture;\r\n        // needs to be committed to buffer when update is called\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the list of all the sprites\r\n     * @returns\r\n     */\r\n    getSpriteList() {\r\n        const idList = [];\r\n        this._spriteData.tiles.forEach((sprite) => idList.push(sprite.id));\r\n        return idList;\r\n    }\r\n    /**\r\n     * Sets the sprites position\r\n     * @param x in screen pixels\r\n     * @param y in screen pixels\r\n     * @param scale multiplied by the sprite width and height\r\n     * @param depth is depth buffer space (-1 to 1) 1 is far -1 is near\r\n     */\r\n    setSpritePosition(x, y, depth) {\r\n        this.sprite.setPosition(x, y, depth);\r\n        this._dirty = true;\r\n    }\r\n    spriteWidth() {\r\n        return this.sprite.getSpriteWidth();\r\n    }\r\n    spriteHeight() {\r\n        return this.sprite.getSpriteHeight();\r\n    }\r\n    /**\r\n     * Scale the image default is 1.0\r\n     * @param scale uniform scale or separate components (x,y)\r\n     */\r\n    scale(scale) {\r\n        this.sprite.setSpriteScale(scale);\r\n        this._dirty = true;\r\n        //console.debug('Sprite: Scale');\r\n    }\r\n    /**\r\n     * Flip the image.\r\n     * @param flipDirection\r\n     */\r\n    flip(flipDirection) {\r\n        this.sprite.setSpriteFlip(flipDirection);\r\n        this._dirty = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Rotate the angle in degrees\r\n     * @param angle In Degrees\r\n     */\r\n    rotate(angle) {\r\n        this.sprite.setSpriteRotate(angle);\r\n        this._dirty = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the view offset for the projection. If undefined it will use the\r\n     * offset from ViewManager\r\n     * @param offset\r\n     */\r\n    viewOffset(offset) {\r\n        this._viewOffset = offset;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Sets a view scale for the projection. If undefined it will use the\r\n     * offset from ViewManager\r\n     * @param scale\r\n     */\r\n    viewScale(scale) {\r\n        this._viewScale = scale;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Select a sprite\r\n     * @param id the id in the sprite sheet\r\n     */\r\n    setSprite(id) {\r\n        // find the sprite of a given id\r\n        if (!this._spriteData) {\r\n            return;\r\n        }\r\n        let index = 0;\r\n        // number or look up\r\n        const sprite = this._spriteData.tiles.get(id);\r\n        if (sprite) {\r\n            // does the id match or if the id is null just pick the first one or if id is a\r\n            // number does the index match\r\n            this._selectedSpriteIndex = index;\r\n            this._selectedSpriteId = sprite.id;\r\n            let xOffset = sprite.offset[0] ?? 0;\r\n            let yOffset = sprite.offset[1] ?? 0;\r\n            if (this.sprite.getSpriteFlip() == ISprite_1.SpriteFlip.XFlip) {\r\n                xOffset = sprite.offset[2] ?? 0;\r\n            }\r\n            else if (this.sprite.getSpriteFlip() == ISprite_1.SpriteFlip.YFlip) {\r\n                yOffset = sprite.offset[3] ?? 0;\r\n            }\r\n            else if (this.sprite.getSpriteFlip() == ISprite_1.SpriteFlip.Both) {\r\n                xOffset = sprite.offset[2] ?? 0;\r\n                yOffset = sprite.offset[3] ?? 0;\r\n            }\r\n            this.sprite.setSpritePositionOffset(xOffset, yOffset);\r\n            // use sprite loc\r\n            if (sprite.loc) {\r\n                this.sprite.setSprite({\r\n                    pixelXOffset: sprite.loc[0],\r\n                    pixelYOffset: sprite.loc[1],\r\n                    spriteWidth: sprite.loc[2],\r\n                    spriteHeight: sprite.loc[3],\r\n                });\r\n            }\r\n            this._dirty = true;\r\n        }\r\n        else {\r\n            console.error('cannot find sprite ' + id);\r\n        }\r\n    }\r\n    /**\r\n     * Draw the sprite\r\n     * @param dt\r\n     */\r\n    update(dt) {\r\n        if (!this._buffer) {\r\n            console.error('Call Initialize()');\r\n            return;\r\n        }\r\n        // only commit to buffer if something changed\r\n        if (this._dirty) {\r\n            this.commitToBuffer();\r\n            this._dirty = false;\r\n        }\r\n        if (!this._buffer.buffersCreated) {\r\n            console.error('buffers are not created. Call commitToBuffers() first.');\r\n        }\r\n        else {\r\n            this._buffer.enable();\r\n            this.eng.spritePerspectiveShader.setSpriteSheet(this._spriteTexture);\r\n            this.eng.spritePerspectiveShader.enable();\r\n            const view = this.eng.viewManager;\r\n            let projection = view.projection;\r\n            if (this._viewOffset && this._viewScale) {\r\n                projection = view.calculateProjection(this._viewOffset, this._viewScale);\r\n            }\r\n            // set the project\r\n            this.eng.spritePerspectiveShader.setProj(projection);\r\n            this.render();\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._buffer) {\r\n            this._buffer.dispose();\r\n            this._buffer = null;\r\n        }\r\n    }\r\n}\r\nexports.SpritBaseController = SpritBaseController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteBaseController.ts?");

/***/ }),

/***/ "./src/graphics/SpriteBatchController.ts":
/*!***********************************************!*\
  !*** ./src/graphics/SpriteBatchController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpritBatchController = void 0;\r\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\r\nconst SpriteBaseController_1 = __webpack_require__(/*! ./SpriteBaseController */ \"./src/graphics/SpriteBaseController.ts\");\r\n/**\r\n * This class controls a sprite's position and scale\r\n * given a sprite sheet and some json data that holds the\r\n * sprite offset and size in pixels.\r\n */\r\nclass SpritBatchController extends SpriteBaseController_1.SpritBaseController {\r\n    /** The sprite */\r\n    get sprite() {\r\n        return this.getSprite(this._activeSprite);\r\n    }\r\n    /**\r\n     * Get the number of sprites\r\n     */\r\n    get spriteCount() {\r\n        return this._spriteData.tiles.size;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._sprites = new Map();\r\n        this._quads = [];\r\n    }\r\n    /**\r\n     * setup the sprite\r\n     * @param texture\r\n     * @param spriteData\r\n     */\r\n    initialize(texture, spriteData, defaultSprite) {\r\n        super.initialize(texture, spriteData, defaultSprite);\r\n        // set active sprite to the first  key\r\n        for (let key of this._sprites.keys()) {\r\n            this._activeSprite = key;\r\n            break;\r\n        }\r\n    }\r\n    /**\r\n     * A way of keeping track of our sprites\r\n     * @param id\r\n     * @returns\r\n     */\r\n    getSprite(id) {\r\n        if (!this._spriteTexture) {\r\n            console.error('call initialize first.');\r\n            return null;\r\n        }\r\n        let sprite = this._sprites.get(id);\r\n        if (!this._sprites.has(id)) {\r\n            // create new sprite and initialize it\r\n            sprite = new Sprite_1.Sprite(id);\r\n            sprite.initialize({\r\n                width: this._spriteTexture.width,\r\n                height: this._spriteTexture.height,\r\n            }, this.gl.canvas.width, this.gl.canvas.height);\r\n            this._sprites.set(id, sprite);\r\n        }\r\n        return sprite;\r\n    }\r\n    /**\r\n     * Do we have a sprite with this id\r\n     * @param id\r\n     * @returns\r\n     */\r\n    hasSprite(id) {\r\n        return this._sprites.has(id);\r\n    }\r\n    /**\r\n     * clear all sprites\r\n     */\r\n    clearAllSprites() {\r\n        this._sprites.clear();\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Sets an active sprite\r\n     * @param spriteId\r\n     */\r\n    activeSprite(spriteId) {\r\n        this._activeSprite = spriteId;\r\n        return this;\r\n    }\r\n    /**\r\n     * remove a sprite. You will need to call Commit for the\r\n     * sprite to be removed.\r\n     * @param spriteId\r\n     * @returns\r\n     */\r\n    removeSprite(spriteId) {\r\n        this._dirty = true;\r\n        return this._sprites.delete(spriteId);\r\n    }\r\n    /**\r\n     * Commit all sprites to the buffer\r\n     */\r\n    commitToBuffer() {\r\n        if (this._quads.length < this._sprites.size) {\r\n            this._quads = new Array(this._sprites.size);\r\n        }\r\n        let i = 0;\r\n        this._sprites.forEach((sprite) => {\r\n            this._quads[i++] = sprite.quad;\r\n        });\r\n        // update the buffer\r\n        this._buffer.setBuffers(this._quads, false, undefined, this._sprites.size);\r\n    }\r\n    render() {\r\n        const vertexCount = this._buffer.indexCount;\r\n        const type = this.gl.UNSIGNED_SHORT;\r\n        const offset = 0;\r\n        this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n}\r\nexports.SpritBatchController = SpritBatchController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteBatchController.ts?");

/***/ }),

/***/ "./src/graphics/SpriteController2.ts":
/*!*******************************************!*\
  !*** ./src/graphics/SpriteController2.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpriteController2 = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst GlBuffer2_1 = __webpack_require__(/*! ../geometry/GlBuffer2 */ \"./src/geometry/GlBuffer2.ts\");\r\nconst constants_1 = __webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\");\r\nconst mat2_1 = __importDefault(__webpack_require__(/*! ../math/mat2 */ \"./src/math/mat2.ts\"));\r\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../math/mat4 */ \"./src/math/mat4.ts\"));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\nconst ISprite_1 = __webpack_require__(/*! ./ISprite */ \"./src/graphics/ISprite.ts\");\r\nclass SpriteController2 extends Component_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._visible = true;\r\n        this._world = new mat4_1.default();\r\n        this._loc = [0, 0, 0, 0];\r\n        this.quad = {\r\n            color: vec4_1.default.one.copy(),\r\n            maxTex: new vec2_1.default(),\r\n            minTex: new vec2_1.default(),\r\n            offset: new vec2_1.default(),\r\n            rotScale: new mat2_1.default(),\r\n            translation: new vec3_1.default(),\r\n        };\r\n        this._angle = 0;\r\n        this._scale = new vec2_1.default(1, 1);\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    set left(value) {\r\n        this.quad.translation.x = value;\r\n        this.calculateMat();\r\n        this._dirty = true;\r\n    }\r\n    get left() {\r\n        return this.quad.translation.x;\r\n    }\r\n    set top(value) {\r\n        this.quad.translation.y = value;\r\n        this.calculateMat();\r\n        this._dirty = true;\r\n    }\r\n    get top() {\r\n        return this.quad.translation.y;\r\n    }\r\n    spriteImage(name) {\r\n        const data = this._spriteData.tiles.get(name);\r\n        if (data) {\r\n            this.spriteLocation(data.loc);\r\n        }\r\n        else {\r\n            console.error('Cannot find sprite ' + name + ' in texture ' + this._spriteTexture.id);\r\n        }\r\n    }\r\n    getSpriteImages() {\r\n        return Array.from(this._spriteData?.tiles.keys());\r\n    }\r\n    spriteLocation(loc) {\r\n        this._loc[0] = loc[0];\r\n        this._loc[1] = loc[1];\r\n        this._loc[2] = loc[2];\r\n        this._loc[3] = loc[3];\r\n        this.pixelsToUv(this._loc, this._flip, this.quad.minTex, this.quad.maxTex);\r\n        this.calculateMat();\r\n        this._dirty = true;\r\n    }\r\n    get depth() {\r\n        return this.quad.translation.z;\r\n    }\r\n    set depth(depth) {\r\n        this.quad.translation.z = depth;\r\n        this.calculateMat();\r\n        this._dirty = true;\r\n    }\r\n    set leftOffset(value) {\r\n        this.quad.offset.x = value;\r\n        this._dirty = true;\r\n    }\r\n    set topOffset(value) {\r\n        this.quad.offset.y = value;\r\n        this._dirty = true;\r\n    }\r\n    get width() {\r\n        if (this._spriteTexture) {\r\n            const scale = Math.abs(this.quad.maxTex.x - this.quad.minTex.x) * this._scale.x;\r\n            return scale * this._spriteTexture.width;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    get height() {\r\n        if (this._spriteTexture) {\r\n            const scale = Math.abs(this.quad.maxTex.y - this.quad.minTex.y) * this._scale.y;\r\n            return scale * this._spriteTexture.height;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    get angle() {\r\n        return this._angle;\r\n    }\r\n    set angle(degrees) {\r\n        this._angle = degrees;\r\n        this.calculateMat();\r\n        this._dirty = true;\r\n    }\r\n    get xScale() {\r\n        return this._scale.x;\r\n    }\r\n    set xScale(value) {\r\n        this._scale.x = value;\r\n        this.calculateMat();\r\n        this._dirty = true;\r\n    }\r\n    get yScale() {\r\n        return this._scale.y;\r\n    }\r\n    set yScale(value) {\r\n        this._scale.y = value;\r\n        this.calculateMat();\r\n        this._dirty = true;\r\n    }\r\n    get colorScale() {\r\n        return this.quad.color;\r\n    }\r\n    set colorScale(color) {\r\n        this.quad.color = color;\r\n        this._dirty = true;\r\n    }\r\n    get alpha() {\r\n        return this.quad.color.a;\r\n    }\r\n    set alpha(alpha) {\r\n        this.quad.color.a = alpha;\r\n        this._dirty = true;\r\n    }\r\n    get flipDirection() {\r\n        return this._flip;\r\n    }\r\n    set flipDirection(flip) {\r\n        this._flip = flip;\r\n        this.pixelsToUv(this._loc, this._flip, this.quad.minTex, this.quad.maxTex);\r\n        this._dirty = true;\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n    }\r\n    initialize(texture, spriteData) {\r\n        // save the sprite data\r\n        this._spriteData = spriteData;\r\n        this.dispose();\r\n        // create the gl buffers for this sprite\r\n        this._buffer = new GlBuffer2_1.GlBuffer2(this.gl);\r\n        // setup the shader for the sprite\r\n        this._spriteTexture = texture;\r\n        // needs to be committed to buffer when update is called\r\n        this._dirty = true;\r\n        this.visible = true;\r\n    }\r\n    calculateMat() {\r\n        this._world.setIdentity();\r\n        this._world.rotate((0, constants_1.toRadian)(this._angle), vec3_1.default.forward);\r\n        let pixelWidth = 1;\r\n        let pixelHeight = 1;\r\n        if (this._spriteTexture) {\r\n            const scaleWidth = Math.abs(this.quad.maxTex.x - this.quad.minTex.x);\r\n            pixelWidth = scaleWidth * this._spriteTexture.width * 0.5;\r\n            const scaleHeight = Math.abs(this.quad.maxTex.y - this.quad.minTex.y);\r\n            pixelHeight = scaleHeight * this._spriteTexture.height * 0.5;\r\n        }\r\n        this._world.scaleComp(this._scale.x * pixelWidth, this._scale.y * pixelHeight, 1.0);\r\n        this._world.translate(this.quad.translation);\r\n    }\r\n    commitToBuffer(force) {\r\n        if (this._dirty) {\r\n            this.calculateMat();\r\n            this._buffer.setBuffers(this.quad, false);\r\n            this._dirty = false;\r\n        }\r\n    }\r\n    update(dt, projection) {\r\n        if (!this._visible) {\r\n            return;\r\n        }\r\n        if (!this._buffer) {\r\n            console.error('Call Initialize()');\r\n            return;\r\n        }\r\n        this.commitToBuffer();\r\n        if (!this._buffer.buffersCreated) {\r\n            console.error('buffers are not created. Call commitToBuffers() first.');\r\n        }\r\n        else {\r\n            this._buffer.enable();\r\n            this.eng.spriteShader.setSpriteSheet(this._spriteTexture);\r\n            this.eng.spriteShader.enable();\r\n            // set the project\r\n            const view = this.eng.viewManager;\r\n            projection = projection ?? view.projection;\r\n            this.eng.spriteShader.setProj(projection);\r\n            this.eng.spriteShader.setWorld(this._world);\r\n            this.eng.spriteShader.setOffset(this.quad.offset);\r\n            this.eng.spriteShader.setColorScale(this.quad.color);\r\n            const vertexCount = this._buffer.indexCount;\r\n            const type = this.gl.UNSIGNED_SHORT;\r\n            const offset = 0;\r\n            this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\r\n        }\r\n    }\r\n    /**\r\n     * Converts textures from pixels to uv space\r\n     * @param loc - [x, y, width, height]\r\n     * @param spriteW\r\n     * @param spriteH\r\n     * @returns\r\n     */\r\n    pixelsToUv(loc, flip, resultsMin, resultsMax) {\r\n        const sheetW = this._spriteTexture.width;\r\n        const sheetH = this._spriteTexture.height;\r\n        if (!loc[2]) {\r\n            loc[2] = sheetW;\r\n        }\r\n        if (!loc[3]) {\r\n            loc[3] = sheetH;\r\n        }\r\n        let minX = loc[0] / sheetW;\r\n        let minY = 1.0 - loc[1] / sheetH;\r\n        let maxX = (loc[0] + loc[2]) / sheetW;\r\n        let maxY = 1.0 - (loc[1] + loc[3]) / sheetH;\r\n        if (flip == ISprite_1.SpriteFlip.Both || flip == ISprite_1.SpriteFlip.XFlip) {\r\n            resultsMin.x = maxX;\r\n            resultsMax.x = minX;\r\n        }\r\n        else {\r\n            resultsMin.x = minX;\r\n            resultsMax.x = maxX;\r\n        }\r\n        if (flip == ISprite_1.SpriteFlip.Both || flip == ISprite_1.SpriteFlip.YFlip) {\r\n            resultsMin.y = maxY;\r\n            resultsMax.y = minY;\r\n        }\r\n        else {\r\n            resultsMin.y = minY;\r\n            resultsMax.y = maxY;\r\n        }\r\n    }\r\n    /**\r\n     * Disposes the geometry, but not the texture\r\n     */\r\n    dispose() {\r\n        if (this._buffer) {\r\n            this._buffer.dispose();\r\n        }\r\n    }\r\n}\r\nexports.SpriteController2 = SpriteController2;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteController2.ts?");

/***/ }),

/***/ "./src/graphics/SpriteInstanceCollection.ts":
/*!**************************************************!*\
  !*** ./src/graphics/SpriteInstanceCollection.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpriteInstanceCollection = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst GlBufferQuadInstance_1 = __webpack_require__(/*! ../geometry/GlBufferQuadInstance */ \"./src/geometry/GlBufferQuadInstance.ts\");\r\nconst SpriteInstanceShader_1 = __webpack_require__(/*! ../shaders/SpriteInstanceShader */ \"./src/shaders/SpriteInstanceShader.ts\");\r\nconst ISprite_1 = __webpack_require__(/*! ./ISprite */ \"./src/graphics/ISprite.ts\");\r\n/**\r\n * Manages a collection of quads that all get rendered at once.s\r\n */\r\nclass SpriteInstanceCollection extends Component_1.Component {\r\n    get spriteData() {\r\n        return this._spriteData;\r\n    }\r\n    getLoc(id) {\r\n        const data = this._spriteData.tiles.get(id);\r\n        if (!data) {\r\n            console.debug('cannot find sprite ' + id + ' in texture ' + this._spriteTexture.id);\r\n            return [0, 0, 32, 32];\r\n        }\r\n        return data.loc;\r\n    }\r\n    get spriteTexture() {\r\n        return this._spriteTexture;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.shader = new SpriteInstanceShader_1.SpriteInstanceShader(eng.gl, 'instancing');\r\n        this.buffer = new GlBufferQuadInstance_1.GlBufferQuadInstance(eng.gl);\r\n        this.quads = new Map();\r\n        //if (this.gl.MAX_VERTEX_ATTRIBS < 1) {\r\n        //this.eng.canvasController.error('max attri ' + this.gl.MAX_VERTEX_ATTRIBS);\r\n        //}\r\n    }\r\n    /**\r\n     * Initialize a texture\r\n     */\r\n    initialize(texture, spriteData) {\r\n        // save the sprite data\r\n        this._spriteData = spriteData;\r\n        this._spriteTexture = texture;\r\n    }\r\n    hasQuad(id) {\r\n        return this.quads.has(id);\r\n    }\r\n    /**\r\n     * Get a quad from an id\r\n     * @param id\r\n     * @returns\r\n     */\r\n    getQuad(id) {\r\n        return this.quads.get(id);\r\n    }\r\n    /**\r\n     * Removes a quad\r\n     * @param id\r\n     */\r\n    removeQuad(id) {\r\n        this.quads.delete(id);\r\n        this.dirty = true;\r\n    }\r\n    /**\r\n     * Add or update a quad.\r\n     * @param quad\r\n     */\r\n    addQuad(id, quad) {\r\n        this.quads.set(id, quad);\r\n        this.dirty = true;\r\n    }\r\n    /**\r\n     * Set the flag to update the buffer\r\n     */\r\n    setDirty() {\r\n        this.dirty = true;\r\n    }\r\n    /**\r\n     * Commit the quads to the vertex buffers\r\n     * @param force\r\n     */\r\n    commitToBuffer(force) {\r\n        if (this.dirty || force) {\r\n            const array = Array.from(this.quads.values());\r\n            this.buffer.setBuffers(array);\r\n        }\r\n        this.dirty = false;\r\n    }\r\n    pixelsToUv(loc, flip, resultsMin, resultsMax) {\r\n        const sheetW = this._spriteTexture.width;\r\n        const sheetH = this._spriteTexture.height;\r\n        if (!loc[2]) {\r\n            loc[2] = sheetW;\r\n        }\r\n        if (!loc[3]) {\r\n            loc[3] = sheetH;\r\n        }\r\n        let minX = loc[0] / sheetW;\r\n        let minY = 1.0 - loc[1] / sheetH;\r\n        let maxX = (loc[0] + loc[2]) / sheetW;\r\n        let maxY = 1.0 - (loc[1] + loc[3]) / sheetH;\r\n        if (flip == ISprite_1.SpriteFlip.Both || flip == ISprite_1.SpriteFlip.XFlip) {\r\n            resultsMin.x = maxX;\r\n            resultsMax.x = minX;\r\n        }\r\n        else {\r\n            resultsMin.x = minX;\r\n            resultsMax.x = maxX;\r\n        }\r\n        if (flip == ISprite_1.SpriteFlip.Both || flip == ISprite_1.SpriteFlip.YFlip) {\r\n            resultsMin.y = maxY;\r\n            resultsMax.y = minY;\r\n        }\r\n        else {\r\n            resultsMin.y = minY;\r\n            resultsMax.y = maxY;\r\n        }\r\n    }\r\n    /**\r\n     * clear out the sprites\r\n     */\r\n    clear() {\r\n        this.quads.clear();\r\n        this.setDirty();\r\n    }\r\n    /**\r\n     * For testing\r\n     * @param dt\r\n     */\r\n    update(dt, projection) {\r\n        if (this.quads.size == 0) {\r\n            return;\r\n        }\r\n        this.commitToBuffer();\r\n        const view = this.eng.viewManager;\r\n        projection = projection ?? view.projection;\r\n        this.shader.setSpriteSheet(this.spriteTexture);\r\n        this.shader.enable();\r\n        // set the project\r\n        this.shader.setProj(projection);\r\n        if (!this.buffer.enable()) {\r\n            this.eng.canvasController.error('error with buffer');\r\n        }\r\n        const type = this.gl.UNSIGNED_SHORT;\r\n        this.gl.drawElementsInstanced(this.gl.TRIANGLES, this.buffer.indexCount, type, 0, this.buffer.instanceCount);\r\n    }\r\n}\r\nexports.SpriteInstanceCollection = SpriteInstanceCollection;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteInstanceCollection.ts?");

/***/ }),

/***/ "./src/graphics/SpriteInstanceController.ts":
/*!**************************************************!*\
  !*** ./src/graphics/SpriteInstanceController.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpriteInstanceController = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst constants_1 = __webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\");\r\nconst mat2_1 = __importDefault(__webpack_require__(/*! ../math/mat2 */ \"./src/math/mat2.ts\"));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\n/**\r\n * Manages a single sprite\r\n */\r\nclass SpriteInstanceController extends Component_1.Component {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    set left(value) {\r\n        this._quad.translation.x = value;\r\n        this.calculateMat();\r\n        this.updateCollection();\r\n    }\r\n    get left() {\r\n        return this._quad.translation.x;\r\n    }\r\n    set top(value) {\r\n        this._quad.translation.y = value;\r\n        this.calculateMat();\r\n        this.updateCollection();\r\n    }\r\n    get top() {\r\n        return this._quad.translation.y;\r\n    }\r\n    spriteImage(name) {\r\n        const data = this._collection.spriteData.tiles.get(name);\r\n        if (data) {\r\n            this.spriteLocation(data.loc);\r\n        }\r\n        else {\r\n            console.error('Cannot find sprite ' +\r\n                name +\r\n                ' in texture ' +\r\n                this._collection.spriteTexture.id);\r\n        }\r\n    }\r\n    getSpriteImages() {\r\n        return Array.from(this._collection.spriteData?.tiles.keys());\r\n    }\r\n    spriteLocation(loc) {\r\n        this._loc[0] = loc[0];\r\n        this._loc[1] = loc[1];\r\n        this._loc[2] = loc[2];\r\n        this._loc[3] = loc[3];\r\n        this._collection.pixelsToUv(this._loc, this._flip, this._quad.minTex, this._quad.maxTex);\r\n        this.updateCollection();\r\n    }\r\n    get depth() {\r\n        return this._quad.translation.z;\r\n    }\r\n    set depth(depth) {\r\n        this._quad.translation.z = depth;\r\n        this.calculateMat();\r\n        this.updateCollection();\r\n    }\r\n    set leftOffset(value) {\r\n        this._quad.offset.x = value;\r\n        this.updateCollection();\r\n    }\r\n    set topOffset(value) {\r\n        this._quad.offset.y = value;\r\n        this.updateCollection();\r\n    }\r\n    get width() {\r\n        if (this._collection.spriteTexture) {\r\n            const scale = Math.abs(this._quad.maxTex.x - this._quad.minTex.x); // * this._scale.x;\r\n            return scale * this._collection.spriteTexture.width;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    get height() {\r\n        if (this._collection.spriteTexture) {\r\n            const scale = Math.abs(this._quad.maxTex.y - this._quad.minTex.y); // * this._scale.y;\r\n            return scale * this._collection.spriteTexture.height;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    get angle() {\r\n        return this._angle;\r\n    }\r\n    set angle(degrees) {\r\n        this._angle = degrees;\r\n        this.calculateMat();\r\n        this.updateCollection();\r\n    }\r\n    get xScale() {\r\n        return this._scale.x;\r\n    }\r\n    set xScale(value) {\r\n        this._scale.x = value;\r\n        this.calculateMat();\r\n        this.updateCollection();\r\n    }\r\n    get yScale() {\r\n        return this._scale.y;\r\n    }\r\n    set yScale(value) {\r\n        this._scale.y = value;\r\n        this.calculateMat();\r\n        this.updateCollection();\r\n    }\r\n    get colorScale() {\r\n        return this._quad.color;\r\n    }\r\n    set colorScale(color) {\r\n        this._quad.color = color;\r\n        this.updateCollection();\r\n    }\r\n    get alpha() {\r\n        return this._quad.color.a;\r\n    }\r\n    set alpha(alpha) {\r\n        this._quad.color.a = alpha;\r\n        this.updateCollection();\r\n    }\r\n    get flipDirection() {\r\n        return this._flip;\r\n    }\r\n    set flipDirection(flip) {\r\n        this._flip = flip;\r\n        this._collection.pixelsToUv(this._loc, this._flip, this._quad.minTex, this._quad.maxTex);\r\n        this.updateCollection();\r\n    }\r\n    get visible() {\r\n        return this._collection.hasQuad(this.id);\r\n    }\r\n    /**\r\n     *sets the visibility\r\n     * @param id\r\n     */\r\n    set visible(value) {\r\n        if (value) {\r\n            this._collection.addQuad(this.id, this._quad);\r\n        }\r\n        else {\r\n            this._collection.removeQuad(this.id);\r\n        }\r\n    }\r\n    constructor(id, _collection, quad) {\r\n        super(_collection.eng);\r\n        this._collection = _collection;\r\n        this._quad = {\r\n            color: vec4_1.default.one.copy(),\r\n            maxTex: new vec2_1.default(),\r\n            minTex: new vec2_1.default(),\r\n            offset: new vec2_1.default(),\r\n            rotScale: new mat2_1.default(),\r\n            translation: new vec3_1.default(),\r\n        };\r\n        this._angle = 0;\r\n        this._scale = new vec2_1.default(1, 1);\r\n        this._loc = [0, 0, 0, 0];\r\n        if (quad) {\r\n            quad.color.copy(this._quad.color);\r\n            quad.maxTex.copy(this._quad.maxTex);\r\n            quad.minTex.copy(this._quad.minTex);\r\n            quad.offset.copy(this._quad.offset);\r\n            quad.rotScale.copy(this._quad.rotScale);\r\n            quad.translation.copy(this._quad.translation);\r\n        }\r\n        this._id = id;\r\n        this.visible = true;\r\n    }\r\n    calculateMat() {\r\n        this._quad.rotScale.setIdentity();\r\n        if (this._angle != undefined) {\r\n            this._quad.rotScale.rotate((0, constants_1.toRadian)(this._angle));\r\n        }\r\n        let pixelWidth = 1;\r\n        let pixelHeight = 1;\r\n        if (this._collection.spriteTexture) {\r\n            const scaleWidth = Math.abs(this._quad.maxTex.x - this._quad.minTex.x);\r\n            pixelWidth = scaleWidth * this._collection.spriteTexture.width;\r\n            const scaleHeight = Math.abs(this._quad.maxTex.y - this._quad.minTex.y);\r\n            pixelHeight = scaleHeight * this._collection.spriteTexture.height;\r\n        }\r\n        const w = pixelWidth * this.xScale;\r\n        const h = pixelHeight * this.yScale;\r\n        this._quad.rotScale.scaleNumber(w, h);\r\n    }\r\n    updateCollection() {\r\n        this._collection.setDirty();\r\n    }\r\n    getSprite(id) {\r\n        return this._collection.getQuad(id);\r\n    }\r\n}\r\nexports.SpriteInstanceController = SpriteInstanceController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteInstanceController.ts?");

/***/ }),

/***/ "./src/graphics/TextController.ts":
/*!****************************************!*\
  !*** ./src/graphics/TextController.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TextController = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst GlBuffer_1 = __webpack_require__(/*! ../geometry/GlBuffer */ \"./src/geometry/GlBuffer.ts\");\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nclass TextController extends Component_1.Component {\r\n    constructor(eng, fontData) {\r\n        super(eng);\r\n        this.fontData = fontData;\r\n        // Create a new buffer\r\n        this.buffer = new GlBuffer_1.GlBuffer(this.gl);\r\n    }\r\n    /**\r\n     * Initialize a new text block\r\n     * @param block Text properties\r\n     * @param lineHeight The height of the tallest character in pixels\r\n     */\r\n    initialize(block, lineHeight) {\r\n        const screenHeight = this.eng.height;\r\n        const screenWidth = this.eng.width;\r\n        const originX = block.position.x;\r\n        const originY = this.eng.height - block.position.y;\r\n        let offsetX = originX;\r\n        let offsetY = originY;\r\n        let xpos1 = offsetX;\r\n        let ypos1 = offsetY;\r\n        let xpos2 = offsetX;\r\n        let ypos2 = offsetY;\r\n        this.color = block.color;\r\n        const zpos = block.depth;\r\n        let charCount = 0;\r\n        const text = block.text;\r\n        // if the text is empty there is nothing to do\r\n        if (!text) {\r\n            return;\r\n        }\r\n        const quads = [];\r\n        // loop over all the characters in the text block\r\n        // and create geometry for them.\r\n        for (let i = 0; i < text.length; i++) {\r\n            // get the character\r\n            let ch = text.charAt(i);\r\n            // check for new line and out of range\r\n            if (ch == '\\n') {\r\n                offsetY -= lineHeight;\r\n                offsetX = originX;\r\n                continue;\r\n            }\r\n            else if (ch < ' ' || ch > '~') {\r\n                ch = '?';\r\n            }\r\n            const font = this.fontData.find((value) => value.ch == ch);\r\n            if (!font) {\r\n                console.warn(\"Don't have data for ch: \" + ch);\r\n            }\r\n            xpos1 = offsetX + font.bearingX;\r\n            ypos1 = offsetY - (font.sizeY - font.bearingY); // bottom of the letter\r\n            xpos2 = offsetX + block.scale * font.advance;\r\n            ypos2 = offsetY + block.scale * font.bearingY; // top of the letter\r\n            // set for the next letter\r\n            offsetX = xpos2;\r\n            const tu1 = font.u1;\r\n            const tv1 = 1 - font.v2;\r\n            const tu2 = font.u2;\r\n            const tv2 = 1 - font.v1;\r\n            const quad = {\r\n                min: new vec3_1.default([(xpos1 / screenWidth) * 2 - 1.0, (ypos1 / screenHeight) * 2 - 1.0, zpos]),\r\n                max: new vec3_1.default([(xpos2 / screenWidth) * 2 - 1.0, (ypos2 / screenHeight) * 2 - 1.0, zpos]),\r\n                minTex: new vec2_1.default([tu1, tv2]),\r\n                maxTex: new vec2_1.default([tu2, tv1]),\r\n            };\r\n            charCount++;\r\n            quads.push(quad);\r\n        }\r\n        this.buffer.setBuffers(quads, false);\r\n    }\r\n    /**\r\n     * Updates the text animations.\r\n     * @param {float} dt Delta time in ms\r\n     */\r\n    update(dt) {\r\n        if (this.buffer.buffersCreated) {\r\n            // enable the buffer\r\n            this.buffer.enable();\r\n            {\r\n                const vertexCount = this.buffer.indexCount;\r\n                const type = this.gl.UNSIGNED_SHORT;\r\n                const offset = 0;\r\n                this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\r\n            }\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this.buffer) {\r\n            this.buffer.dispose();\r\n        }\r\n    }\r\n}\r\nexports.TextController = TextController;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/TextController.ts?");

/***/ }),

/***/ "./src/graphics/Texture.ts":
/*!*********************************!*\
  !*** ./src/graphics/Texture.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Texture = void 0;\r\n/**\r\n * OpenGL texture\r\n */\r\nclass Texture {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    constructor(_id, gl) {\r\n        this._id = _id;\r\n        this.gl = gl;\r\n        this.glTexture = 0;\r\n    }\r\n    /**\r\n     * Enable this texture, activate the texture and set the uniform for the shader\r\n     */\r\n    enable(uniformIndex, slot = 0, activeTexture = this.gl.TEXTURE0) {\r\n        // Tell WebGL we want to affect texture unit\r\n        this.gl.activeTexture(activeTexture);\r\n        // Bind the texture to texture unit 0\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\r\n        // Tell the shader we bound the texture to texture unit\r\n        this.gl.uniform1i(uniformIndex, slot);\r\n    }\r\n    async loadImage(imagePath) {\r\n        return new Promise((resolve, reject) => {\r\n            this.texturePath = imagePath;\r\n            this.glTexture = this.gl.createTexture();\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\r\n            // Because images have to be download over the internet\r\n            // they might take a moment until they are ready.\r\n            // Until then put a single pixel in the texture so we can\r\n            // use it immediately. When the image has finished downloading\r\n            // we'll update the texture with the contents of the image.\r\n            const level = 0;\r\n            const internalFormat = this.gl.RGBA;\r\n            const width = 1;\r\n            const height = 1;\r\n            const border = 0;\r\n            const srcFormat = this.gl.RGBA;\r\n            const srcType = this.gl.UNSIGNED_BYTE;\r\n            const pixel = new Uint8Array([0, 0, 255, 255]); // opaque blue\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\r\n            const image = new Image();\r\n            image.onload = () => {\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\r\n                this.width = image.width;\r\n                this.height = image.height;\r\n                this.gl.texImage2D(this.gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.MIRRORED_REPEAT);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.MIRRORED_REPEAT);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\r\n                this.gl.generateMipmap(this.gl.TEXTURE_2D);\r\n                return resolve(this);\r\n            };\r\n            image.onerror = (event) => {\r\n                console.error(event);\r\n                return reject();\r\n            };\r\n            image.src = imagePath;\r\n        });\r\n    }\r\n    isPowerOf2(value) {\r\n        return (value & (value - 1)) == 0;\r\n    }\r\n    dispose() {\r\n        this.gl.deleteTexture(this.glTexture);\r\n        this.glTexture = 0;\r\n    }\r\n}\r\nexports.Texture = Texture;\r\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/Texture.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n__webpack_require__(/*! ./css/canvas.scss */ \"./src/css/canvas.scss\");\r\nconst PlatformEngine_1 = __webpack_require__(/*! ./_game/PlatformEngine */ \"./src/_game/PlatformEngine.ts\");\r\nconst GameEditor_1 = __webpack_require__(/*! ./_game/editor/GameEditor */ \"./src/_game/editor/GameEditor.tsx\");\r\n/**\r\n * Create the only instance of a canvas controller\r\n */\r\nconst engine = new PlatformEngine_1.PlatformEngine();\r\nconst editor = new GameEditor_1.GameEditor(engine);\r\n/** time tracking variables */\r\nlet previousTimeStamp;\r\nfunction step(timestamp) {\r\n    window.requestAnimationFrame(step);\r\n    // save the start time\r\n    if (previousTimeStamp === undefined) {\r\n        previousTimeStamp = timestamp;\r\n    }\r\n    // calculate the elapsed\r\n    const elapsed = timestamp - previousTimeStamp;\r\n    // if the frame tool longer than 20ms through it out\r\n    if (elapsed < 50) {\r\n        // update the scene\r\n        engine.update(elapsed);\r\n        // update the editor\r\n        editor.update(elapsed);\r\n    }\r\n    // request a new frame\r\n    previousTimeStamp = timestamp;\r\n}\r\n/**\r\n *  initialize the editor\r\n */\r\neditor.initialize(document.getElementById('editor-container'));\r\n/**\r\n * Start the engine then request and animation frame\r\n */\r\nengine\r\n    .initialize(document.getElementById('game-container'))\r\n    .then(() => {\r\n    // let the editor know the game is ready\r\n    editor.onGameInitialized();\r\n    // request the first frame\r\n    window.requestAnimationFrame(step);\r\n})\r\n    .catch((e) => {\r\n    console.error('Error initializing ', e);\r\n});\r\n\n\n//# sourceURL=webpack://earthquest/./src/index.ts?");

/***/ }),

/***/ "./src/math/Curve.ts":
/*!***************************!*\
  !*** ./src/math/Curve.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Curve = exports.CurveType = void 0;\r\nconst MathConst = __importStar(__webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\"));\r\nvar CurveType;\r\n(function (CurveType) {\r\n    CurveType[CurveType[\"discreet\"] = 0] = \"discreet\";\r\n    CurveType[CurveType[\"linear\"] = 1] = \"linear\";\r\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\r\n/**\r\n * Class used to create an animation.\r\n */\r\nclass Curve {\r\n    isRunning() {\r\n        return this._running;\r\n    }\r\n    onDone(onDone) {\r\n        this._onDone = onDone;\r\n        return this;\r\n    }\r\n    onUpdate(onUpdate) {\r\n        this._onUpdate = onUpdate;\r\n        return this;\r\n    }\r\n    getValue() {\r\n        return this._position;\r\n    }\r\n    getTime() {\r\n        return this._time;\r\n    }\r\n    isDone() {\r\n        return this._isDone;\r\n    }\r\n    constructor() {\r\n        this.speedScale = 1;\r\n        this._points = [];\r\n        this._position = 0;\r\n        this._time = 0;\r\n        this._reverse = false;\r\n        this._pingPong = false;\r\n        this._type = CurveType.discreet;\r\n        this._isDone = false;\r\n    }\r\n    start(restart, onDone, onUpdate) {\r\n        if (restart) {\r\n            this._time = 0;\r\n            this._position = 0;\r\n            this._isDone = false;\r\n            if (onDone) {\r\n                this._onDone = onDone;\r\n            }\r\n            if (onUpdate) {\r\n                this._onUpdate = onUpdate;\r\n            }\r\n            // if there are points use them\r\n            if (this._points.length > 0) {\r\n                // handle reverse\r\n                if (this._reverse) {\r\n                    this._time = this._points[this._points.length - 1].t;\r\n                    this._position = this._points[this._points.length - 1].p;\r\n                }\r\n                else {\r\n                    this._time = this._points[0].t;\r\n                    this._position = this._points[0].p;\r\n                }\r\n            }\r\n        }\r\n        this._running = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Pause the animation and set a custom position if wanted\r\n     * @param position\r\n     * @returns\r\n     */\r\n    pause(position) {\r\n        if (position != undefined) {\r\n            this._position = position;\r\n        }\r\n        this._running = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * Repeat the curve.\r\n     * @param value How many times to repeat. -1 is forever\r\n     * @returns\r\n     */\r\n    repeat(value) {\r\n        this._repeat = value;\r\n        return this;\r\n    }\r\n    curve(type) {\r\n        this._type = type;\r\n        return this;\r\n    }\r\n    points(points) {\r\n        // make a copy and sort it by time\r\n        this._points = points.slice().sort((a, b) => a.t - b.t);\r\n        return this;\r\n    }\r\n    reverse(reverse) {\r\n        this._reverse = reverse;\r\n        return this;\r\n    }\r\n    isReverse() {\r\n        return this._reverse;\r\n    }\r\n    reverseToggle() {\r\n        this._reverse = !this._reverse;\r\n        return this;\r\n    }\r\n    pingPong(pingPong) {\r\n        this._pingPong = pingPong;\r\n        return this;\r\n    }\r\n    update(dt) {\r\n        // if it is running and not done calculate\r\n        // a new position\r\n        if (this._running && !this._isDone) {\r\n            // update time first.\r\n            if (this._reverse) {\r\n                this._time -= dt * this.speedScale;\r\n            }\r\n            else {\r\n                this._time += dt * this.speedScale;\r\n            }\r\n            // find the closest point\r\n            const indices = this.findClosetTimeIndices(this._time);\r\n            const isDone = (this._reverse && this._time <= 0) ||\r\n                (!this._reverse &&\r\n                    this._time >= this._points[this._points.length - 1].t);\r\n            if (isDone) {\r\n                // if there are still more points or are we done\r\n                // set the position. We only have one point\r\n                // so this is easy.\r\n                this._position = this._points[indices[0]].p;\r\n                // handle update\r\n                if (this._onUpdate) {\r\n                    this._onUpdate(this._position, this);\r\n                }\r\n                // handle the repeat and ping pong\r\n                if (this._repeat > 0 || this._repeat == -1) {\r\n                    // if we are ping ponging\r\n                    if (this._pingPong) {\r\n                        this._reverse = !this._reverse;\r\n                    }\r\n                    else {\r\n                        // reset time\r\n                        this._time = 0;\r\n                    }\r\n                    if (this._repeat > 0) {\r\n                        this._repeat--;\r\n                    }\r\n                }\r\n                else {\r\n                    // we are done. Set flag.\r\n                    this._isDone = true;\r\n                    this._running = false;\r\n                    // raise event as needed\r\n                    if (this._onDone) {\r\n                        this._onDone(this);\r\n                    }\r\n                }\r\n                // no more calculations we hit the last point\r\n                return;\r\n            }\r\n            if (indices[0] < 0 || indices[0] > this._points.length - 1) {\r\n                console.error('noooo');\r\n            }\r\n            let p0 = this._points[indices[0]].p;\r\n            let p1 = this._points[indices[1]].p;\r\n            // calculate the position\r\n            if (this._type == CurveType.linear) {\r\n                const t0 = this._points[indices[0]].t;\r\n                const t1 = this._points[indices[1]].t;\r\n                const t = t1 - t0 == 0\r\n                    ? t1\r\n                    : MathConst.clamp((this._time - t0) / (t1 - t0), 0, 1.0);\r\n                this._position = p0 + t * (p1 - p0);\r\n            }\r\n            else if (this._type == CurveType.discreet) {\r\n                this._position = p0;\r\n            }\r\n            if (this._onUpdate) {\r\n                this._onUpdate(this._position, this);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Finds the index closest to the given time value.\r\n     * @param time\r\n     * @returns\r\n     */\r\n    findClosetTimeIndices(time) {\r\n        let startIndex = 0;\r\n        const clip = this._points;\r\n        let endIndex = clip.length - 1;\r\n        let startTime = clip[startIndex].t;\r\n        let lastTime = clip[endIndex].t;\r\n        // check time bounds\r\n        if (time <= startTime) {\r\n            return [startIndex, startIndex];\r\n        }\r\n        else if (time >= lastTime) {\r\n            return [endIndex, endIndex];\r\n        }\r\n        while (true) {\r\n            // if the current is the time we are looking for\r\n            // or the startIndex is one less then endIndex\r\n            // then we are done.\r\n            if (time == startTime || startIndex >= endIndex - 1) {\r\n                if (startIndex < endIndex) {\r\n                    return [startIndex, startIndex + 1];\r\n                }\r\n                else {\r\n                    return [startIndex, startIndex];\r\n                }\r\n            }\r\n            const midIndex = Math.floor((startIndex + endIndex) / 2.0);\r\n            const midFrame = clip[midIndex].t;\r\n            if (time > midFrame) {\r\n                startIndex = midIndex;\r\n            }\r\n            else if (time < midFrame) {\r\n                endIndex = midIndex;\r\n            }\r\n            else {\r\n                // found it in the middle\r\n                if (this._reverse) {\r\n                    return [midIndex, midIndex - 1];\r\n                }\r\n                else {\r\n                    return [midIndex, midIndex + 1];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Curve = Curve;\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/Curve.ts?");

/***/ }),

/***/ "./src/math/constants.ts":
/*!*******************************!*\
  !*** ./src/math/constants.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.clamp = exports.equals = exports.toDegrees = exports.toRadian = exports.radian = exports.degree = exports.round = exports.RANDOM = exports.epsilon = void 0;\r\nexports.epsilon = 0.00001;\r\n//\r\n// Custom math functions\r\n//\r\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n// Configuration Constants\r\nexports.RANDOM = Math.random;\r\n/**\r\n * Symmetric round\r\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\r\n *\r\n * @param {Number} a value to round\r\n */\r\nfunction round(a) {\r\n    if (a >= 0)\r\n        return Math.round(a);\r\n    return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\r\n}\r\nexports.round = round;\r\nexports.degree = Math.PI / 180;\r\nexports.radian = 180 / Math.PI;\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nfunction toRadian(a) {\r\n    return a * exports.degree;\r\n}\r\nexports.toRadian = toRadian;\r\nfunction toDegrees(a) {\r\n    return a * exports.radian;\r\n}\r\nexports.toDegrees = toDegrees;\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n    return Math.abs(a - b) <= exports.epsilon * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}\r\nexports.equals = equals;\r\n/**\r\n * Clamp a number between values\r\n * @param num\r\n * @param min\r\n * @param max\r\n * @returns\r\n */\r\nfunction clamp(num, min, max) {\r\n    let val = num < min ? min : num > max ? max : num;\r\n    return val;\r\n}\r\nexports.clamp = clamp;\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/constants.ts?");

/***/ }),

/***/ "./src/math/mat2.ts":
/*!**************************!*\
  !*** ./src/math/mat2.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ./vec2 */ \"./src/math/vec2.ts\"));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\r\nclass mat2 {\r\n    constructor(values) {\r\n        this.values = new Float32Array(4);\r\n        if (values !== undefined) {\r\n            this.init(values);\r\n        }\r\n        else {\r\n            this.setIdentity();\r\n        }\r\n    }\r\n    foreach(fn) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            fn(this.values[i]);\r\n        }\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    init(values) {\r\n        for (let i = 0; i < 4; i++) {\r\n            this.values[i] = values[i];\r\n        }\r\n        return this;\r\n    }\r\n    reset() {\r\n        for (let i = 0; i < 4; i++) {\r\n            this.values[i] = 0;\r\n        }\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new mat2();\r\n        }\r\n        for (let i = 0; i < 4; i++) {\r\n            dest.values[i] = this.values[i];\r\n        }\r\n        return dest;\r\n    }\r\n    all() {\r\n        const data = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            data[i] = this.values[i];\r\n        }\r\n        return data;\r\n    }\r\n    row(index) {\r\n        return [\r\n            this.values[index * 2 + 0],\r\n            this.values[index * 2 + 1],\r\n        ];\r\n    }\r\n    col(index) {\r\n        return [\r\n            this.values[index],\r\n            this.values[index + 2],\r\n        ];\r\n    }\r\n    equals(matrix, threshold = constants_1.epsilon) {\r\n        for (let i = 0; i < 4; i++) {\r\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    determinant() {\r\n        return this.values[0] * this.values[3] - this.values[2] * this.values[1];\r\n    }\r\n    setIdentity() {\r\n        this.values[0] = 1;\r\n        this.values[1] = 0;\r\n        this.values[2] = 0;\r\n        this.values[3] = 1;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        const temp = this.values[1];\r\n        this.values[1] = this.values[2];\r\n        this.values[2] = temp;\r\n        return this;\r\n    }\r\n    inverse() {\r\n        let det = this.determinant();\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n        const a11 = this.values[0];\r\n        this.values[0] = det * (this.values[3]);\r\n        this.values[1] = det * (-this.values[1]);\r\n        this.values[2] = det * (-this.values[2]);\r\n        this.values[3] = det * a11;\r\n        return this;\r\n    }\r\n    multiply(matrix) {\r\n        const a11 = this.values[0];\r\n        const a12 = this.values[1];\r\n        const a21 = this.values[2];\r\n        const a22 = this.values[3];\r\n        this.values[0] = a11 * matrix.at(0) + a12 * matrix.at(2);\r\n        this.values[1] = a11 * matrix.at(1) + a12 * matrix.at(3);\r\n        this.values[2] = a21 * matrix.at(0) + a22 * matrix.at(2);\r\n        this.values[3] = a21 * matrix.at(1) + a22 * matrix.at(3);\r\n        return this;\r\n    }\r\n    rotate(angle) {\r\n        const a11 = this.values[0];\r\n        const a12 = this.values[1];\r\n        const a21 = this.values[2];\r\n        const a22 = this.values[3];\r\n        const sin = Math.sin(angle);\r\n        const cos = Math.cos(angle);\r\n        this.values[0] = a11 * cos + a12 * sin;\r\n        this.values[1] = a11 * -sin + a12 * cos;\r\n        this.values[2] = a21 * cos + a22 * sin;\r\n        this.values[3] = a21 * -sin + a22 * cos;\r\n        return this;\r\n    }\r\n    multiplyVec2(vector, result) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        if (result) {\r\n            result.xy = [\r\n                x * this.values[0] + y * this.values[1],\r\n                x * this.values[2] + y * this.values[3],\r\n            ];\r\n            return result;\r\n        }\r\n        else {\r\n            return new vec2_1.default([\r\n                x * this.values[0] + y * this.values[1],\r\n                x * this.values[2] + y * this.values[3],\r\n            ]);\r\n        }\r\n    }\r\n    multiplyVec3(vector, result) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        if (result) {\r\n            result.xy = [\r\n                x * this.values[0] + y * this.values[1],\r\n                x * this.values[2] + y * this.values[3],\r\n            ];\r\n            return result;\r\n        }\r\n        else {\r\n            return new vec3_1.default([\r\n                x * this.values[0] + y * this.values[1],\r\n                x * this.values[2] + y * this.values[3], 0\r\n            ]);\r\n        }\r\n    }\r\n    scale(vector) {\r\n        const a11 = this.values[0];\r\n        const a12 = this.values[1];\r\n        const a21 = this.values[2];\r\n        const a22 = this.values[3];\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        this.values[0] = a11 * x;\r\n        this.values[1] = a12 * y;\r\n        this.values[2] = a21 * x;\r\n        this.values[3] = a22 * y;\r\n        return this;\r\n    }\r\n    scaleNumber(x, y) {\r\n        const a11 = this.values[0];\r\n        const a12 = this.values[1];\r\n        const a21 = this.values[2];\r\n        const a22 = this.values[3];\r\n        this.values[0] = a11 * x;\r\n        this.values[1] = a12 * y;\r\n        this.values[2] = a21 * x;\r\n        this.values[3] = a22 * y;\r\n        return this;\r\n    }\r\n    static product(m1, m2, result) {\r\n        const a11 = m1.at(0);\r\n        const a12 = m1.at(1);\r\n        const a21 = m1.at(2);\r\n        const a22 = m1.at(3);\r\n        if (result) {\r\n            result.init([\r\n                a11 * m2.at(0) + a12 * m2.at(2),\r\n                a11 * m2.at(1) + a12 * m2.at(3),\r\n                a21 * m2.at(0) + a22 * m2.at(2),\r\n                a21 * m2.at(1) + a22 * m2.at(3),\r\n            ]);\r\n            return result;\r\n        }\r\n        else {\r\n            return new mat2([\r\n                a11 * m2.at(0) + a12 * m2.at(2),\r\n                a11 * m2.at(1) + a12 * m2.at(3),\r\n                a21 * m2.at(0) + a22 * m2.at(2),\r\n                a21 * m2.at(1) + a22 * m2.at(3),\r\n            ]);\r\n        }\r\n    }\r\n}\r\nexports[\"default\"] = mat2;\r\nmat2.identity = new mat2().setIdentity();\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat2.ts?");

/***/ }),

/***/ "./src/math/mat3.ts":
/*!**************************!*\
  !*** ./src/math/mat3.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst mat4_1 = __importDefault(__webpack_require__(/*! ./mat4 */ \"./src/math/mat4.ts\"));\r\nconst quat_1 = __importDefault(__webpack_require__(/*! ./quat */ \"./src/math/quat.ts\"));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ./vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nclass mat3 {\r\n    constructor(values) {\r\n        this.values = new Float32Array(9);\r\n        if (values !== undefined) {\r\n            this.init(values);\r\n        }\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    init(values) {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.values[i] = values[i];\r\n        }\r\n        return this;\r\n    }\r\n    reset() {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.values[i] = 0;\r\n        }\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new mat3();\r\n        }\r\n        for (let i = 0; i < 9; i++) {\r\n            dest.values[i] = this.values[i];\r\n        }\r\n        return dest;\r\n    }\r\n    all() {\r\n        const data = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            data[i] = this.values[i];\r\n        }\r\n        return data;\r\n    }\r\n    row(index) {\r\n        return [\r\n            this.values[index * 3 + 0],\r\n            this.values[index * 3 + 1],\r\n            this.values[index * 3 + 2],\r\n        ];\r\n    }\r\n    col(index) {\r\n        return [\r\n            this.values[index],\r\n            this.values[index + 3],\r\n            this.values[index + 6],\r\n        ];\r\n    }\r\n    equals(matrix, threshold = constants_1.epsilon) {\r\n        for (let i = 0; i < 9; i++) {\r\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    determinant() {\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a10 = this.values[3];\r\n        const a11 = this.values[4];\r\n        const a12 = this.values[5];\r\n        const a20 = this.values[6];\r\n        const a21 = this.values[7];\r\n        const a22 = this.values[8];\r\n        const det01 = a22 * a11 - a12 * a21;\r\n        const det11 = -a22 * a10 + a12 * a20;\r\n        const det21 = a21 * a10 - a11 * a20;\r\n        return a00 * det01 + a01 * det11 + a02 * det21;\r\n    }\r\n    setIdentity() {\r\n        this.values[0] = 1;\r\n        this.values[1] = 0;\r\n        this.values[2] = 0;\r\n        this.values[3] = 0;\r\n        this.values[4] = 1;\r\n        this.values[5] = 0;\r\n        this.values[6] = 0;\r\n        this.values[7] = 0;\r\n        this.values[8] = 1;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        const temp01 = this.values[1];\r\n        const temp02 = this.values[2];\r\n        const temp12 = this.values[5];\r\n        this.values[1] = this.values[3];\r\n        this.values[2] = this.values[6];\r\n        this.values[3] = temp01;\r\n        this.values[5] = this.values[7];\r\n        this.values[6] = temp02;\r\n        this.values[7] = temp12;\r\n        return this;\r\n    }\r\n    inverse() {\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a10 = this.values[3];\r\n        const a11 = this.values[4];\r\n        const a12 = this.values[5];\r\n        const a20 = this.values[6];\r\n        const a21 = this.values[7];\r\n        const a22 = this.values[8];\r\n        const det01 = a22 * a11 - a12 * a21;\r\n        const det11 = -a22 * a10 + a12 * a20;\r\n        const det21 = a21 * a10 - a11 * a20;\r\n        let det = a00 * det01 + a01 * det11 + a02 * det21;\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n        this.values[0] = det01 * det;\r\n        this.values[1] = (-a22 * a01 + a02 * a21) * det;\r\n        this.values[2] = (a12 * a01 - a02 * a11) * det;\r\n        this.values[3] = det11 * det;\r\n        this.values[4] = (a22 * a00 - a02 * a20) * det;\r\n        this.values[5] = (-a12 * a00 + a02 * a10) * det;\r\n        this.values[6] = det21 * det;\r\n        this.values[7] = (-a21 * a00 + a01 * a20) * det;\r\n        this.values[8] = (a11 * a00 - a01 * a10) * det;\r\n        return this;\r\n    }\r\n    multiply(matrix) {\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a10 = this.values[3];\r\n        const a11 = this.values[4];\r\n        const a12 = this.values[5];\r\n        const a20 = this.values[6];\r\n        const a21 = this.values[7];\r\n        const a22 = this.values[8];\r\n        const b00 = matrix.at(0);\r\n        const b01 = matrix.at(1);\r\n        const b02 = matrix.at(2);\r\n        const b10 = matrix.at(3);\r\n        const b11 = matrix.at(4);\r\n        const b12 = matrix.at(5);\r\n        const b20 = matrix.at(6);\r\n        const b21 = matrix.at(7);\r\n        const b22 = matrix.at(8);\r\n        this.values[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n        this.values[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n        this.values[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n        this.values[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n        this.values[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n        this.values[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n        this.values[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n        this.values[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n        this.values[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n        return this;\r\n    }\r\n    multiplyVec2(vector, result) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        if (result) {\r\n            result.xy = [\r\n                x * this.values[0] + y * this.values[3] + this.values[6],\r\n                x * this.values[1] + y * this.values[4] + this.values[7],\r\n            ];\r\n            return result;\r\n        }\r\n        else {\r\n            return new vec2_1.default([\r\n                x * this.values[0] + y * this.values[3] + this.values[6],\r\n                x * this.values[1] + y * this.values[4] + this.values[7],\r\n            ]);\r\n        }\r\n    }\r\n    multiplyVec3(vector, result) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z;\r\n        if (result) {\r\n            result.xyz = [\r\n                x * this.values[0] + y * this.values[3] + z * this.values[6],\r\n                x * this.values[1] + y * this.values[4] + z * this.values[7],\r\n                x * this.values[2] + y * this.values[5] + z * this.values[8],\r\n            ];\r\n            return result;\r\n        }\r\n        else {\r\n            return new vec3_1.default([\r\n                x * this.values[0] + y * this.values[3] + z * this.values[6],\r\n                x * this.values[1] + y * this.values[4] + z * this.values[7],\r\n                x * this.values[2] + y * this.values[5] + z * this.values[8],\r\n            ]);\r\n        }\r\n    }\r\n    toMat4(result) {\r\n        if (result) {\r\n            result.init([\r\n                this.values[0],\r\n                this.values[1],\r\n                this.values[2],\r\n                0,\r\n                this.values[3],\r\n                this.values[4],\r\n                this.values[5],\r\n                0,\r\n                this.values[6],\r\n                this.values[7],\r\n                this.values[8],\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                1,\r\n            ]);\r\n            return result;\r\n        }\r\n        else {\r\n            return new mat4_1.default([\r\n                this.values[0],\r\n                this.values[1],\r\n                this.values[2],\r\n                0,\r\n                this.values[3],\r\n                this.values[4],\r\n                this.values[5],\r\n                0,\r\n                this.values[6],\r\n                this.values[7],\r\n                this.values[8],\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                1,\r\n            ]);\r\n        }\r\n    }\r\n    toQuat() {\r\n        const m00 = this.values[0];\r\n        const m01 = this.values[1];\r\n        const m02 = this.values[2];\r\n        const m10 = this.values[3];\r\n        const m11 = this.values[4];\r\n        const m12 = this.values[5];\r\n        const m20 = this.values[6];\r\n        const m21 = this.values[7];\r\n        const m22 = this.values[8];\r\n        const fourXSquaredMinus1 = m00 - m11 - m22;\r\n        const fourYSquaredMinus1 = m11 - m00 - m22;\r\n        const fourZSquaredMinus1 = m22 - m00 - m11;\r\n        const fourWSquaredMinus1 = m00 + m11 + m22;\r\n        let biggestIndex = 0;\r\n        let fourBiggestSquaredMinus1 = fourWSquaredMinus1;\r\n        if (fourXSquaredMinus1 > fourBiggestSquaredMinus1) {\r\n            fourBiggestSquaredMinus1 = fourXSquaredMinus1;\r\n            biggestIndex = 1;\r\n        }\r\n        if (fourYSquaredMinus1 > fourBiggestSquaredMinus1) {\r\n            fourBiggestSquaredMinus1 = fourYSquaredMinus1;\r\n            biggestIndex = 2;\r\n        }\r\n        if (fourZSquaredMinus1 > fourBiggestSquaredMinus1) {\r\n            fourBiggestSquaredMinus1 = fourZSquaredMinus1;\r\n            biggestIndex = 3;\r\n        }\r\n        const biggestVal = Math.sqrt(fourBiggestSquaredMinus1 + 1) * 0.5;\r\n        const mult = 0.25 / biggestVal;\r\n        const result = new quat_1.default();\r\n        switch (biggestIndex) {\r\n            case 0:\r\n                result.w = biggestVal;\r\n                result.x = (m12 - m21) * mult;\r\n                result.y = (m20 - m02) * mult;\r\n                result.z = (m01 - m10) * mult;\r\n                break;\r\n            case 1:\r\n                result.w = (m12 - m21) * mult;\r\n                result.x = biggestVal;\r\n                result.y = (m01 + m10) * mult;\r\n                result.z = (m20 + m02) * mult;\r\n                break;\r\n            case 2:\r\n                result.w = (m20 - m02) * mult;\r\n                result.x = (m01 + m10) * mult;\r\n                result.y = biggestVal;\r\n                result.z = (m12 + m21) * mult;\r\n                break;\r\n            case 3:\r\n                result.w = (m01 - m10) * mult;\r\n                result.x = (m20 + m02) * mult;\r\n                result.y = (m12 + m21) * mult;\r\n                result.z = biggestVal;\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n    rotate(angle, axis) {\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let length = Math.sqrt(x * x + y * y + z * z);\r\n        if (!length) {\r\n            return null;\r\n        }\r\n        if (length !== 1) {\r\n            length = 1 / length;\r\n            x *= length;\r\n            y *= length;\r\n            z *= length;\r\n        }\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n        const t = 1.0 - c;\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a10 = this.values[4];\r\n        const a11 = this.values[5];\r\n        const a12 = this.values[6];\r\n        const a20 = this.values[8];\r\n        const a21 = this.values[9];\r\n        const a22 = this.values[10];\r\n        const b00 = x * x * t + c;\r\n        const b01 = y * x * t + z * s;\r\n        const b02 = z * x * t - y * s;\r\n        const b10 = x * y * t - z * s;\r\n        const b11 = y * y * t + c;\r\n        const b12 = z * y * t + x * s;\r\n        const b20 = x * z * t + y * s;\r\n        const b21 = y * z * t - x * s;\r\n        const b22 = z * z * t + c;\r\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        this.values[3] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        this.values[4] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        this.values[5] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        this.values[6] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        this.values[7] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        this.values[8] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        return this;\r\n    }\r\n    static product(m1, m2, result) {\r\n        const a00 = m1.at(0);\r\n        const a01 = m1.at(1);\r\n        const a02 = m1.at(2);\r\n        const a10 = m1.at(3);\r\n        const a11 = m1.at(4);\r\n        const a12 = m1.at(5);\r\n        const a20 = m1.at(6);\r\n        const a21 = m1.at(7);\r\n        const a22 = m1.at(8);\r\n        const b00 = m2.at(0);\r\n        const b01 = m2.at(1);\r\n        const b02 = m2.at(2);\r\n        const b10 = m2.at(3);\r\n        const b11 = m2.at(4);\r\n        const b12 = m2.at(5);\r\n        const b20 = m2.at(6);\r\n        const b21 = m2.at(7);\r\n        const b22 = m2.at(8);\r\n        if (result) {\r\n            result.init([\r\n                b00 * a00 + b01 * a10 + b02 * a20,\r\n                b00 * a01 + b01 * a11 + b02 * a21,\r\n                b00 * a02 + b01 * a12 + b02 * a22,\r\n                b10 * a00 + b11 * a10 + b12 * a20,\r\n                b10 * a01 + b11 * a11 + b12 * a21,\r\n                b10 * a02 + b11 * a12 + b12 * a22,\r\n                b20 * a00 + b21 * a10 + b22 * a20,\r\n                b20 * a01 + b21 * a11 + b22 * a21,\r\n                b20 * a02 + b21 * a12 + b22 * a22,\r\n            ]);\r\n            return result;\r\n        }\r\n        else {\r\n            return new mat3([\r\n                b00 * a00 + b01 * a10 + b02 * a20,\r\n                b00 * a01 + b01 * a11 + b02 * a21,\r\n                b00 * a02 + b01 * a12 + b02 * a22,\r\n                b10 * a00 + b11 * a10 + b12 * a20,\r\n                b10 * a01 + b11 * a11 + b12 * a21,\r\n                b10 * a02 + b11 * a12 + b12 * a22,\r\n                b20 * a00 + b21 * a10 + b22 * a20,\r\n                b20 * a01 + b21 * a11 + b22 * a21,\r\n                b20 * a02 + b21 * a12 + b22 * a22,\r\n            ]);\r\n        }\r\n    }\r\n}\r\nexports[\"default\"] = mat3;\r\nmat3.identity = new mat3().setIdentity();\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat3.ts?");

/***/ }),

/***/ "./src/math/mat4.ts":
/*!**************************!*\
  !*** ./src/math/mat4.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst mat3_1 = __importDefault(__webpack_require__(/*! ./mat3 */ \"./src/math/mat3.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ./vec4 */ \"./src/math/vec4.ts\"));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nclass mat4 {\r\n    constructor(values) {\r\n        this.values = new Float32Array(16);\r\n        if (values !== undefined) {\r\n            this.init(values);\r\n        }\r\n        else {\r\n            this.setIdentity();\r\n        }\r\n    }\r\n    getValues() {\r\n        return this.values;\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    init(values) {\r\n        for (let i = 0; i < 16; i++) {\r\n            this.values[i] = values[i];\r\n        }\r\n        return this;\r\n    }\r\n    reset() {\r\n        for (let i = 0; i < 16; i++) {\r\n            this.values[i] = 0;\r\n        }\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new mat4();\r\n        }\r\n        for (let i = 0; i < 16; i++) {\r\n            dest.values[i] = this.values[i];\r\n        }\r\n        return dest;\r\n    }\r\n    all() {\r\n        const data = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            data[i] = this.values[i];\r\n        }\r\n        return data;\r\n    }\r\n    row(index) {\r\n        return [\r\n            this.values[index * 4 + 0],\r\n            this.values[index * 4 + 1],\r\n            this.values[index * 4 + 2],\r\n            this.values[index * 4 + 3],\r\n        ];\r\n    }\r\n    col(index) {\r\n        return [\r\n            this.values[index],\r\n            this.values[index + 4],\r\n            this.values[index + 8],\r\n            this.values[index + 12],\r\n        ];\r\n    }\r\n    equals(matrix, threshold = constants_1.epsilon) {\r\n        for (let i = 0; i < 16; i++) {\r\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    determinant() {\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a03 = this.values[3];\r\n        const a10 = this.values[4];\r\n        const a11 = this.values[5];\r\n        const a12 = this.values[6];\r\n        const a13 = this.values[7];\r\n        const a20 = this.values[8];\r\n        const a21 = this.values[9];\r\n        const a22 = this.values[10];\r\n        const a23 = this.values[11];\r\n        const a30 = this.values[12];\r\n        const a31 = this.values[13];\r\n        const a32 = this.values[14];\r\n        const a33 = this.values[15];\r\n        const det00 = a00 * a11 - a01 * a10;\r\n        const det01 = a00 * a12 - a02 * a10;\r\n        const det02 = a00 * a13 - a03 * a10;\r\n        const det03 = a01 * a12 - a02 * a11;\r\n        const det04 = a01 * a13 - a03 * a11;\r\n        const det05 = a02 * a13 - a03 * a12;\r\n        const det06 = a20 * a31 - a21 * a30;\r\n        const det07 = a20 * a32 - a22 * a30;\r\n        const det08 = a20 * a33 - a23 * a30;\r\n        const det09 = a21 * a32 - a22 * a31;\r\n        const det10 = a21 * a33 - a23 * a31;\r\n        const det11 = a22 * a33 - a23 * a32;\r\n        return (det00 * det11 -\r\n            det01 * det10 +\r\n            det02 * det09 +\r\n            det03 * det08 -\r\n            det04 * det07 +\r\n            det05 * det06);\r\n    }\r\n    setIdentity() {\r\n        this.values[0] = 1;\r\n        this.values[1] = 0;\r\n        this.values[2] = 0;\r\n        this.values[3] = 0;\r\n        this.values[4] = 0;\r\n        this.values[5] = 1;\r\n        this.values[6] = 0;\r\n        this.values[7] = 0;\r\n        this.values[8] = 0;\r\n        this.values[9] = 0;\r\n        this.values[10] = 1;\r\n        this.values[11] = 0;\r\n        this.values[12] = 0;\r\n        this.values[13] = 0;\r\n        this.values[14] = 0;\r\n        this.values[15] = 1;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        const temp01 = this.values[1];\r\n        const temp02 = this.values[2];\r\n        const temp03 = this.values[3];\r\n        const temp12 = this.values[6];\r\n        const temp13 = this.values[7];\r\n        const temp23 = this.values[11];\r\n        this.values[1] = this.values[4];\r\n        this.values[2] = this.values[8];\r\n        this.values[3] = this.values[12];\r\n        this.values[4] = temp01;\r\n        this.values[6] = this.values[9];\r\n        this.values[7] = this.values[13];\r\n        this.values[8] = temp02;\r\n        this.values[9] = temp12;\r\n        this.values[11] = this.values[14];\r\n        this.values[12] = temp03;\r\n        this.values[13] = temp13;\r\n        this.values[14] = temp23;\r\n        return this;\r\n    }\r\n    inverse() {\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a03 = this.values[3];\r\n        const a10 = this.values[4];\r\n        const a11 = this.values[5];\r\n        const a12 = this.values[6];\r\n        const a13 = this.values[7];\r\n        const a20 = this.values[8];\r\n        const a21 = this.values[9];\r\n        const a22 = this.values[10];\r\n        const a23 = this.values[11];\r\n        const a30 = this.values[12];\r\n        const a31 = this.values[13];\r\n        const a32 = this.values[14];\r\n        const a33 = this.values[15];\r\n        const det00 = a00 * a11 - a01 * a10;\r\n        const det01 = a00 * a12 - a02 * a10;\r\n        const det02 = a00 * a13 - a03 * a10;\r\n        const det03 = a01 * a12 - a02 * a11;\r\n        const det04 = a01 * a13 - a03 * a11;\r\n        const det05 = a02 * a13 - a03 * a12;\r\n        const det06 = a20 * a31 - a21 * a30;\r\n        const det07 = a20 * a32 - a22 * a30;\r\n        const det08 = a20 * a33 - a23 * a30;\r\n        const det09 = a21 * a32 - a22 * a31;\r\n        const det10 = a21 * a33 - a23 * a31;\r\n        const det11 = a22 * a33 - a23 * a32;\r\n        let det = det00 * det11 -\r\n            det01 * det10 +\r\n            det02 * det09 +\r\n            det03 * det08 -\r\n            det04 * det07 +\r\n            det05 * det06;\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n        this.values[0] = (a11 * det11 - a12 * det10 + a13 * det09) * det;\r\n        this.values[1] = (-a01 * det11 + a02 * det10 - a03 * det09) * det;\r\n        this.values[2] = (a31 * det05 - a32 * det04 + a33 * det03) * det;\r\n        this.values[3] = (-a21 * det05 + a22 * det04 - a23 * det03) * det;\r\n        this.values[4] = (-a10 * det11 + a12 * det08 - a13 * det07) * det;\r\n        this.values[5] = (a00 * det11 - a02 * det08 + a03 * det07) * det;\r\n        this.values[6] = (-a30 * det05 + a32 * det02 - a33 * det01) * det;\r\n        this.values[7] = (a20 * det05 - a22 * det02 + a23 * det01) * det;\r\n        this.values[8] = (a10 * det10 - a11 * det08 + a13 * det06) * det;\r\n        this.values[9] = (-a00 * det10 + a01 * det08 - a03 * det06) * det;\r\n        this.values[10] = (a30 * det04 - a31 * det02 + a33 * det00) * det;\r\n        this.values[11] = (-a20 * det04 + a21 * det02 - a23 * det00) * det;\r\n        this.values[12] = (-a10 * det09 + a11 * det07 - a12 * det06) * det;\r\n        this.values[13] = (a00 * det09 - a01 * det07 + a02 * det06) * det;\r\n        this.values[14] = (-a30 * det03 + a31 * det01 - a32 * det00) * det;\r\n        this.values[15] = (a20 * det03 - a21 * det01 + a22 * det00) * det;\r\n        return this;\r\n    }\r\n    multiply(matrix) {\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a03 = this.values[3];\r\n        const a10 = this.values[4];\r\n        const a11 = this.values[5];\r\n        const a12 = this.values[6];\r\n        const a13 = this.values[7];\r\n        const a20 = this.values[8];\r\n        const a21 = this.values[9];\r\n        const a22 = this.values[10];\r\n        const a23 = this.values[11];\r\n        const a30 = this.values[12];\r\n        const a31 = this.values[13];\r\n        const a32 = this.values[14];\r\n        const a33 = this.values[15];\r\n        let b0 = matrix.at(0);\r\n        let b1 = matrix.at(1);\r\n        let b2 = matrix.at(2);\r\n        let b3 = matrix.at(3);\r\n        this.values[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.values[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.values[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.values[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = matrix.at(4);\r\n        b1 = matrix.at(5);\r\n        b2 = matrix.at(6);\r\n        b3 = matrix.at(7);\r\n        this.values[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.values[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.values[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.values[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = matrix.at(8);\r\n        b1 = matrix.at(9);\r\n        b2 = matrix.at(10);\r\n        b3 = matrix.at(11);\r\n        this.values[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.values[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.values[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.values[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = matrix.at(12);\r\n        b1 = matrix.at(13);\r\n        b2 = matrix.at(14);\r\n        b3 = matrix.at(15);\r\n        this.values[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.values[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.values[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.values[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return this;\r\n    }\r\n    multiplyVec3(vector, dest) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z;\r\n        if (!dest) {\r\n            dest = new vec3_1.default();\r\n        }\r\n        dest.x =\r\n            this.values[0] * x +\r\n                this.values[4] * y +\r\n                this.values[8] * z +\r\n                this.values[12];\r\n        dest.y =\r\n            this.values[1] * x +\r\n                this.values[5] * y +\r\n                this.values[9] * z +\r\n                this.values[13];\r\n        dest.z =\r\n            this.values[2] * x +\r\n                this.values[6] * y +\r\n                this.values[10] * z +\r\n                this.values[14];\r\n        return dest;\r\n    }\r\n    multiplyVec4(vector, dest) {\r\n        if (!dest) {\r\n            dest = new vec4_1.default();\r\n        }\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z;\r\n        const w = vector.w;\r\n        dest.x =\r\n            this.values[0] * x +\r\n                this.values[4] * y +\r\n                this.values[8] * z +\r\n                this.values[12] * w;\r\n        dest.y =\r\n            this.values[1] * x +\r\n                this.values[5] * y +\r\n                this.values[9] * z +\r\n                this.values[13] * w;\r\n        dest.z =\r\n            this.values[2] * x +\r\n                this.values[6] * y +\r\n                this.values[10] * z +\r\n                this.values[14] * w;\r\n        dest.w =\r\n            this.values[3] * x +\r\n                this.values[7] * y +\r\n                this.values[11] * z +\r\n                this.values[15] * w;\r\n        return dest;\r\n    }\r\n    toMat3() {\r\n        return new mat3_1.default([\r\n            this.values[0],\r\n            this.values[1],\r\n            this.values[2],\r\n            this.values[4],\r\n            this.values[5],\r\n            this.values[6],\r\n            this.values[8],\r\n            this.values[9],\r\n            this.values[10],\r\n        ]);\r\n    }\r\n    toInverseMat3() {\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a10 = this.values[4];\r\n        const a11 = this.values[5];\r\n        const a12 = this.values[6];\r\n        const a20 = this.values[8];\r\n        const a21 = this.values[9];\r\n        const a22 = this.values[10];\r\n        const det01 = a22 * a11 - a12 * a21;\r\n        const det11 = -a22 * a10 + a12 * a20;\r\n        const det21 = a21 * a10 - a11 * a20;\r\n        let det = a00 * det01 + a01 * det11 + a02 * det21;\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n        return new mat3_1.default([\r\n            det01 * det,\r\n            (-a22 * a01 + a02 * a21) * det,\r\n            (a12 * a01 - a02 * a11) * det,\r\n            det11 * det,\r\n            (a22 * a00 - a02 * a20) * det,\r\n            (-a12 * a00 + a02 * a10) * det,\r\n            det21 * det,\r\n            (-a21 * a00 + a01 * a20) * det,\r\n            (a11 * a00 - a01 * a10) * det,\r\n        ]);\r\n    }\r\n    translateLocal(vector) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z === undefined ? 0 : vector.z;\r\n        this.values[12] +=\r\n            this.values[0] * x + this.values[4] * y + this.values[8] * z;\r\n        this.values[13] +=\r\n            this.values[1] * x + this.values[5] * y + this.values[9] * z;\r\n        this.values[14] +=\r\n            this.values[2] * x + this.values[6] * y + this.values[10] * z;\r\n        this.values[15] +=\r\n            this.values[3] * x + this.values[7] * y + this.values[11] * z;\r\n        return this;\r\n    }\r\n    translate(vector) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z === undefined ? 0 : vector.z;\r\n        this.values[12] = x;\r\n        this.values[13] = y;\r\n        this.values[14] = z;\r\n        return this;\r\n    }\r\n    scaleComp(x, y, z) {\r\n        this.values[0] *= x;\r\n        this.values[1] *= x;\r\n        this.values[2] *= x;\r\n        this.values[3] *= x;\r\n        this.values[4] *= y;\r\n        this.values[5] *= y;\r\n        this.values[6] *= y;\r\n        this.values[7] *= y;\r\n        this.values[8] *= z;\r\n        this.values[9] *= z;\r\n        this.values[10] *= z;\r\n        this.values[11] *= z;\r\n        return this;\r\n    }\r\n    scale(vector) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z === undefined ? 1 : vector.z;\r\n        return this.scaleComp(x, y, z);\r\n    }\r\n    rotate(angle, axis) {\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let length = Math.sqrt(x * x + y * y + z * z);\r\n        if (!length) {\r\n            return null;\r\n        }\r\n        if (length !== 1) {\r\n            length = 1 / length;\r\n            x *= length;\r\n            y *= length;\r\n            z *= length;\r\n        }\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n        const t = 1.0 - c;\r\n        const a00 = this.values[0];\r\n        const a01 = this.values[1];\r\n        const a02 = this.values[2];\r\n        const a03 = this.values[3];\r\n        const a10 = this.values[4];\r\n        const a11 = this.values[5];\r\n        const a12 = this.values[6];\r\n        const a13 = this.values[7];\r\n        const a20 = this.values[8];\r\n        const a21 = this.values[9];\r\n        const a22 = this.values[10];\r\n        const a23 = this.values[11];\r\n        const b00 = x * x * t + c;\r\n        const b01 = y * x * t + z * s;\r\n        const b02 = z * x * t - y * s;\r\n        const b10 = x * y * t - z * s;\r\n        const b11 = y * y * t + c;\r\n        const b12 = z * y * t + x * s;\r\n        const b20 = x * z * t + y * s;\r\n        const b21 = y * z * t - x * s;\r\n        const b22 = z * z * t + c;\r\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        this.values[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        this.values[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        this.values[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        this.values[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        this.values[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        this.values[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        this.values[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        this.values[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        this.values[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return this;\r\n    }\r\n    static frustum(left, right, bottom, top, near, far) {\r\n        const rl = right - left;\r\n        const tb = top - bottom;\r\n        const fn = far - near;\r\n        return new mat4([\r\n            (near * 2) / rl,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            (near * 2) / tb,\r\n            0,\r\n            0,\r\n            (right + left) / rl,\r\n            (top + bottom) / tb,\r\n            -(far + near) / fn,\r\n            -1,\r\n            0,\r\n            0,\r\n            -(far * near * 2) / fn,\r\n            0,\r\n        ]);\r\n    }\r\n    static perspective(fov, aspect, near, far) {\r\n        const top = near * Math.tan((fov * Math.PI) / 360.0);\r\n        const right = top * aspect;\r\n        return mat4.frustum(-right, right, -top, top, near, far);\r\n    }\r\n    static orthographic(left, right, bottom, top, near, far) {\r\n        const rl = right - left;\r\n        const tb = top - bottom;\r\n        const fn = far - near;\r\n        return new mat4([\r\n            2 / rl,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            2 / tb,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            -2 / fn,\r\n            0,\r\n            -(left + right) / rl,\r\n            -(top + bottom) / tb,\r\n            -(far + near) / fn,\r\n            1,\r\n        ]);\r\n    }\r\n    static lookAt(position, target, up = vec3_1.default.up) {\r\n        if (position.equals(target)) {\r\n            return this.identity;\r\n        }\r\n        const z = vec3_1.default.difference(position, target).normalize();\r\n        const x = vec3_1.default.cross(up, z).normalize();\r\n        const y = vec3_1.default.cross(z, x).normalize();\r\n        return new mat4([\r\n            x.x,\r\n            y.x,\r\n            z.x,\r\n            0,\r\n            x.y,\r\n            y.y,\r\n            z.y,\r\n            0,\r\n            x.z,\r\n            y.z,\r\n            z.z,\r\n            0,\r\n            -vec3_1.default.dot(x, position),\r\n            -vec3_1.default.dot(y, position),\r\n            -vec3_1.default.dot(z, position),\r\n            1,\r\n        ]);\r\n    }\r\n    static product(m1, m2, result) {\r\n        const a00 = m1.at(0);\r\n        const a01 = m1.at(1);\r\n        const a02 = m1.at(2);\r\n        const a03 = m1.at(3);\r\n        const a10 = m1.at(4);\r\n        const a11 = m1.at(5);\r\n        const a12 = m1.at(6);\r\n        const a13 = m1.at(7);\r\n        const a20 = m1.at(8);\r\n        const a21 = m1.at(9);\r\n        const a22 = m1.at(10);\r\n        const a23 = m1.at(11);\r\n        const a30 = m1.at(12);\r\n        const a31 = m1.at(13);\r\n        const a32 = m1.at(14);\r\n        const a33 = m1.at(15);\r\n        const b00 = m2.at(0);\r\n        const b01 = m2.at(1);\r\n        const b02 = m2.at(2);\r\n        const b03 = m2.at(3);\r\n        const b10 = m2.at(4);\r\n        const b11 = m2.at(5);\r\n        const b12 = m2.at(6);\r\n        const b13 = m2.at(7);\r\n        const b20 = m2.at(8);\r\n        const b21 = m2.at(9);\r\n        const b22 = m2.at(10);\r\n        const b23 = m2.at(11);\r\n        const b30 = m2.at(12);\r\n        const b31 = m2.at(13);\r\n        const b32 = m2.at(14);\r\n        const b33 = m2.at(15);\r\n        if (result) {\r\n            result.init([\r\n                b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n                b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n                b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n                b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n                b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n                b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n                b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n                b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n                b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n                b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n                b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n                b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n                b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n                b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n                b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n                b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n            ]);\r\n            return result;\r\n        }\r\n        else {\r\n            return new mat4([\r\n                b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n                b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n                b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n                b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n                b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n                b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n                b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n                b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n                b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n                b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n                b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n                b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n                b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n                b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n                b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n                b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n            ]);\r\n        }\r\n    }\r\n}\r\nexports[\"default\"] = mat4;\r\nmat4.identity = new mat4().setIdentity();\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat4.ts?");

/***/ }),

/***/ "./src/math/quat.ts":
/*!**************************!*\
  !*** ./src/math/quat.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst mat3_1 = __importDefault(__webpack_require__(/*! ./mat3 */ \"./src/math/mat3.ts\"));\r\nconst mat4_1 = __importDefault(__webpack_require__(/*! ./mat4 */ \"./src/math/mat4.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nclass quat {\r\n    get x() {\r\n        return this.values[0];\r\n    }\r\n    get y() {\r\n        return this.values[1];\r\n    }\r\n    get z() {\r\n        return this.values[2];\r\n    }\r\n    get w() {\r\n        return this.values[3];\r\n    }\r\n    get xy() {\r\n        return [\r\n            this.values[0],\r\n            this.values[1],\r\n        ];\r\n    }\r\n    get xyz() {\r\n        return [\r\n            this.values[0],\r\n            this.values[1],\r\n            this.values[2],\r\n        ];\r\n    }\r\n    get xyzw() {\r\n        return [\r\n            this.values[0],\r\n            this.values[1],\r\n            this.values[2],\r\n            this.values[3],\r\n        ];\r\n    }\r\n    set x(value) {\r\n        this.values[0] = value;\r\n    }\r\n    set y(value) {\r\n        this.values[1] = value;\r\n    }\r\n    set z(value) {\r\n        this.values[2] = value;\r\n    }\r\n    set w(value) {\r\n        this.values[3] = value;\r\n    }\r\n    set xy(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n    }\r\n    set xyz(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n    }\r\n    set xyzw(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n        this.values[3] = values[3];\r\n    }\r\n    constructor(values) {\r\n        this.values = new Float32Array(4);\r\n        if (values !== undefined) {\r\n            this.xyzw = values;\r\n        }\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    reset() {\r\n        for (let i = 0; i < 4; i++) {\r\n            this.values[i] = 0;\r\n        }\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new quat();\r\n        }\r\n        for (let i = 0; i < 4; i++) {\r\n            dest.values[i] = this.values[i];\r\n        }\r\n        return dest;\r\n    }\r\n    roll() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        return Math.atan2(2.0 * (x * y + w * z), w * w + x * x - y * y - z * z);\r\n    }\r\n    pitch() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        return Math.atan2(2.0 * (y * z + w * x), w * w - x * x - y * y + z * z);\r\n    }\r\n    yaw() {\r\n        return Math.asin(2.0 * (this.x * this.z - this.w * this.y));\r\n    }\r\n    equals(vector, threshold = constants_1.epsilon) {\r\n        for (let i = 0; i < 4; i++) {\r\n            if (Math.abs(this.values[i] - vector.at(i)) > threshold) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    setIdentity() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.w = 1;\r\n        return this;\r\n    }\r\n    calculateW() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        this.w = -(Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z)));\r\n        return this;\r\n    }\r\n    inverse() {\r\n        const dot = quat.dot(this, this);\r\n        if (!dot) {\r\n            this.xyzw = [0, 0, 0, 0];\r\n            return this;\r\n        }\r\n        const invDot = dot ? 1.0 / dot : 0;\r\n        this.x *= -invDot;\r\n        this.y *= -invDot;\r\n        this.z *= -invDot;\r\n        this.w *= invDot;\r\n        return this;\r\n    }\r\n    conjugate() {\r\n        this.values[0] *= -1;\r\n        this.values[1] *= -1;\r\n        this.values[2] *= -1;\r\n        return this;\r\n    }\r\n    length() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    }\r\n    normalize(dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        let length = Math.sqrt(x * x + y * y + z * z + w * w);\r\n        if (!length) {\r\n            dest.x = 0;\r\n            dest.y = 0;\r\n            dest.z = 0;\r\n            dest.w = 0;\r\n            return dest;\r\n        }\r\n        length = 1 / length;\r\n        dest.x = x * length;\r\n        dest.y = y * length;\r\n        dest.z = z * length;\r\n        dest.w = w * length;\r\n        return dest;\r\n    }\r\n    add(other) {\r\n        for (let i = 0; i < 4; i++) {\r\n            this.values[i] += other.at(i);\r\n        }\r\n        return this;\r\n    }\r\n    multiply(other) {\r\n        const q1x = this.values[0];\r\n        const q1y = this.values[1];\r\n        const q1z = this.values[2];\r\n        const q1w = this.values[3];\r\n        const q2x = other.x;\r\n        const q2y = other.y;\r\n        const q2z = other.z;\r\n        const q2w = other.w;\r\n        this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\r\n        this.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\r\n        this.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\r\n        this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\r\n        return this;\r\n    }\r\n    multiplyVec3(vector, dest) {\r\n        if (!dest) {\r\n            dest = new vec3_1.default();\r\n        }\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z;\r\n        const qx = this.x;\r\n        const qy = this.y;\r\n        const qz = this.z;\r\n        const qw = this.w;\r\n        const ix = qw * x + qy * z - qz * y;\r\n        const iy = qw * y + qz * x - qx * z;\r\n        const iz = qw * z + qx * y - qy * x;\r\n        const iw = -qx * x - qy * y - qz * z;\r\n        dest.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        dest.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        dest.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n        return dest;\r\n    }\r\n    toMat3(dest) {\r\n        if (!dest) {\r\n            dest = new mat3_1.default();\r\n        }\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        dest.init([\r\n            1 - (yy + zz),\r\n            xy + wz,\r\n            xz - wy,\r\n            xy - wz,\r\n            1 - (xx + zz),\r\n            yz + wx,\r\n            xz + wy,\r\n            yz - wx,\r\n            1 - (xx + yy),\r\n        ]);\r\n        return dest;\r\n    }\r\n    toMat4(dest) {\r\n        if (!dest) {\r\n            dest = new mat4_1.default();\r\n        }\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        dest.init([\r\n            1 - (yy + zz),\r\n            xy + wz,\r\n            xz - wy,\r\n            0,\r\n            xy - wz,\r\n            1 - (xx + zz),\r\n            yz + wx,\r\n            0,\r\n            xz + wy,\r\n            yz - wx,\r\n            1 - (xx + yy),\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            1,\r\n        ]);\r\n        return dest;\r\n    }\r\n    static dot(q1, q2) {\r\n        return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\r\n    }\r\n    static sum(q1, q2, dest) {\r\n        if (!dest) {\r\n            dest = new quat();\r\n        }\r\n        dest.x = q1.x + q2.x;\r\n        dest.y = q1.y + q2.y;\r\n        dest.z = q1.z + q2.z;\r\n        dest.w = q1.w + q2.w;\r\n        return dest;\r\n    }\r\n    static product(q1, q2, dest) {\r\n        if (!dest) {\r\n            dest = new quat();\r\n        }\r\n        const q1x = q1.x;\r\n        const q1y = q1.y;\r\n        const q1z = q1.z;\r\n        const q1w = q1.w;\r\n        const q2x = q2.x;\r\n        const q2y = q2.y;\r\n        const q2z = q2.z;\r\n        const q2w = q2.w;\r\n        dest.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\r\n        dest.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\r\n        dest.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\r\n        dest.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\r\n        return dest;\r\n    }\r\n    static cross(q1, q2, dest) {\r\n        if (!dest) {\r\n            dest = new quat();\r\n        }\r\n        const q1x = q1.x;\r\n        const q1y = q1.y;\r\n        const q1z = q1.z;\r\n        const q1w = q1.w;\r\n        const q2x = q2.x;\r\n        const q2y = q2.y;\r\n        const q2z = q2.z;\r\n        const q2w = q2.w;\r\n        dest.x = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\r\n        dest.y = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\r\n        dest.z = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\r\n        dest.w = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\r\n        return dest;\r\n    }\r\n    static shortMix(q1, q2, time, dest) {\r\n        if (!dest) {\r\n            dest = new quat();\r\n        }\r\n        if (time <= 0.0) {\r\n            dest.xyzw = q1.xyzw;\r\n            return dest;\r\n        }\r\n        else if (time >= 1.0) {\r\n            dest.xyzw = q2.xyzw;\r\n            return dest;\r\n        }\r\n        let cos = quat.dot(q1, q2);\r\n        const q2a = q2.copy();\r\n        if (cos < 0.0) {\r\n            q2a.inverse();\r\n            cos = -cos;\r\n        }\r\n        let k0;\r\n        let k1;\r\n        if (cos > 0.9999) {\r\n            k0 = 1 - time;\r\n            k1 = 0 + time;\r\n        }\r\n        else {\r\n            const sin = Math.sqrt(1 - cos * cos);\r\n            const angle = Math.atan2(sin, cos);\r\n            const oneOverSin = 1 / sin;\r\n            k0 = Math.sin((1 - time) * angle) * oneOverSin;\r\n            k1 = Math.sin((0 + time) * angle) * oneOverSin;\r\n        }\r\n        dest.x = k0 * q1.x + k1 * q2a.x;\r\n        dest.y = k0 * q1.y + k1 * q2a.y;\r\n        dest.z = k0 * q1.z + k1 * q2a.z;\r\n        dest.w = k0 * q1.w + k1 * q2a.w;\r\n        return dest;\r\n    }\r\n    static mix(q1, q2, time, dest) {\r\n        if (!dest) {\r\n            dest = new quat();\r\n        }\r\n        const cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\r\n        if (Math.abs(cosHalfTheta) >= 1.0) {\r\n            dest.xyzw = q1.xyzw;\r\n            return dest;\r\n        }\r\n        const halfTheta = Math.acos(cosHalfTheta);\r\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\r\n        if (Math.abs(sinHalfTheta) < 0.001) {\r\n            dest.x = q1.x * 0.5 + q2.x * 0.5;\r\n            dest.y = q1.y * 0.5 + q2.y * 0.5;\r\n            dest.z = q1.z * 0.5 + q2.z * 0.5;\r\n            dest.w = q1.w * 0.5 + q2.w * 0.5;\r\n            return dest;\r\n        }\r\n        const ratioA = Math.sin((1 - time) * halfTheta) / sinHalfTheta;\r\n        const ratioB = Math.sin(time * halfTheta) / sinHalfTheta;\r\n        dest.x = q1.x * ratioA + q2.x * ratioB;\r\n        dest.y = q1.y * ratioA + q2.y * ratioB;\r\n        dest.z = q1.z * ratioA + q2.z * ratioB;\r\n        dest.w = q1.w * ratioA + q2.w * ratioB;\r\n        return dest;\r\n    }\r\n    static fromAxisAngle(axis, angle, dest) {\r\n        if (!dest) {\r\n            dest = new quat();\r\n        }\r\n        angle *= 0.5;\r\n        const sin = Math.sin(angle);\r\n        dest.x = axis.x * sin;\r\n        dest.y = axis.y * sin;\r\n        dest.z = axis.z * sin;\r\n        dest.w = Math.cos(angle);\r\n        return dest;\r\n    }\r\n}\r\nexports[\"default\"] = quat;\r\nquat.identity = new quat().setIdentity();\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/quat.ts?");

/***/ }),

/***/ "./src/math/rect.ts":
/*!**************************!*\
  !*** ./src/math/rect.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ./vec2 */ \"./src/math/vec2.ts\"));\r\n/**\r\n * The bottom left is 0,0\r\n */\r\nclass rect {\r\n    get centerX() {\r\n        return this.left + this.width * 0.5;\r\n    }\r\n    get centerY() {\r\n        return this.top + this.height * 0.5;\r\n    }\r\n    get left() {\r\n        return this.values[0];\r\n    }\r\n    get width() {\r\n        return this.values[1];\r\n    }\r\n    get top() {\r\n        return this.values[2];\r\n    }\r\n    get height() {\r\n        return this.values[3];\r\n    }\r\n    get right() {\r\n        return this.left + this.width;\r\n    }\r\n    get bottom() {\r\n        return this.top - this.height;\r\n    }\r\n    set left(value) {\r\n        this.values[0] = value;\r\n    }\r\n    set width(value) {\r\n        this.values[1] = Math.max(value, 0);\r\n    }\r\n    set top(value) {\r\n        this.values[2] = value;\r\n    }\r\n    set height(value) {\r\n        this.values[3] = Math.max(value, 0);\r\n    }\r\n    /**\r\n     * Left, width, top, height\r\n     * @param values\r\n     */\r\n    constructor(values) {\r\n        this.values = new Float32Array(4);\r\n        if (values !== undefined) {\r\n            this.set(values[0], values[1], values[2], values[3]);\r\n        }\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    setPosition(left, top) {\r\n        this.values[0] = left;\r\n        this.values[2] = top;\r\n    }\r\n    set(left, width, top, height) {\r\n        this.values[0] = left;\r\n        this.values[1] = Math.max(width, 0);\r\n        this.values[2] = top;\r\n        this.values[3] = Math.max(height, 0);\r\n    }\r\n    reset() {\r\n        this.values[0] = 0;\r\n        this.values[1] = 0;\r\n        this.values[2] = 0;\r\n        this.values[3] = 0;\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new rect();\r\n        }\r\n        dest.left = this.left;\r\n        dest.width = this.width;\r\n        dest.top = this.top;\r\n        dest.height = this.height;\r\n        return dest;\r\n    }\r\n    pointInside(x, y) {\r\n        if (x > this.left && x < this.right) {\r\n            if (y < this.top && y > this.bottom) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * How much does the other rect overlap this rect on our left edge.\r\n     * @param other\r\n     * @returns the offset that can be added to this.left to fix the overlap.\r\n     */\r\n    edgeOverlapX(other, includeEdges) {\r\n        const b1 = this;\r\n        const b2 = other;\r\n        if (includeEdges) {\r\n            if (b1.left <= b2.left && b2.left <= b1.right) {\r\n                return true;\r\n            }\r\n            else if (b2.left <= b1.left && b1.left <= b2.right) {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (b1.left < b2.left && b2.left < b1.right) {\r\n                return true;\r\n            }\r\n            else if (b2.left < b1.left && b1.left < b2.right) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * How much does the other rect overlap this rect on our top or bottom edge.\r\n     * @param other\r\n     * @returns The value that can be added to this.top to correct the overlap\r\n     */\r\n    edgeOverlapY(other, includeEdges) {\r\n        const b1 = this;\r\n        const b2 = other;\r\n        if (includeEdges) {\r\n            if (b1.top >= b2.top && b1.bottom <= b2.top) {\r\n                return true;\r\n            }\r\n            else if (b2.top >= b1.top && b2.bottom <= b1.top) {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (b1.top > b2.top && b1.bottom < b2.top) {\r\n                return true;\r\n            }\r\n            else if (b2.top > b1.top && b2.bottom < b1.top) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    intersects(other) {\r\n        if (this.right > other.left && this.left < other.right) {\r\n            if (this.top > other.bottom && this.bottom < other.top) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    encapsulates(other) {\r\n        if (this.left <= other.left && this.right >= other.right) {\r\n            if (this.top >= other.top && this.bottom <= other.bottom) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    intersectionPoint(start, end) {\r\n        const topLeft = new vec2_1.default(this.left, this.top);\r\n        const topRight = new vec2_1.default(this.right, this.top);\r\n        const bottomLeft = new vec2_1.default(this.left, this.bottom);\r\n        const bottomRight = new vec2_1.default(this.right, this.bottom);\r\n        // left\r\n        let point = vec2_1.default.lineIntersectionLine(start, end, topLeft, bottomLeft);\r\n        if (point) {\r\n            return point;\r\n        }\r\n        //top\r\n        point = vec2_1.default.lineIntersectionLine(start, end, topLeft, topRight);\r\n        if (point) {\r\n            return point;\r\n        }\r\n        //bottom\r\n        point = vec2_1.default.lineIntersectionLine(start, end, bottomLeft, bottomRight);\r\n        if (point) {\r\n            return point;\r\n        }\r\n        // right\r\n        point = vec2_1.default.lineIntersectionLine(start, end, topRight, bottomRight);\r\n        if (point) {\r\n            return point;\r\n        }\r\n        return null;\r\n    }\r\n    equals(vector, threshold = constants_1.epsilon) {\r\n        if (Math.abs(this.left - vector.left) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.width - vector.width) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.top - vector.top) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.height - vector.height) > threshold) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    toString() {\r\n        return ('[' +\r\n            this.left.toFixed(5) +\r\n            ', ' +\r\n            this.top.toFixed(5) +\r\n            '] (' +\r\n            this.width.toFixed(5) +\r\n            ' X ' +\r\n            this.height.toFixed(5) +\r\n            ')');\r\n    }\r\n}\r\nexports[\"default\"] = rect;\r\n/**\r\n * Used in some calculations\r\n */\r\nrect.vec2Temp = [\r\n    new vec2_1.default(),\r\n    new vec2_1.default(),\r\n    new vec2_1.default(),\r\n    new vec2_1.default(),\r\n];\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/rect.ts?");

/***/ }),

/***/ "./src/math/vec2.ts":
/*!**************************!*\
  !*** ./src/math/vec2.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nclass vec2 {\r\n    get x() {\r\n        return this.values[0];\r\n    }\r\n    get y() {\r\n        return this.values[1];\r\n    }\r\n    get xy() {\r\n        return [this.values[0], this.values[1]];\r\n    }\r\n    set x(value) {\r\n        this.values[0] = value;\r\n    }\r\n    set y(value) {\r\n        this.values[1] = value;\r\n    }\r\n    set xy(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n    }\r\n    constructor(values, y) {\r\n        this.values = new Float32Array(2);\r\n        if (values !== undefined) {\r\n            if (typeof values === 'number') {\r\n                this.values[0] = values;\r\n            }\r\n            else if (Array.isArray(values)) {\r\n                this.xy = values;\r\n            }\r\n            if (y !== undefined) {\r\n                this.values[1] = y;\r\n            }\r\n        }\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    reset() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n    foreach(fn) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            fn(this.values[i]);\r\n        }\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new vec2();\r\n        }\r\n        dest.x = this.x;\r\n        dest.y = this.y;\r\n        return dest;\r\n    }\r\n    negate(dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        dest.x = -this.x;\r\n        dest.y = -this.y;\r\n        return dest;\r\n    }\r\n    equals(vector, threshold = constants_1.epsilon) {\r\n        if (Math.abs(this.x - vector.x) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.y - vector.y) > threshold) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.squaredLength());\r\n    }\r\n    squaredLength() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        return x * x + y * y;\r\n    }\r\n    add(vector) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n        return this;\r\n    }\r\n    subtract(vector, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        dest.x = this.x - vector.x;\r\n        dest.y = this.y - vector.y;\r\n        return dest;\r\n    }\r\n    multiply(vector) {\r\n        this.x *= vector.x;\r\n        this.y *= vector.y;\r\n        return this;\r\n    }\r\n    divide(vector) {\r\n        this.x /= vector.x;\r\n        this.y /= vector.y;\r\n        return this;\r\n    }\r\n    scale(value, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        dest.x *= value;\r\n        dest.y *= value;\r\n        return dest;\r\n    }\r\n    normalize(dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        let length = this.length();\r\n        if (length === 1) {\r\n            return this;\r\n        }\r\n        if (length === 0) {\r\n            dest.x = 0;\r\n            dest.y = 0;\r\n            return dest;\r\n        }\r\n        length = 1.0 / length;\r\n        dest.x *= length;\r\n        dest.y *= length;\r\n        return dest;\r\n    }\r\n    multiplyMat2(matrix, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        return matrix.multiplyVec2(this, dest);\r\n    }\r\n    multiplyMat3(matrix, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        return matrix.multiplyVec2(this, dest);\r\n    }\r\n    static cross(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec3_1.default();\r\n        }\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const x2 = vector2.x;\r\n        const y2 = vector2.y;\r\n        const z = x * y2 - y * x2;\r\n        dest.x = 0;\r\n        dest.y = 0;\r\n        dest.z = z;\r\n        return dest;\r\n    }\r\n    static dot(vector, vector2) {\r\n        return vector.x * vector2.x + vector.y * vector2.y;\r\n    }\r\n    static distance(vector, vector2) {\r\n        return Math.sqrt(this.squaredDistance(vector, vector2));\r\n    }\r\n    static squaredDistance(vector, vector2) {\r\n        const x = vector2.x - vector.x;\r\n        const y = vector2.y - vector.y;\r\n        return x * x + y * y;\r\n    }\r\n    static direction(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec2();\r\n        }\r\n        const x = vector.x - vector2.x;\r\n        const y = vector.y - vector2.y;\r\n        let length = Math.sqrt(x * x + y * y);\r\n        if (length === 0) {\r\n            dest.x = 0;\r\n            dest.y = 0;\r\n            return dest;\r\n        }\r\n        length = 1 / length;\r\n        dest.x = x * length;\r\n        dest.y = y * length;\r\n        return dest;\r\n    }\r\n    static mix(vector, vector2, time, dest) {\r\n        if (!dest) {\r\n            dest = new vec2();\r\n        }\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const x2 = vector2.x;\r\n        const y2 = vector2.y;\r\n        dest.x = x + time * (x2 - x);\r\n        dest.y = y + time * (y2 - y);\r\n        return dest;\r\n    }\r\n    static sum(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec2();\r\n        }\r\n        dest.x = vector.x + vector2.x;\r\n        dest.y = vector.y + vector2.y;\r\n        return dest;\r\n    }\r\n    static difference(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec2();\r\n        }\r\n        dest.x = vector.x - vector2.x;\r\n        dest.y = vector.y - vector2.y;\r\n        return dest;\r\n    }\r\n    static product(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec2();\r\n        }\r\n        dest.x = vector.x * vector2.x;\r\n        dest.y = vector.y * vector2.y;\r\n        return dest;\r\n    }\r\n    static quotient(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec2();\r\n        }\r\n        dest.x = vector.x / vector2.x;\r\n        dest.y = vector.y / vector2.y;\r\n        return dest;\r\n    }\r\n    toString() {\r\n        return this.x.toFixed(5) + ', ' + this.y.toFixed(5);\r\n    }\r\n    /**\r\n     * Where do these two lines intersect.\r\n     * @param p0\r\n     * @param p1\r\n     * @param p2\r\n     * @param p3\r\n     * @param intersectionPoint\r\n     * @returns\r\n     */\r\n    static lineIntersectionLine(p0, p1, p2, p3, intersectionPoint) {\r\n        if (!intersectionPoint) {\r\n            intersectionPoint = new vec2();\r\n        }\r\n        // returns true if the line from (a,b)->(c,d) intersects with (p,q)->(r,s)\r\n        const a = p0.x;\r\n        const b = p0.y;\r\n        const c = p1.x;\r\n        const d = p1.y;\r\n        const p = p2.x;\r\n        const q = p2.y;\r\n        const r = p3.x;\r\n        const s = p3.y;\r\n        const det = (c - a) * (s - q) - (r - p) * (d - b);\r\n        if (det === 0) {\r\n            return null;\r\n        }\r\n        const lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\r\n        const gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\r\n        const intersect = 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;\r\n        if (intersect) {\r\n            intersectionPoint.x = a + (c - a) * lambda;\r\n            intersectionPoint.y = b + (d - b) * lambda;\r\n            return intersectionPoint;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n        /*\r\n        // XNA implementation https://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\r\n        Vector2 b = a2 - a1;\r\n        Vector2 d = b2 - b1;\r\n        float bDotDPerp = b.X * d.Y - b.Y * d.X;\r\n    \r\n        // if b dot d == 0, it means the lines are parallel so have infinite intersection points\r\n        if (bDotDPerp == 0)\r\n            return false;\r\n    \r\n        Vector2 c = b1 - a1;\r\n        float t = (c.X * d.Y - c.Y * d.X) / bDotDPerp;\r\n        if (t < 0 || t > 1)\r\n            return false;\r\n    \r\n        float u = (c.X * b.Y - c.Y * b.X) / bDotDPerp;\r\n        if (u < 0 || u > 1)\r\n            return false;\r\n    \r\n        intersection = a1 + t * b;\r\n    \r\n        return true;\r\n        */\r\n    }\r\n}\r\nexports[\"default\"] = vec2;\r\nvec2.zero = new vec2([0, 0]);\r\nvec2.one = new vec2([1, 1]);\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec2.ts?");

/***/ }),

/***/ "./src/math/vec3.ts":
/*!**************************!*\
  !*** ./src/math/vec3.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst quat_1 = __importDefault(__webpack_require__(/*! ./quat */ \"./src/math/quat.ts\"));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nclass vec3 {\r\n    get x() {\r\n        return this.values[0];\r\n    }\r\n    get y() {\r\n        return this.values[1];\r\n    }\r\n    get z() {\r\n        return this.values[2];\r\n    }\r\n    get xy() {\r\n        return [this.values[0], this.values[1]];\r\n    }\r\n    get xyz() {\r\n        return [this.values[0], this.values[1], this.values[2]];\r\n    }\r\n    set x(value) {\r\n        this.values[0] = value;\r\n    }\r\n    set y(value) {\r\n        this.values[1] = value;\r\n    }\r\n    set z(value) {\r\n        this.values[2] = value;\r\n    }\r\n    set xy(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n    }\r\n    set xyz(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n    }\r\n    constructor(values, y, z) {\r\n        this.values = new Float32Array(3);\r\n        if (values !== undefined) {\r\n            if (typeof values === 'number') {\r\n                this.values[0] = this.values[1] = this.values[2] = values;\r\n            }\r\n            else if (Array.isArray(values)) {\r\n                this.xyz = values;\r\n            }\r\n            if (y !== undefined) {\r\n                this.values[1] = y;\r\n            }\r\n            if (z !== undefined) {\r\n                this.values[2] = z;\r\n            }\r\n        }\r\n        else {\r\n            this.xyz = [0, 0, 0];\r\n        }\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    reset() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n    }\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    foreach(fn) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            fn(this.values[i]);\r\n        }\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        dest.x = this.x;\r\n        dest.y = this.y;\r\n        dest.z = this.z;\r\n        return dest;\r\n    }\r\n    negate(dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        dest.x = -this.x;\r\n        dest.y = -this.y;\r\n        dest.z = -this.z;\r\n        return dest;\r\n    }\r\n    equals(vector, threshold = constants_1.epsilon) {\r\n        if (Math.abs(this.x - vector.x) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.y - vector.y) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.z - vector.z) > threshold) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.squaredLength());\r\n    }\r\n    squaredLength() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        return x * x + y * y + z * z;\r\n    }\r\n    clamp(min, max) {\r\n        this.x = (0, constants_1.clamp)(this.x, min.x, max.x);\r\n        this.y = (0, constants_1.clamp)(this.y, min.y, max.y);\r\n        this.z = (0, constants_1.clamp)(this.z, min.z, max.z);\r\n        return this;\r\n    }\r\n    add(vector) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n        this.z += vector.z;\r\n        return this;\r\n    }\r\n    subtract(vector) {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n        this.z -= vector.z;\r\n        return this;\r\n    }\r\n    multiply(vector) {\r\n        this.x *= vector.x;\r\n        this.y *= vector.y;\r\n        this.z *= vector.z;\r\n        return this;\r\n    }\r\n    divide(vector) {\r\n        this.x /= vector.x;\r\n        this.y /= vector.y;\r\n        this.z /= vector.z;\r\n        return this;\r\n    }\r\n    scale(value, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        dest.x = this.x * value;\r\n        dest.y = this.y * value;\r\n        dest.z = this.z * value;\r\n        return dest;\r\n    }\r\n    normalize(dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        let length = this.length();\r\n        if (length === 1) {\r\n            return this;\r\n        }\r\n        if (length === 0) {\r\n            dest.x = 0;\r\n            dest.y = 0;\r\n            dest.z = 0;\r\n            return dest;\r\n        }\r\n        length = 1.0 / length;\r\n        dest.x *= length;\r\n        dest.y *= length;\r\n        dest.z *= length;\r\n        return dest;\r\n    }\r\n    multiplyByMat3(matrix, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        return matrix.multiplyVec3(this, dest);\r\n    }\r\n    multiplyByQuat(quaternion, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        return quaternion.multiplyVec3(this, dest);\r\n    }\r\n    toQuat(dest) {\r\n        if (!dest) {\r\n            dest = new quat_1.default();\r\n        }\r\n        const c = new vec3();\r\n        const s = new vec3();\r\n        c.x = Math.cos(this.x * 0.5);\r\n        s.x = Math.sin(this.x * 0.5);\r\n        c.y = Math.cos(this.y * 0.5);\r\n        s.y = Math.sin(this.y * 0.5);\r\n        c.z = Math.cos(this.z * 0.5);\r\n        s.z = Math.sin(this.z * 0.5);\r\n        dest.x = s.x * c.y * c.z - c.x * s.y * s.z;\r\n        dest.y = c.x * s.y * c.z + s.x * c.y * s.z;\r\n        dest.z = c.x * c.y * s.z - s.x * s.y * c.z;\r\n        dest.w = c.x * c.y * c.z + s.x * s.y * s.z;\r\n        return dest;\r\n    }\r\n    static cross(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z;\r\n        const x2 = vector2.x;\r\n        const y2 = vector2.y;\r\n        const z2 = vector2.z;\r\n        dest.x = y * z2 - z * y2;\r\n        dest.y = z * x2 - x * z2;\r\n        dest.z = x * y2 - y * x2;\r\n        return dest;\r\n    }\r\n    static dot(vector, vector2) {\r\n        const x = vector.x;\r\n        const y = vector.y;\r\n        const z = vector.z;\r\n        const x2 = vector2.x;\r\n        const y2 = vector2.y;\r\n        const z2 = vector2.z;\r\n        return x * x2 + y * y2 + z * z2;\r\n    }\r\n    static distance(vector, vector2) {\r\n        const x = vector2.x - vector.x;\r\n        const y = vector2.y - vector.y;\r\n        const z = vector2.z - vector.z;\r\n        return Math.sqrt(this.squaredDistance(vector, vector2));\r\n    }\r\n    static squaredDistance(vector, vector2) {\r\n        const x = vector2.x - vector.x;\r\n        const y = vector2.y - vector.y;\r\n        const z = vector2.z - vector.z;\r\n        return x * x + y * y + z * z;\r\n    }\r\n    static direction(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        const x = vector.x - vector2.x;\r\n        const y = vector.y - vector2.y;\r\n        const z = vector.z - vector2.z;\r\n        let length = Math.sqrt(x * x + y * y + z * z);\r\n        if (length === 0) {\r\n            dest.x = 0;\r\n            dest.y = 0;\r\n            dest.z = 0;\r\n            return dest;\r\n        }\r\n        length = 1 / length;\r\n        dest.x = x * length;\r\n        dest.y = y * length;\r\n        dest.z = z * length;\r\n        return dest;\r\n    }\r\n    static mix(vector, vector2, time, dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        dest.x = vector.x + time * (vector2.x - vector.x);\r\n        dest.y = vector.y + time * (vector2.y - vector.y);\r\n        dest.z = vector.z + time * (vector2.z - vector.z);\r\n        return dest;\r\n    }\r\n    static sum(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        dest.x = vector.x + vector2.x;\r\n        dest.y = vector.y + vector2.y;\r\n        dest.z = vector.z + vector2.z;\r\n        return dest;\r\n    }\r\n    static difference(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        dest.x = vector.x - vector2.x;\r\n        dest.y = vector.y - vector2.y;\r\n        dest.z = vector.z - vector2.z;\r\n        return dest;\r\n    }\r\n    static product(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        dest.x = vector.x * vector2.x;\r\n        dest.y = vector.y * vector2.y;\r\n        dest.z = vector.z * vector2.z;\r\n        return dest;\r\n    }\r\n    static quotient(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec3();\r\n        }\r\n        dest.x = vector.x / vector2.x;\r\n        dest.y = vector.y / vector2.y;\r\n        dest.z = vector.z / vector2.z;\r\n        return dest;\r\n    }\r\n    toString() {\r\n        return (this.x.toFixed(5) + ', ' + this.y.toFixed(5) + ', ' + this.z.toFixed(5));\r\n    }\r\n}\r\nexports[\"default\"] = vec3;\r\nvec3.zero = new vec3([0, 0, 0]);\r\nvec3.one = new vec3([1, 1, 1]);\r\nvec3.up = new vec3([0, 1, 0]);\r\nvec3.right = new vec3([1, 0, 0]);\r\nvec3.forward = new vec3([0, 0, 1]);\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec3.ts?");

/***/ }),

/***/ "./src/math/vec4.ts":
/*!**************************!*\
  !*** ./src/math/vec4.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\r\nclass vec4 {\r\n    get x() {\r\n        return this.values[0];\r\n    }\r\n    get y() {\r\n        return this.values[1];\r\n    }\r\n    get z() {\r\n        return this.values[2];\r\n    }\r\n    get w() {\r\n        return this.values[3];\r\n    }\r\n    get xy() {\r\n        return [this.values[0], this.values[1]];\r\n    }\r\n    get xyz() {\r\n        return [this.values[0], this.values[1], this.values[2]];\r\n    }\r\n    get xyzw() {\r\n        return [this.values[0], this.values[1], this.values[2], this.values[3]];\r\n    }\r\n    set x(value) {\r\n        this.values[0] = value;\r\n    }\r\n    set y(value) {\r\n        this.values[1] = value;\r\n    }\r\n    set z(value) {\r\n        this.values[2] = value;\r\n    }\r\n    set w(value) {\r\n        this.values[3] = value;\r\n    }\r\n    set xy(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n    }\r\n    set xyz(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n    }\r\n    set xyzw(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n        this.values[3] = values[3];\r\n    }\r\n    get r() {\r\n        return this.values[0];\r\n    }\r\n    get g() {\r\n        return this.values[1];\r\n    }\r\n    get b() {\r\n        return this.values[2];\r\n    }\r\n    get a() {\r\n        return this.values[3];\r\n    }\r\n    get rg() {\r\n        return [this.values[0], this.values[1]];\r\n    }\r\n    get rgb() {\r\n        return [this.values[0], this.values[1], this.values[2]];\r\n    }\r\n    get rgba() {\r\n        return [this.values[0], this.values[1], this.values[2], this.values[3]];\r\n    }\r\n    set r(value) {\r\n        this.values[0] = value;\r\n    }\r\n    set g(value) {\r\n        this.values[1] = value;\r\n    }\r\n    set b(value) {\r\n        this.values[2] = value;\r\n    }\r\n    set a(value) {\r\n        this.values[3] = value;\r\n    }\r\n    set rg(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n    }\r\n    set rgb(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n    }\r\n    set rgba(values) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n        this.values[3] = values[3];\r\n    }\r\n    constructor(values, y, z, w) {\r\n        this.values = new Float32Array(4);\r\n        if (values !== undefined) {\r\n            if (typeof values === 'number') {\r\n                this.values[0] = values;\r\n            }\r\n            else if (Array.isArray(values)) {\r\n                this.xyzw = values;\r\n            }\r\n            if (y !== undefined) {\r\n                this.values[1] = y;\r\n            }\r\n            if (z !== undefined) {\r\n                this.values[2] = z;\r\n            }\r\n            if (w !== undefined) {\r\n                this.values[3] = w;\r\n            }\r\n        }\r\n        else {\r\n            this.xyzw = [0, 0, 0, 0];\r\n        }\r\n    }\r\n    foreach(fn) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            fn(this.values[i]);\r\n        }\r\n    }\r\n    at(index) {\r\n        return this.values[index];\r\n    }\r\n    reset() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.w = 0;\r\n    }\r\n    copy(dest) {\r\n        if (!dest) {\r\n            dest = new vec4();\r\n        }\r\n        dest.x = this.x;\r\n        dest.y = this.y;\r\n        dest.z = this.z;\r\n        dest.w = this.w;\r\n        return dest;\r\n    }\r\n    negate(dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        dest.x = -this.x;\r\n        dest.y = -this.y;\r\n        dest.z = -this.z;\r\n        dest.w = -this.w;\r\n        return dest;\r\n    }\r\n    equals(vector, threshold = constants_1.epsilon) {\r\n        if (Math.abs(this.x - vector.x) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.y - vector.y) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.z - vector.z) > threshold) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.w - vector.w) > threshold) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.squaredLength());\r\n    }\r\n    squaredLength() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        return x * x + y * y + z * z + w * w;\r\n    }\r\n    add(vector) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n        this.z += vector.z;\r\n        this.w += vector.w;\r\n        return this;\r\n    }\r\n    subtract(vector) {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n        this.z -= vector.z;\r\n        this.w -= vector.w;\r\n        return this;\r\n    }\r\n    multiply(vector) {\r\n        this.x *= vector.x;\r\n        this.y *= vector.y;\r\n        this.z *= vector.z;\r\n        this.w *= vector.w;\r\n        return this;\r\n    }\r\n    divide(vector) {\r\n        this.x /= vector.x;\r\n        this.y /= vector.y;\r\n        this.z /= vector.z;\r\n        this.w /= vector.w;\r\n        return this;\r\n    }\r\n    leap(t, other, dest) {\r\n        if (!dest) {\r\n            dest = new vec4();\r\n        }\r\n        dest.x = this.x * t + (1 - t) * other.x;\r\n        dest.y = this.y * t + (1 - t) * other.y;\r\n        dest.z = this.z * t + (1 - t) * other.z;\r\n        dest.w = this.w * t + (1 - t) * other.w;\r\n        return dest;\r\n    }\r\n    scale(value, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        dest.x *= value;\r\n        dest.y *= value;\r\n        dest.z *= value;\r\n        dest.w *= value;\r\n        return dest;\r\n    }\r\n    normalize(dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        let length = this.length();\r\n        if (length === 1) {\r\n            return this;\r\n        }\r\n        if (length === 0) {\r\n            dest.x *= 0;\r\n            dest.y *= 0;\r\n            dest.z *= 0;\r\n            dest.w *= 0;\r\n            return dest;\r\n        }\r\n        length = 1.0 / length;\r\n        dest.x *= length;\r\n        dest.y *= length;\r\n        dest.z *= length;\r\n        dest.w *= length;\r\n        return dest;\r\n    }\r\n    multiplyMat4(matrix, dest) {\r\n        if (!dest) {\r\n            dest = this;\r\n        }\r\n        return matrix.multiplyVec4(this, dest);\r\n    }\r\n    static mix(vector, vector2, time, dest) {\r\n        if (!dest) {\r\n            dest = new vec4();\r\n        }\r\n        dest.x = vector.x + time * (vector2.x - vector.x);\r\n        dest.y = vector.y + time * (vector2.y - vector.y);\r\n        dest.z = vector.z + time * (vector2.z - vector.z);\r\n        dest.w = vector.w + time * (vector2.w - vector.w);\r\n        return dest;\r\n    }\r\n    static sum(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec4();\r\n        }\r\n        dest.x = vector.x + vector2.x;\r\n        dest.y = vector.y + vector2.y;\r\n        dest.z = vector.z + vector2.z;\r\n        dest.w = vector.w + vector2.w;\r\n        return dest;\r\n    }\r\n    static difference(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec4();\r\n        }\r\n        dest.x = vector.x - vector2.x;\r\n        dest.y = vector.y - vector2.y;\r\n        dest.z = vector.z - vector2.z;\r\n        dest.w = vector.w - vector2.w;\r\n        return dest;\r\n    }\r\n    static product(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec4();\r\n        }\r\n        dest.x = vector.x * vector2.x;\r\n        dest.y = vector.y * vector2.y;\r\n        dest.z = vector.z * vector2.z;\r\n        dest.w = vector.w * vector2.w;\r\n        return dest;\r\n    }\r\n    static quotient(vector, vector2, dest) {\r\n        if (!dest) {\r\n            dest = new vec4();\r\n        }\r\n        dest.x = vector.x / vector2.x;\r\n        dest.y = vector.y / vector2.y;\r\n        dest.z = vector.z / vector2.z;\r\n        dest.w = vector.w / vector2.w;\r\n        return dest;\r\n    }\r\n    toString() {\r\n        return (this.x.toFixed(5) +\r\n            ', ' +\r\n            this.y.toFixed(5) +\r\n            ', ' +\r\n            this.z.toFixed(5) +\r\n            ', ' +\r\n            this.a.toFixed(5));\r\n    }\r\n}\r\nexports[\"default\"] = vec4;\r\nvec4.zero = new vec4([0, 0, 0, 1]);\r\nvec4.one = new vec4([1, 1, 1, 1]);\r\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec4.ts?");

/***/ }),

/***/ "./src/menus/DialogBuilder.ts":
/*!************************************!*\
  !*** ./src/menus/DialogBuilder.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DialogBuilder = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\n/**\r\n * This class is used to build the visual dialog box\r\n */\r\nclass DialogBuilder extends Component_1.Component {\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.continueIconX = 350;\r\n        this.continueIconY = 75;\r\n        this.tileWidth = 64;\r\n        this.tileHeight = 64;\r\n        this.iconScale = 1;\r\n        this.minWidth = 20;\r\n        this.minHeight = 20;\r\n    }\r\n    /**\r\n     * Set the sprite controller\r\n     * @param spriteController\r\n     */\r\n    initialize(spriteController) {\r\n        this._spriteController = spriteController;\r\n    }\r\n    /**\r\n     * Hides all the dialog box\r\n     * @param dialogId\r\n     */\r\n    hideDialog(dialogId) {\r\n        this._spriteController.removeSprite(dialogId + 'menu.left.top');\r\n        this._spriteController.removeSprite(dialogId + 'menu.right.top');\r\n        this._spriteController.removeSprite(dialogId + 'menu.right.bottom');\r\n        this._spriteController.removeSprite(dialogId + 'menu.left.bottom');\r\n        this._spriteController.removeSprite(dialogId + 'menu.center.top');\r\n        this._spriteController.removeSprite(dialogId + 'menu.center.bottom');\r\n        this._spriteController.removeSprite(dialogId + 'menu.left.middle');\r\n        this._spriteController.removeSprite(dialogId + 'menu.right.middle');\r\n        this._spriteController.removeSprite(dialogId + 'menu.center.middle');\r\n    }\r\n    /**\r\n     * Creates and positions a dialog box\r\n     * @param dialogId\r\n     * @param spriteController\r\n     * @param p\r\n     */\r\n    buildDialog(dialogId, p) {\r\n        // inner y is like the bottom corner of the text filed.\r\n        // p.yPos is pixels from the top of the screen\r\n        const innerTopLeft = new vec2_1.default(p.x + this.tileWidth * this.iconScale, p.y + this.tileWidth * this.iconScale);\r\n        const innerTopRight = new vec2_1.default(p.x + (p.width - this.tileWidth * this.iconScale), p.y + this.tileHeight * this.iconScale);\r\n        const innerBottomRight = new vec2_1.default(p.x + (p.width - this.tileWidth * this.iconScale), p.height + p.y - this.tileHeight * this.iconScale);\r\n        const bottomRight = new vec2_1.default(p.x + (p.width - this.tileWidth * this.iconScale), p.height + p.y);\r\n        const bottomLeft = new vec2_1.default(p.x + this.tileWidth * this.iconScale, p.height + p.y);\r\n        // top left corner\r\n        this._spriteController.activeSprite(dialogId + 'menu.left.top');\r\n        this._spriteController.scale(this.iconScale);\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(p.x, this.eng.height - innerTopLeft.y, p.depth);\r\n        this._spriteController.setSprite('menu.left.top');\r\n        // top right corner\r\n        this._spriteController.activeSprite(dialogId + 'menu.right.top');\r\n        this._spriteController.scale(this.iconScale);\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(innerTopRight.x, this.eng.height - innerTopRight.y, p.depth);\r\n        this._spriteController.setSprite('menu.right.top');\r\n        // bottom right corner\r\n        this._spriteController.activeSprite(dialogId + 'menu.right.bottom');\r\n        this._spriteController.scale(this.iconScale);\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(innerTopRight.x, this.eng.height - bottomRight.y, p.depth);\r\n        this._spriteController.setSprite('menu.right.bottom');\r\n        // bottom left corner\r\n        this._spriteController.activeSprite(dialogId + 'menu.left.bottom');\r\n        this._spriteController.scale(this.iconScale);\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(p.x, this.eng.height - bottomLeft.y, p.depth);\r\n        this._spriteController.setSprite('menu.left.bottom');\r\n        // position the edges\r\n        const topEdgeScale = (innerTopRight.x - innerTopLeft.x) / this.tileWidth;\r\n        const rightEdgeScale = (innerBottomRight.y - innerTopRight.y) / this.tileHeight;\r\n        // top edge\r\n        this._spriteController.activeSprite(dialogId + 'menu.center.top');\r\n        this._spriteController.scale({ x: topEdgeScale, y: this.iconScale });\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(innerTopLeft.x, this.eng.height - innerTopRight.y, p.depth);\r\n        this._spriteController.setSprite('menu.center.top');\r\n        // bottom edge\r\n        this._spriteController.activeSprite(dialogId + 'menu.center.bottom');\r\n        this._spriteController.scale({ x: topEdgeScale, y: this.iconScale });\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(innerTopLeft.x, this.eng.height - bottomRight.y, p.depth);\r\n        this._spriteController.setSprite('menu.center.bottom');\r\n        // left edge\r\n        this._spriteController.activeSprite(dialogId + 'menu.left.middle');\r\n        this._spriteController.scale({ x: this.iconScale, y: rightEdgeScale });\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(p.x, this.eng.height - innerBottomRight.y, p.depth);\r\n        this._spriteController.setSprite('menu.left.middle');\r\n        // right edge\r\n        this._spriteController.activeSprite(dialogId + 'menu.right.middle');\r\n        this._spriteController.scale({ x: this.iconScale, y: rightEdgeScale });\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(innerTopRight.x, this.eng.height - innerBottomRight.y, p.depth);\r\n        this._spriteController.setSprite('menu.right.middle');\r\n        // center\r\n        this._spriteController.activeSprite(dialogId + 'menu.center.middle');\r\n        this._spriteController.scale({ x: topEdgeScale, y: rightEdgeScale });\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSpritePosition(innerTopLeft.x, this.eng.height - innerBottomRight.y, p.depth);\r\n        this._spriteController.setSprite('menu.center.middle');\r\n    }\r\n}\r\nexports.DialogBuilder = DialogBuilder;\r\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogBuilder.ts?");

/***/ }),

/***/ "./src/menus/DialogComponent.ts":
/*!**************************************!*\
  !*** ./src/menus/DialogComponent.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DialogComponent = void 0;\r\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\r\nconst PanelComponent_1 = __webpack_require__(/*! ./PanelComponent */ \"./src/menus/PanelComponent.ts\");\r\nconst UserAction_1 = __webpack_require__(/*! ../core/UserAction */ \"./src/core/UserAction.ts\");\r\nconst DialogCursor_1 = __webpack_require__(/*! ./DialogCursor */ \"./src/menus/DialogCursor.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\n/**\r\n * A dialog component that can be sized and display text in the game.\r\n * There is also an onHide event to handle user input\r\n */\r\nclass DialogComponent extends PanelComponent_1.PanelComponent {\r\n    get selectedOption() {\r\n        return this._selectedOption;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    constructor(eng, dialogBuild) {\r\n        super(eng, 'dialog1', dialogBuild);\r\n        this._expandAnimation = new Curve_1.Curve();\r\n        this._expandAnimation.curve(Curve_1.CurveType.linear);\r\n        this._expandAnimation.points([\r\n            { t: 0, p: 0 },\r\n            { t: 250, p: 1 },\r\n            { t: 500, p: 2 },\r\n        ]);\r\n        this._cursor = new DialogCursor_1.DialogCursor(eng);\r\n    }\r\n    /**\r\n     * Options are use to allow the user to select something from the dialog box\r\n     * @param options\r\n     */\r\n    setOptions(options) {\r\n        this._options = options;\r\n    }\r\n    /**\r\n     * Handle user interaction with the dialog\r\n     * @param state\r\n     * @returns\r\n     */\r\n    handleUserAction(state) {\r\n        const active = this.visible;\r\n        if (active && state.isReleased(UserAction_1.UserAction.A)) {\r\n            let canHide = true;\r\n            if (this.onClosing) {\r\n                canHide = this.onClosing(this);\r\n            }\r\n            this._cursor.select();\r\n            if (canHide) {\r\n                this.hide();\r\n                if (this.onClosed) {\r\n                    this.onClosed(this);\r\n                }\r\n            }\r\n        }\r\n        if (this._options?.length > 0) {\r\n            // select next option\r\n            if (state.isReleased(UserAction_1.UserAction.Down)) {\r\n                if (this._cursor.index < this._cursor.indexCount - 1) {\r\n                    this._cursor.index++;\r\n                }\r\n                else {\r\n                    this._cursor.index = 0;\r\n                }\r\n                this._cursor.select();\r\n            }\r\n            // select previous option\r\n            if (state.isReleased(UserAction_1.UserAction.Up)) {\r\n                if (this._cursor.index > 0) {\r\n                    this._cursor.index--;\r\n                }\r\n                else {\r\n                    this._cursor.index = this._cursor.indexCount - 1;\r\n                }\r\n                this._cursor.select();\r\n            }\r\n        }\r\n        return active;\r\n    }\r\n    show() {\r\n        super.show();\r\n        if (this._options?.length > 0) {\r\n            this._cursor.show(0);\r\n        }\r\n    }\r\n    hide() {\r\n        super.hide();\r\n        this.eng.textManager.hideText(this.id);\r\n        this._dialogBuild.hideDialog(this.id);\r\n        this._cursor.hide();\r\n        for (let i = 0; i < this._options?.length; i++) {\r\n            this.eng.textManager.hideText(this.id + '_' + this._options[i]);\r\n        }\r\n    }\r\n    redraw() {\r\n        super.redraw();\r\n        if (this.visible) {\r\n            // add the cursor and the positions it can be placed at\r\n            if (this._options?.length > 0) {\r\n                const { width, height } = this.eng.textManager.getTextSize(this._text);\r\n                const optionIndent = 60;\r\n                const optionsHeightPadding = 20;\r\n                let yOffset = height + optionsHeightPadding;\r\n                let optionXPosition = optionIndent + this._pos.x + this._textOffset.x;\r\n                const optionPositions = [];\r\n                // add the text for all the options\r\n                for (let i = 0; i < this._options.length; i++) {\r\n                    const option = this._options[i];\r\n                    const x = optionXPosition;\r\n                    const y = yOffset + this._textOffset.y + this._pos.y;\r\n                    const textPos = new vec2_1.default(x, y);\r\n                    this.eng.textManager.setTextBlock({\r\n                        id: this.id + '_' + option,\r\n                        text: option,\r\n                        position: textPos,\r\n                        color: new vec4_1.default([0.9, 0.9, 1.0, 1.0]),\r\n                        depth: this._depth - 0.01,\r\n                        scale: 1.0,\r\n                    });\r\n                    optionPositions.push(new vec2_1.default(x - optionIndent, y + this.eng.textManager.lineHeight * 0.5));\r\n                    yOffset += this.eng.textManager.lineHeight;\r\n                }\r\n                // update the cursor with the latest options\r\n                this._cursor.initialize(this.id + '.cursor', this._spriteController, optionPositions, (index) => {\r\n                    this._selectedIndex = index;\r\n                    this._selectedOption = this._options ? this._options[this._selectedIndex] : null;\r\n                }, this._depth - 0.01 // set the depth just in front of this dialog box\r\n                );\r\n                // select will set the _selectedOption to to the activeIndex\r\n                this._cursor.select();\r\n            }\r\n        }\r\n        else {\r\n            this._cursor.hide();\r\n            for (let i = 0; i < this._options?.length; i++) {\r\n                this.eng.textManager.hideText(this.id + '_' + this._options[i]);\r\n            }\r\n        }\r\n    }\r\n    update(dt) {\r\n        super.update(dt);\r\n        this._expandAnimation.update(dt);\r\n        this._cursor.update(dt);\r\n    }\r\n}\r\nexports.DialogComponent = DialogComponent;\r\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogComponent.ts?");

/***/ }),

/***/ "./src/menus/DialogCursor.ts":
/*!***********************************!*\
  !*** ./src/menus/DialogCursor.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DialogCursor = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\n/**\r\n * A cursor used for player selection in menus and dialogs\r\n */\r\nclass DialogCursor extends Component_1.Component {\r\n    get index() {\r\n        return this._activeIndex;\r\n    }\r\n    get position() {\r\n        return this._activePosition;\r\n    }\r\n    set index(value) {\r\n        this._activeIndex = value;\r\n    }\r\n    /**\r\n     * Number of positions this cursor can have\r\n     */\r\n    get indexCount() {\r\n        return this._positions.length;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._positions = [];\r\n        this._activeIndex = -1;\r\n        this._activePosition = new vec2_1.default(0, 0);\r\n        this._cursorCurve = new Curve_1.Curve();\r\n        this._cursorCurve.points([\r\n            {\r\n                p: 0,\r\n                t: 0,\r\n            },\r\n            {\r\n                p: 10,\r\n                t: 500,\r\n            },\r\n            {\r\n                p: 0,\r\n                t: 1000,\r\n            },\r\n        ]);\r\n        this._cursorCurve.curve(Curve_1.CurveType.linear);\r\n        this._cursorCurve.repeat(-1);\r\n        this._visible = false;\r\n    }\r\n    initialize(id, spriteController, positions, onSelect, depth = -0.6) {\r\n        this._spriteController = spriteController;\r\n        this._positions = positions;\r\n        this._cursorId = id;\r\n        this._depth = depth;\r\n        this._onSelect = onSelect;\r\n    }\r\n    /**\r\n     * Selects the active index\r\n     */\r\n    select() {\r\n        // let the user handle the select change\r\n        if (this._onSelect) {\r\n            this._onSelect(this._activeIndex, this);\r\n        }\r\n    }\r\n    show(index, onSelect) {\r\n        if (index != undefined) {\r\n            this._activeIndex = index;\r\n        }\r\n        this._visible = true;\r\n        if (onSelect) {\r\n            this._onSelect = onSelect;\r\n        }\r\n    }\r\n    /**\r\n     * Cause the cursor to stop moving as the player selected something\r\n     */\r\n    lock() {\r\n        this._cursorCurve.pause(0);\r\n    }\r\n    /**\r\n     * Hide the cursor\r\n     */\r\n    hide() {\r\n        this._visible = false;\r\n        if (this._spriteController) {\r\n            this._spriteController.removeSprite(this._cursorId);\r\n            this._spriteController.commitToBuffer();\r\n        }\r\n    }\r\n    redraw() {\r\n        if (!this._spriteController) {\r\n            return;\r\n        }\r\n        if (this._visible) {\r\n            const position = this._positions[this._activeIndex];\r\n            if (position) {\r\n                this._activePosition = position;\r\n                this._spriteController.activeSprite(this._cursorId);\r\n                this._spriteController.scale(0.9);\r\n                this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n                this._spriteController.viewScale(1.0);\r\n                this._spriteController.setSprite('cursor');\r\n                this._spriteController.setSpritePosition(position.x, this.eng.height - position.y, this._depth);\r\n                this._cursorCurve.start(true, undefined, (val) => {\r\n                    this._spriteController.activeSprite(this._cursorId);\r\n                    this._spriteController.setSpritePosition(position.x + val, this.eng.height - position.y, this._depth);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this._spriteController.removeSprite(this._cursorId);\r\n            this._spriteController.commitToBuffer();\r\n        }\r\n    }\r\n    /**\r\n     * Updates the animation\r\n     * @param dt\r\n     */\r\n    update(dt) {\r\n        this._cursorCurve.update(dt);\r\n        this.redraw();\r\n    }\r\n    dispose() {\r\n        this._onSelect = undefined;\r\n    }\r\n}\r\nexports.DialogCursor = DialogCursor;\r\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogCursor.ts?");

/***/ }),

/***/ "./src/menus/GameMenuBuilder.ts":
/*!**************************************!*\
  !*** ./src/menus/GameMenuBuilder.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameMenuBuilder = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nclass GameMenuBuilder extends Component_1.Component {\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._cursorCurve = new Curve_1.Curve();\r\n        this._cursorCurve.points([\r\n            {\r\n                p: 0,\r\n                t: 0,\r\n            },\r\n            {\r\n                p: 10,\r\n                t: 500,\r\n            },\r\n        ]);\r\n    }\r\n    /**\r\n     * Set the sprite controller\r\n     * @param spriteController\r\n     */\r\n    initialize(spriteController) {\r\n        this._spriteController = spriteController;\r\n    }\r\n    show() {\r\n        this._spriteController.activeSprite('gameMenu');\r\n        this._spriteController.scale(1);\r\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\r\n        this._spriteController.viewScale(1.0);\r\n        this._spriteController.setSprite('gameMenu');\r\n        this._spriteController.setSpritePosition(0, 0, -0.2);\r\n    }\r\n    hide() {\r\n        this._spriteController.removeSprite('gameMenu');\r\n        this._spriteController.commitToBuffer();\r\n    }\r\n}\r\nexports.GameMenuBuilder = GameMenuBuilder;\r\n\n\n//# sourceURL=webpack://earthquest/./src/menus/GameMenuBuilder.ts?");

/***/ }),

/***/ "./src/menus/GameMenuComponent.ts":
/*!****************************************!*\
  !*** ./src/menus/GameMenuComponent.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameMenuComponent = void 0;\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst UserAction_1 = __webpack_require__(/*! ../core/UserAction */ \"./src/core/UserAction.ts\");\r\nconst DialogCursor_1 = __webpack_require__(/*! ./DialogCursor */ \"./src/menus/DialogCursor.ts\");\r\n/**\r\n * The game menu. The player can equip, use items and see stats\r\n */\r\nclass GameMenuComponent extends Component_1.Component {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    constructor(eng, id, _dialogBuild) {\r\n        super(eng);\r\n        this._dialogBuild = _dialogBuild;\r\n        this._id = id;\r\n        this._visible = false;\r\n        this._pos = new vec2_1.default();\r\n        this._size = new vec2_1.default(300, 200);\r\n        this._textOffset = new vec2_1.default(50, 60);\r\n        this._cursor = new DialogCursor_1.DialogCursor(eng);\r\n    }\r\n    initialize(spriteController) {\r\n        this._spriteController = spriteController;\r\n        this._dialogBuild.initialize(this._spriteController);\r\n        // menu options positions\r\n        const items = new vec2_1.default(30, 70);\r\n        const status = new vec2_1.default(30, 120);\r\n        const map = new vec2_1.default(30, 180);\r\n        const config = new vec2_1.default(30, 240);\r\n        const save = new vec2_1.default(30, 290);\r\n        this._cursor.initialize('cursor.1', this._spriteController, [items, status, map, config, save]);\r\n    }\r\n    showEditor() {\r\n        //this.eng.showEditor();\r\n    }\r\n    save() {\r\n        this.eng.gameManager.save();\r\n    }\r\n    setPosition(x, y) {\r\n        this._pos.x = x;\r\n        this._pos.y = y;\r\n    }\r\n    show() {\r\n        this._visible = true;\r\n        this._cursor.show(0, (index) => {\r\n            switch (index) {\r\n                case 0:\r\n                    break;\r\n                case 1:\r\n                    break;\r\n                case 2:\r\n                    break;\r\n                case 3:\r\n                    this.showEditor();\r\n                    break;\r\n                case 4:\r\n                    this.save();\r\n                    console.debug('saved!');\r\n                    break;\r\n            }\r\n            console.debug('selecting index ' + index);\r\n        });\r\n    }\r\n    getFormattedTime() {\r\n        const t = this.eng.gameManager.data.player.timePlayed;\r\n        let time = t.h.toString().padStart(2, '0');\r\n        time += ':' + t.m.toString().padStart(2, '0');\r\n        time += ':' + t.s.toString().padStart(2, '0');\r\n        return time;\r\n    }\r\n    hide() {\r\n        this._visible = false;\r\n        this._dialogBuild.hide();\r\n        this._cursor.hide();\r\n        this.eng.textManager.hideText('menu.gold');\r\n        this.eng.textManager.hideText('menu.time');\r\n    }\r\n    /**\r\n     * Handle user interaction with the dialog\r\n     * @param state\r\n     * @returns\r\n     */\r\n    handleUserAction(state) {\r\n        const active = this.visible;\r\n        if (active) {\r\n            if (state.isReleased(UserAction_1.UserAction.Start)) {\r\n                let canHide = true;\r\n                // if there is an onHide event fire that\r\n                if (this.onHide) {\r\n                    canHide = this.onHide(this);\r\n                }\r\n                if (canHide) {\r\n                    this.hide();\r\n                }\r\n            }\r\n            // select next option\r\n            if (state.isReleased(UserAction_1.UserAction.Down)) {\r\n                if (this._cursor.index < this._cursor.indexCount - 1) {\r\n                    this._cursor.index++;\r\n                }\r\n                else {\r\n                    this._cursor.index = 0;\r\n                }\r\n            }\r\n            // select previous option\r\n            if (state.isReleased(UserAction_1.UserAction.Up)) {\r\n                if (this._cursor.index > 0) {\r\n                    this._cursor.index--;\r\n                }\r\n                else {\r\n                    this._cursor.index = this._cursor.indexCount - 1;\r\n                }\r\n            }\r\n            // accept the option\r\n            if (state.isReleased(UserAction_1.UserAction.A)) {\r\n                this._cursor.select();\r\n            }\r\n        }\r\n        return active;\r\n    }\r\n    redraw() {\r\n        this._dialogBuild.show();\r\n        const gold = this.eng.gameManager.data.player.gold.toString();\r\n        this.eng.textManager.setTextBlock({\r\n            id: 'menu.gold',\r\n            text: gold.padStart(7, '0'),\r\n            position: new vec2_1.default([90, 370]),\r\n            color: new vec4_1.default([0.0, 0.0, 0.0, 1.0]),\r\n            depth: -1,\r\n            scale: 1.0,\r\n        });\r\n        if (this._formattedTime != this.getFormattedTime()) {\r\n            this._formattedTime = this.getFormattedTime();\r\n            this.eng.textManager.setTextBlock({\r\n                id: 'menu.time',\r\n                text: this._formattedTime,\r\n                position: new vec2_1.default([90, 430]),\r\n                color: new vec4_1.default([0.0, 0.0, 0.0, 1.0]),\r\n                depth: -1,\r\n                scale: 1.0,\r\n            });\r\n        }\r\n    }\r\n    update(dt) {\r\n        // show the time updates\r\n        if (this.visible) {\r\n            this.redraw();\r\n        }\r\n        this._cursor.update(dt);\r\n    }\r\n}\r\nexports.GameMenuComponent = GameMenuComponent;\r\n\n\n//# sourceURL=webpack://earthquest/./src/menus/GameMenuComponent.ts?");

/***/ }),

/***/ "./src/menus/PanelComponent.ts":
/*!*************************************!*\
  !*** ./src/menus/PanelComponent.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PanelComponent = void 0;\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nclass PanelComponent extends Component_1.Component {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    constructor(eng, id, _dialogBuild) {\r\n        super(eng);\r\n        this._dialogBuild = _dialogBuild;\r\n        this._id = id;\r\n        this._visible = false;\r\n        this._pos = new vec2_1.default();\r\n        this._size = new vec2_1.default(300, 200);\r\n        this._textOffset = new vec2_1.default(50, 60);\r\n        this._dirty = false;\r\n        this._depth = -0.5;\r\n    }\r\n    initialize(spriteController) {\r\n        this._spriteController = spriteController;\r\n        this._dialogBuild.initialize(this._spriteController);\r\n    }\r\n    setPosition(x, y) {\r\n        this._pos.x = x;\r\n        this._pos.y = y;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Range 1 to -1 in screen space\r\n     * @param depth\r\n     */\r\n    setDepth(depth) {\r\n        this._depth = depth;\r\n    }\r\n    /**\r\n     * Sets the text for this panel\r\n     * @param text\r\n     */\r\n    setText(text) {\r\n        this._text = text;\r\n        this._dirty = true;\r\n    }\r\n    setSize(width, height) {\r\n        this._size.x = width;\r\n        this._size.y = height;\r\n        this._dirty = true;\r\n    }\r\n    show() {\r\n        this._visible = true;\r\n        this._dirty = true;\r\n    }\r\n    hide() {\r\n        this._visible = false;\r\n        this._dirty = true;\r\n    }\r\n    redraw() {\r\n        if (this.visible) {\r\n            const p = {\r\n                x: this._pos.x,\r\n                y: this._pos.y,\r\n                width: this._size.x,\r\n                height: this._size.y,\r\n                depth: this._depth,\r\n            };\r\n            this._dialogBuild.buildDialog(this.id, p);\r\n            const textPos = new vec2_1.default(this._pos.x + this._textOffset.x, p.y + this._textOffset.y);\r\n            this.eng.textManager.setTextBlock({\r\n                id: this.id,\r\n                text: this._text,\r\n                position: textPos,\r\n                color: new vec4_1.default([0.9, 0.9, 1.0, 1.0]),\r\n                depth: this._depth - 0.01,\r\n                scale: 1.0,\r\n            });\r\n        }\r\n        else {\r\n            this.eng.textManager.hideText(this.id);\r\n            this._dialogBuild.hideDialog(this.id);\r\n        }\r\n    }\r\n    update(dt) {\r\n        if (this._dirty) {\r\n            this.redraw();\r\n            this._dirty = false;\r\n        }\r\n    }\r\n}\r\nexports.PanelComponent = PanelComponent;\r\n\n\n//# sourceURL=webpack://earthquest/./src/menus/PanelComponent.ts?");

/***/ }),

/***/ "./src/particle/Emitter.ts":
/*!*********************************!*\
  !*** ./src/particle/Emitter.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Emitter = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst SpriteInstanceCollection_1 = __webpack_require__(/*! ../graphics/SpriteInstanceCollection */ \"./src/graphics/SpriteInstanceCollection.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst Particle_1 = __webpack_require__(/*! ./Particle */ \"./src/particle/Particle.ts\");\r\nclass Emitter extends Component_1.Component {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get shader() {\r\n        return this.eng.particleManager.shader;\r\n    }\r\n    constructor(eng, id) {\r\n        super(eng);\r\n        this.active = [];\r\n        this.inactive = [];\r\n        /** emitter's position in pixels */\r\n        this.position = new vec2_1.default();\r\n        /** the number of particles that are emitted */\r\n        this.maxParticles = 20;\r\n        this._id = id;\r\n        this._sprites = new SpriteInstanceCollection_1.SpriteInstanceCollection(this.eng);\r\n    }\r\n    initialize(options) {\r\n        this.emitter = options;\r\n        this._creationDelay = options.creationDelay;\r\n        this._creationTimer = 0;\r\n        this.position = options.position;\r\n        this.maxParticles = options.maxParticles;\r\n        // set the texture\r\n        this._sprites.initialize(options.textureAsset.texture, options.textureAsset.data);\r\n        // clear out old particles\r\n        this.active.forEach((p) => p.kill());\r\n        this.inactive.forEach((p) => p.kill());\r\n        this.active = [];\r\n        this.inactive = [];\r\n        this._sprites.clear();\r\n        // add all particles\r\n        for (let i = 0; i < this.maxParticles; i++) {\r\n            this.inactive.push(new Particle_1.Particle(this.eng, this._id + '_p_' + i, this._sprites));\r\n        }\r\n        this.start();\r\n    }\r\n    createParticle() {\r\n        // update args creation args\r\n        this.emitter.positionMin.x = this.position.x;\r\n        this.emitter.positionMin.y = this.position.y;\r\n        this.emitter.positionMax.x = this.position.x + 10;\r\n        this.emitter.positionMax.y = this.position.y + 10;\r\n        this.emitter.loc = this._sprites.getLoc('particle.1');\r\n        // spit them all out at once if there is no delay\r\n        if (this.emitter.creationDelay == 0) {\r\n            // do we need to wait for all\r\n            if ((this.emitter.waitForAll && this.active.length == 0) ||\r\n                !this.emitter.waitForAll) {\r\n                this.inactive.forEach((p) => {\r\n                    p.initialize(this.emitter);\r\n                    this.active.push(p);\r\n                });\r\n                this.inactive = [];\r\n            }\r\n        }\r\n        // delay creation\r\n        else if (this._creationTimer >= this._creationDelay) {\r\n            // do we need to wait for all\r\n            if ((this.emitter.waitForAll && this.active.length == 0) ||\r\n                !this.emitter.waitForAll) {\r\n                // get the next particle and initialize it\r\n                const particle = this.inactive.pop();\r\n                if (particle) {\r\n                    particle.initialize(this.emitter);\r\n                    this.active.push(particle);\r\n                }\r\n            }\r\n            this._creationTimer = 0;\r\n        }\r\n    }\r\n    start() {\r\n        this._running = true;\r\n    }\r\n    update(dt) {\r\n        if (this._running) {\r\n            const view = this.eng.viewManager;\r\n            let projection = view.projection;\r\n            this.shader.setSpriteSheet(this._sprites.spriteTexture);\r\n            this.shader.enable();\r\n            // set the project\r\n            this.shader.setProj(projection);\r\n            this._creationTimer += dt;\r\n            // create a new particle\r\n            this.createParticle();\r\n            // update particles\r\n            this.active.forEach((p) => {\r\n                p.update(dt);\r\n                if (!p.active) {\r\n                    this.inactive.push(p);\r\n                }\r\n            });\r\n            // remove inactive particles from this list\r\n            this.active = this.active.filter((a) => a.active);\r\n            // update sprites\r\n            this._sprites.update(dt);\r\n        }\r\n    }\r\n    dispose() { }\r\n}\r\nexports.Emitter = Emitter;\r\n\n\n//# sourceURL=webpack://earthquest/./src/particle/Emitter.ts?");

/***/ }),

/***/ "./src/particle/Particle.ts":
/*!**********************************!*\
  !*** ./src/particle/Particle.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Particle = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst SpriteInstanceController_1 = __webpack_require__(/*! ../graphics/SpriteInstanceController */ \"./src/graphics/SpriteInstanceController.ts\");\r\nconst constants_1 = __webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\nconst RidgeBody_1 = __webpack_require__(/*! ../physics/RidgeBody */ \"./src/physics/RidgeBody.ts\");\r\nclass Particle extends Component_1.Component {\r\n    get active() {\r\n        return this._active;\r\n    }\r\n    constructor(eng, id, spriteCollection) {\r\n        super(eng);\r\n        this.spriteController = new SpriteInstanceController_1.SpriteInstanceController(id, spriteCollection);\r\n        this.spriteController.spriteImage('particle.1');\r\n        this.ridgeBody = new RidgeBody_1.RidgeBody(eng, id, this.spriteController);\r\n        this._colorStart = new vec4_1.default();\r\n        this._colorEnd = new vec4_1.default();\r\n    }\r\n    getValue(min, max) {\r\n        const scale = max - min;\r\n        return this.eng.random.rand() * scale + min;\r\n    }\r\n    getValueVec2(min, max) {\r\n        const scaleX = max.x - min.x;\r\n        const scaleY = max.y - min.y;\r\n        const x = this.eng.random.rand() * scaleX + min.x;\r\n        const y = this.eng.random.rand() * scaleY + min.y;\r\n        return new vec2_1.default(x, y);\r\n    }\r\n    getValueVec3(min, max) {\r\n        const scaleX = max.x - min.x;\r\n        const scaleY = max.y - min.y;\r\n        const scaleZ = max.z - min.z;\r\n        const x = this.eng.random.rand() * scaleX + min.x;\r\n        const y = this.eng.random.rand() * scaleY + min.y;\r\n        const z = this.eng.random.rand() * scaleZ + min.y;\r\n        return new vec3_1.default(x, y, z);\r\n    }\r\n    updateColor() {\r\n        const t = 1 - (this._maxLifeTime - this._lifeTime) / this._maxLifeTime;\r\n        this._colorStart.leap(t, this._colorEnd, this.spriteController.colorScale);\r\n    }\r\n    updateScale() {\r\n        const t = 1 - (this._maxLifeTime - this._lifeTime) / this._maxLifeTime;\r\n        const scale = this._initialScale * t + (1 - t) * this._scaleGrowth;\r\n        this.spriteController.xScale = scale;\r\n        this.spriteController.yScale = scale / this._scaleAspectRatio;\r\n        this._colorStart.leap(t, this._colorEnd);\r\n    }\r\n    initialize(opts) {\r\n        const startPosition = this.getValueVec2(opts.positionMin, opts.positionMax);\r\n        this._maxLifeTime = this.getValue(opts.lifeTimeMin, opts.lifeTimeMax);\r\n        this._lifeTime = this._maxLifeTime;\r\n        this._initialScale = this.getValue(opts.scaleMin, opts.scaleMax);\r\n        this._scaleGrowth = opts.scaleGrowth;\r\n        this._scaleAspectRatio = opts.scaleAspectRatio;\r\n        this.rotation = opts.rotation;\r\n        this._angleMin = opts.angleMin;\r\n        this._angleMax = opts.angleMax;\r\n        this._speedMin = opts.speedMin;\r\n        this._speedMax = opts.speedMax;\r\n        this.angularVelocity = opts.angularVelocity;\r\n        opts.colorStart.copy(this._colorStart);\r\n        opts.colorEnd.copy(this._colorEnd);\r\n        this.spriteController.spriteLocation(opts.loc);\r\n        this.spriteController.angle = 0;\r\n        opts.colorStart.copy(this.spriteController.colorScale);\r\n        this.spriteController.topOffset = 0.5;\r\n        this.spriteController.leftOffset = 0.5;\r\n        this.spriteController.depth = -0.8;\r\n        this.spriteController.xScale = this._initialScale;\r\n        this.spriteController.yScale = this._initialScale / this._scaleAspectRatio;\r\n        this.spriteController.left = startPosition.x;\r\n        this.spriteController.top = startPosition.y;\r\n        this.ridgeBody.set(this.spriteController.left, this.spriteController.width, this.spriteController.top + this.spriteController.height, this.spriteController.height);\r\n        // initialize ridge body\r\n        const a = (0, constants_1.toRadian)(this.getValue(this._angleMin, this._angleMax));\r\n        const l = this.getValue(this._speedMin, this._speedMax);\r\n        this.ridgeBody.instanceVelocity = new vec3_1.default(Math.cos(a) * l, Math.sin(a) * l, 0);\r\n        this.ridgeBody.customGravity = opts.gravity.copy(this.ridgeBody.customGravity);\r\n        this.ridgeBody.acceleration.reset();\r\n        this.ridgeBody.velocity.reset();\r\n        this.ridgeBody.setPos(this.spriteController.left, this.spriteController.top);\r\n        // update the position of the particle\r\n        this.ridgeBody.onPosition = (left, top, body) => {\r\n            this.spriteController.left = left;\r\n            this.spriteController.top = top;\r\n        };\r\n        // on collision kill it.\r\n        this.ridgeBody.onCollision = (other) => {\r\n            // if the particle hits anything kill it\r\n            this.kill();\r\n        };\r\n        // debug\r\n        this.ridgeBody.showCollision = false;\r\n        // add the ridgeBody and activate the particle\r\n        this._active = true;\r\n        this.spriteController.visible = true;\r\n        this.eng.physicsManager.addBody(this.ridgeBody);\r\n    }\r\n    kill() {\r\n        this.spriteController.visible = false;\r\n        // remove this from the list of active\r\n        this.eng.physicsManager.removeBody(this.ridgeBody);\r\n        this._active = false;\r\n    }\r\n    update(dt) {\r\n        if (this.active) {\r\n            this._lifeTime -= dt;\r\n            this.updateColor();\r\n            this.updateScale();\r\n            if (this._lifeTime <= 0) {\r\n                this.kill();\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Particle = Particle;\r\n\n\n//# sourceURL=webpack://earthquest/./src/particle/Particle.ts?");

/***/ }),

/***/ "./src/physics/Collision2D.ts":
/*!************************************!*\
  !*** ./src/physics/Collision2D.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Collision2D = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst rect_1 = __importDefault(__webpack_require__(/*! ../math/rect */ \"./src/math/rect.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\nclass Collision2D extends Component_1.Component {\r\n    get left() {\r\n        return this._bounds.left;\r\n    }\r\n    get top() {\r\n        return this._bounds.top;\r\n    }\r\n    get bottom() {\r\n        return this._bounds.bottom;\r\n    }\r\n    get right() {\r\n        return this._bounds.right;\r\n    }\r\n    get width() {\r\n        return this._bounds.width;\r\n    }\r\n    get height() {\r\n        return this._bounds.height;\r\n    }\r\n    get requireUpdate() {\r\n        return this._requiresUpdate;\r\n    }\r\n    getMetaHelp() {\r\n        return null;\r\n    }\r\n    get debugColor() {\r\n        return this._debugColor;\r\n    }\r\n    get showCollision() {\r\n        return this._showCollision;\r\n    }\r\n    set showCollision(value) {\r\n        this._showCollision = value;\r\n        if (this._showCollision) {\r\n            this.eng.annotationManager.buildRect(this.id + '_collision', this.bounds, this._debugColor, 0.4);\r\n        }\r\n        else {\r\n            this.eng.annotationManager.removeRect(this.id + '_collision');\r\n        }\r\n    }\r\n    /**\r\n     * The component this is attached to\r\n     */\r\n    get tag() {\r\n        return this._tag;\r\n    }\r\n    get bounds() {\r\n        return this._bounds;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    constructor(eng, id, _tag, bounds) {\r\n        super(eng);\r\n        this._tag = _tag;\r\n        this._debugColor = new vec4_1.default(0, 1, 0, 1);\r\n        this._id = id;\r\n        this.setBounds(bounds ?? new rect_1.default());\r\n    }\r\n    setId(id) {\r\n        this._id = id;\r\n    }\r\n    set(left, width, top, height) {\r\n        this._bounds.width = width;\r\n        this._bounds.height = height;\r\n        this.setPos(left, top);\r\n    }\r\n    setPos(left, top) {\r\n        this._bounds.set(left, this._bounds.width, top, this._bounds.height);\r\n        // refresh collision position\r\n        this.showCollision = this.showCollision;\r\n        if (this.onPosition) {\r\n            this.onPosition(this.bounds.left, this.bounds.top, this);\r\n        }\r\n    }\r\n    setBounds(bounds) {\r\n        this._bounds = bounds?.copy() ?? new rect_1.default();\r\n    }\r\n    /**\r\n     * Used for bounds checking in quad trees\r\n     * @param other\r\n     * @returns\r\n     */\r\n    isCollidingRect(other) {\r\n        return this._bounds.intersects(other);\r\n    }\r\n    /**\r\n     * Check collision with other colliders\r\n     * @param other\r\n     * @returns\r\n     */\r\n    isColliding(other) {\r\n        return this._bounds.intersects(other.bounds);\r\n    }\r\n    /**\r\n     * Used by derived classes to handle when something\r\n     * is colliding with this. This could\r\n     * @param other\r\n     */\r\n    collisionTriggered(others) {\r\n        if (this.onCollision) {\r\n            this.onCollision(others);\r\n        }\r\n    }\r\n    update(dt) { }\r\n}\r\nexports.Collision2D = Collision2D;\r\n\n\n//# sourceURL=webpack://earthquest/./src/physics/Collision2D.ts?");

/***/ }),

/***/ "./src/physics/QuadTree.ts":
/*!*********************************!*\
  !*** ./src/physics/QuadTree.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.QuadTree = exports.QuadTreeNode = exports.CollisionResults = void 0;\r\nconst rect_1 = __importDefault(__webpack_require__(/*! ../math/rect */ \"./src/math/rect.ts\"));\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\n/**\r\n * Results of a collision test in a quad tree.\r\n */\r\nclass CollisionResults {\r\n}\r\nexports.CollisionResults = CollisionResults;\r\nclass QuadTreeNode {\r\n    get size() {\r\n        return this.bounds.width;\r\n    }\r\n    constructor(offset, size, depth) {\r\n        this.collisions = new Map();\r\n        this.bounds = new rect_1.default([offset.x, size, offset.y, size]);\r\n        this.depth = depth;\r\n        this.childCount = 0;\r\n    }\r\n    addCollision(collision, nodesFound) {\r\n        // if the collision is not fully inside this node return null\r\n        if (!this.bounds.intersects(collision.bounds)) {\r\n            return false;\r\n        }\r\n        const halfSize = this.size * 0.5;\r\n        // no more quad trees just add this collision\r\n        if (this.depth >= QuadTreeNode.maxDepth - 1) {\r\n            this.collisions.set(collision.id, collision);\r\n            this.childCount++;\r\n            nodesFound.push(this);\r\n            return true;\r\n        }\r\n        // add to children\r\n        const midX = this.bounds.left + halfSize;\r\n        const midY = this.bounds.top - halfSize;\r\n        const x = this.bounds.left;\r\n        const y = this.bounds.top;\r\n        // allocate new nodes as\r\n        if (!this.topLeft) {\r\n            this.topLeft = new QuadTreeNode(new vec2_1.default(x, y), halfSize, this.depth + 1);\r\n        }\r\n        if (!this.topRight) {\r\n            this.topRight = new QuadTreeNode(new vec2_1.default(midX, y), halfSize, this.depth + 1);\r\n        }\r\n        if (!this.bottomLeft) {\r\n            this.bottomLeft = new QuadTreeNode(new vec2_1.default(x, midY), halfSize, this.depth + 1);\r\n        }\r\n        if (!this.bottomRight) {\r\n            this.bottomRight = new QuadTreeNode(new vec2_1.default(midX, midY), halfSize, this.depth + 1);\r\n        }\r\n        // see if this fits in one of the child nodes\r\n        this.topLeft.addCollision(collision, nodesFound);\r\n        this.topRight.addCollision(collision, nodesFound);\r\n        this.bottomLeft.addCollision(collision, nodesFound);\r\n        this.bottomRight.addCollision(collision, nodesFound);\r\n        this.childCount =\r\n            this.bottomLeft.childCount +\r\n                this.bottomRight.childCount +\r\n                this.topLeft.childCount +\r\n                this.topRight.childCount;\r\n        return true;\r\n    }\r\n    clear() {\r\n        this.bounds = new rect_1.default();\r\n        this.depth = 0;\r\n        this.collisions.clear();\r\n        this.childCount = 0;\r\n        this.bottomLeft = null;\r\n        this.bottomRight = null;\r\n        this.topLeft = null;\r\n        this.topRight = null;\r\n    }\r\n    removeCollision(id) {\r\n        this.collisions.delete(id);\r\n    }\r\n    /**\r\n     * Check if a collision hits another collision\r\n     * @param other\r\n     * @param results\r\n     * @param analytics\r\n     * @returns\r\n     */\r\n    checkForCollision(other, results, analytics) {\r\n        if (analytics) {\r\n            analytics.intersectionTests++;\r\n            analytics.nodesTested++;\r\n        }\r\n        if (other.isCollidingRect(this.bounds)) {\r\n            this.collisions.forEach((c) => {\r\n                if (analytics) {\r\n                    analytics.intersectionTests++;\r\n                }\r\n                // must be colliding with the other bounds and not already in the results\r\n                if (c.isColliding(other) && !results.collisions.find((x) => x == c)) {\r\n                    results.collisions.push(c);\r\n                }\r\n            });\r\n            if (this.topLeft) {\r\n                this.topLeft.checkForCollision(other, results, analytics);\r\n            }\r\n            if (this.topRight) {\r\n                this.topRight.checkForCollision(other, results, analytics);\r\n            }\r\n            if (this.bottomLeft) {\r\n                this.bottomLeft.checkForCollision(other, results, analytics);\r\n            }\r\n            if (this.bottomRight) {\r\n                this.bottomRight.checkForCollision(other, results, analytics);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.QuadTreeNode = QuadTreeNode;\r\n/**\r\n * Min size of the tree\r\n */\r\nQuadTreeNode.maxDepth = 3;\r\n/**\r\n * Quad tree manages collision using QuadTreeNodes\r\n */\r\nclass QuadTree {\r\n    constructor(size = 1000, maxDepth = 4) {\r\n        QuadTreeNode.maxDepth = maxDepth;\r\n        this.size = size;\r\n        this.collisions = new Map();\r\n        this.root = new QuadTreeNode(new vec2_1.default(0, this.size), this.size, 0);\r\n    }\r\n    /**\r\n     * Add a collision\r\n     * @param collision\r\n     */\r\n    addCollision(collision) {\r\n        this.removeCollision(collision.id);\r\n        const nodesFound = [];\r\n        const added = this.root.addCollision(collision, nodesFound);\r\n        if (!added) {\r\n            this.root.collisions.set(collision.id, collision);\r\n            this.root.childCount++;\r\n            nodesFound.push(this.root);\r\n            console.warn('collision is outside bounds of the tree ' + collision.id);\r\n        }\r\n        // save the list of nodes that hold this collision\r\n        this.collisions.set(collision.id, nodesFound);\r\n        if (nodesFound.length > 1) {\r\n            //console.debug(\r\n            //  ' collision ' + collision.id + ' fits more than one node ',\r\n            //  nodesFound\r\n            //);\r\n        }\r\n    }\r\n    /**\r\n     * Removes a collision from all the nodes it is attached to\r\n     * @param id\r\n     */\r\n    removeCollision(id) {\r\n        const nodes = this.collisions.get(id);\r\n        if (nodes) {\r\n            nodes.forEach((n) => n.removeCollision(id));\r\n        }\r\n    }\r\n    /**\r\n     * Check for collision\r\n     * @param collision\r\n     * @param results\r\n     * @param analytics\r\n     * @returns\r\n     */\r\n    checkForCollision(collision, results, analytics) {\r\n        if (!results) {\r\n            results = {\r\n                collisions: [],\r\n            };\r\n        }\r\n        this.root.checkForCollision(collision, results, analytics);\r\n        return results;\r\n    }\r\n}\r\nexports.QuadTree = QuadTree;\r\n\n\n//# sourceURL=webpack://earthquest/./src/physics/QuadTree.ts?");

/***/ }),

/***/ "./src/physics/RidgeBody.ts":
/*!**********************************!*\
  !*** ./src/physics/RidgeBody.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RidgeBody = void 0;\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst PhysicsManager_1 = __webpack_require__(/*! ../systems/PhysicsManager */ \"./src/systems/PhysicsManager.ts\");\r\nconst Collision2D_1 = __webpack_require__(/*! ./Collision2D */ \"./src/physics/Collision2D.ts\");\r\nclass RidgeBody extends Collision2D_1.Collision2D {\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    constructor(eng, id, tag, bounds) {\r\n        super(eng, id, tag, bounds);\r\n        this.collisionResults = [];\r\n        this.temp = new vec3_1.default();\r\n        this._position = new vec3_1.default();\r\n        this.velocity = new vec3_1.default();\r\n        this.acceleration = new vec3_1.default();\r\n        this.instanceVelocity = new vec3_1.default();\r\n        this.maxVelocity = new vec3_1.default(1000);\r\n        this.minVelocity = new vec3_1.default(-1000);\r\n        this.force = new vec3_1.default();\r\n        this.mass = 10;\r\n        this.active = true;\r\n    }\r\n    reset() {\r\n        this._requiresUpdate = false;\r\n        this.instanceVelocity.reset();\r\n        this.acceleration.reset();\r\n        this.velocity.reset();\r\n        this.maxVelocity.set(1000, 1000, 1000);\r\n        this.minVelocity.set(-1000, -1000, -1000);\r\n    }\r\n    update(dt) {\r\n        super.update(dt);\r\n        // reset the results\r\n        this.collisionResults = [];\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        const t = dt * 0.001;\r\n        // get a copy of the position and velocity\r\n        this.nextPosition = this.position.copy(this.nextPosition);\r\n        this.nextVelocity = this.velocity.copy(this.nextVelocity);\r\n        // apply acceleration and velocity\r\n        const adjustAcc = this.acceleration.copy();\r\n        if (this.customGravity == null) {\r\n            adjustAcc.add(this.eng.physicsManager.gravity);\r\n        }\r\n        else {\r\n            adjustAcc.add(this.customGravity);\r\n        }\r\n        // calculate next values\r\n        this.nextVelocity.add(adjustAcc.scale(t, this.temp));\r\n        this.nextVelocity.clamp(this.minVelocity, this.maxVelocity);\r\n        this.nextPosition.add(this.nextVelocity.scale(t, this.temp));\r\n        this.nextPosition.add(this.instanceVelocity.scale(t, this.temp));\r\n        this.nextBounds = this.bounds.copy(this.nextBounds); // just used for initial allocation\r\n        this.nextBounds.setPosition(this.nextPosition.x * PhysicsManager_1.MetersToPixels, this.nextPosition.y * PhysicsManager_1.MetersToPixels);\r\n        // correct next values using other collisions\r\n        this.correctCollision();\r\n        // update position and velocity\r\n        this.nextVelocity.copy(this.velocity);\r\n        // update the position of the bounds, which will update\r\n        // the position of the ridge body, with will update the position of\r\n        // the sprite.\r\n        this.setPos(this.nextBounds.left, this.nextBounds.top);\r\n        // raise the collision events\r\n        this.onHit(this.collisionResults);\r\n    }\r\n    setPos(left, top) {\r\n        super.setPos(left, top);\r\n        // set the position from the new bounds\r\n        this._position.x = this.bounds.left * PhysicsManager_1.PixelsToMeters;\r\n        this._position.y = this.bounds.top * PhysicsManager_1.PixelsToMeters;\r\n    }\r\n    /**\r\n     * Raise collision event\r\n     * @param other\r\n     */\r\n    onHit(others) {\r\n        this.collisionTriggered(others);\r\n        for (let c of others) {\r\n            c.collisionTriggered([this]);\r\n        }\r\n    }\r\n    /**\r\n     * Correct position, velocity and acceleration when a collision is detected\r\n     *\r\n     */\r\n    correctCollision() {\r\n        const collisions = this.eng.physicsManager.getCollision();\r\n        const b1 = this.bounds;\r\n        const b2 = this.nextBounds;\r\n        const padding = 3; // pixels\r\n        // check all collision and see if we should be stopped\r\n        for (let i = 0; i < collisions.length; i++) {\r\n            const c = collisions[i];\r\n            //if (c.id == 'topBack' && b2.intersects(c.bounds)) {\r\n            //  console.debug('got it');\r\n            //}\r\n            if (b2.edgeOverlapY(c.bounds, true)) {\r\n                const stepLimit = 10;\r\n                const stepHeight = c.bounds.top - b2.bottom;\r\n                // we are colliding with something to the right us\r\n                if (b1.right <= c.bounds.left && b2.right >= c.bounds.left) {\r\n                    // just step over it if we can\r\n                    if (stepHeight <= stepLimit) {\r\n                        b2.top = c.bounds.top + b2.height;\r\n                    }\r\n                    else {\r\n                        this.instanceVelocity.x = 0;\r\n                        this.nextVelocity.x = 0;\r\n                        this.acceleration.x = 0;\r\n                        b2.left = c.bounds.left - b2.width - padding;\r\n                    }\r\n                    this.collisionResults.push(c);\r\n                    continue;\r\n                }\r\n                // colliding with something to the left\r\n                else if (b1.left >= c.bounds.right && b2.left <= c.bounds.right) {\r\n                    // just step over it if we can\r\n                    if (stepHeight <= stepLimit) {\r\n                        b2.top = c.bounds.top + b2.height;\r\n                    }\r\n                    else {\r\n                        this.instanceVelocity.x = 0;\r\n                        this.nextVelocity.x = 0;\r\n                        this.acceleration.x = 0;\r\n                        b2.left = c.bounds.right + padding;\r\n                    }\r\n                    this.collisionResults.push(c);\r\n                    continue;\r\n                }\r\n            }\r\n            // if we are over this collision see if we are touching it.\r\n            if (b2.edgeOverlapX(c.bounds, true)) {\r\n                // we are colliding with something under us\r\n                if (b1.top >= c.bounds.top && b2.bottom <= c.bounds.top) {\r\n                    this.instanceVelocity.y = 0;\r\n                    this.nextVelocity.y = 0;\r\n                    this.acceleration.y = 0;\r\n                    b2.top = c.bounds.top + b2.height;\r\n                    this.collisionResults.push(c);\r\n                }\r\n                else if (b1.top <= c.bounds.bottom && b2.top >= c.bounds.bottom) {\r\n                    this.instanceVelocity.y = 0;\r\n                    this.nextVelocity.y = 0;\r\n                    this.acceleration.y = 0;\r\n                    b2.top = c.bounds.bottom;\r\n                    this.collisionResults.push(c);\r\n                }\r\n            }\r\n        }\r\n        // check world limits\r\n        const worldBounds = this.eng.physicsManager.bounds;\r\n        let hitLimit = false;\r\n        // y limits\r\n        if (b2.bottom <= worldBounds.bottom) {\r\n            this.instanceVelocity.y = 0;\r\n            this.nextVelocity.y = 0;\r\n            this.acceleration.y = 0;\r\n            b2.top = worldBounds.bottom + b2.height;\r\n            hitLimit = true;\r\n        }\r\n        else if (b2.top >= worldBounds.top) {\r\n            this.instanceVelocity.y = 0;\r\n            this.nextVelocity.y = 0;\r\n            this.acceleration.y = 0;\r\n            b2.top = worldBounds.top;\r\n            hitLimit = true;\r\n        }\r\n        // x limits\r\n        if (b2.right >= worldBounds.right) {\r\n            this.instanceVelocity.x = 0;\r\n            this.nextVelocity.x = 0;\r\n            this.acceleration.x = 0;\r\n            b2.left = worldBounds.right - b2.width;\r\n            hitLimit = true;\r\n        }\r\n        else if (b2.left <= worldBounds.left) {\r\n            this.instanceVelocity.x = 0;\r\n            this.nextVelocity.x = 0;\r\n            this.acceleration.x = 0;\r\n            b2.left = worldBounds.left;\r\n            hitLimit = true;\r\n        }\r\n    }\r\n}\r\nexports.RidgeBody = RidgeBody;\r\n\n\n//# sourceURL=webpack://earthquest/./src/physics/RidgeBody.ts?");

/***/ }),

/***/ "./src/shaders/SpriteInstanceShader.ts":
/*!*********************************************!*\
  !*** ./src/shaders/SpriteInstanceShader.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpriteInstanceShader = void 0;\r\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\r\n//\r\n// Vertex Shader program\r\n//\r\nconst vsSource = `\nattribute vec3 aPos;\nattribute vec2 aTex;\nattribute vec4 aInstanceWorld;\nattribute vec2 aOffset;\nattribute vec3 aTranslate;\nattribute vec4 aColorScale;\nattribute vec4 aTextureTransform;\nuniform mat4 uProj;\nvarying mediump vec2 vTex;\nvarying mediump vec4 vColorScale;\nvarying mediump vec3 depth;\n\nvoid main() {\n    vTex = (aTex*aTextureTransform.xy) + aTextureTransform.zw;\n    vColorScale = aColorScale;\n\n    mat2 trans = mat2(aInstanceWorld.xyzw);\n    vec4 localPos = vec4((aPos.xy + aOffset)  * trans, aPos.z, 1);\n\n    localPos +=vec4(aTranslate, 0);\n    vec4 pos =  uProj * localPos;\n    gl_Position =  pos;\n    depth = vec3((pos.z + 1.0) *.5);\n}\n`;\r\n//\r\n// Fragment shader program\r\n//\r\nconst fsSource = `\nvarying mediump vec2 vTex;\nvarying mediump  vec3 depth;\nuniform sampler2D uSampler;\nvarying mediump vec4 vColorScale;\n\nvoid main() {\n  mediump vec4 color = texture2D(uSampler, vTex);\n    if(color.a < .001) {\n      discard;\n    } \n\n    // uncomment to show depth\n    //gl_FragColor = vec4(depth.xyz, 1.0);\n    gl_FragColor = color * vColorScale;\n  \n}\n`;\r\n/**\r\n * Shader for sprites\r\n */\r\nclass SpriteInstanceShader {\r\n    constructor(gl, shaderId) {\r\n        this.gl = gl;\r\n        this._shader = new ShaderController_1.ShaderController(this.gl, shaderId);\r\n        this._shader.initShaderProgram(vsSource, fsSource);\r\n        // set the info\r\n        this._aPos = this._shader.getAttribute('aPos');\r\n        this._aTex = this._shader.getAttribute('aTex');\r\n        this._uSampler = this._shader.getUniform('uSampler');\r\n        this._uProj = this._shader.getUniform('uProj');\r\n    }\r\n    setProj(proj) {\r\n        this._shader.setMat4(this._uProj, proj);\r\n    }\r\n    setSpriteSheet(texture) {\r\n        this._texture = texture;\r\n    }\r\n    enable() {\r\n        this._shader.enable();\r\n        if (!this._texture) {\r\n            console.warn('texture is null. Call setSpriteSheet()');\r\n        }\r\n        else {\r\n            // Bind the texture to texture unit 0\r\n            this._texture.enable(this._uSampler);\r\n        }\r\n    }\r\n}\r\nexports.SpriteInstanceShader = SpriteInstanceShader;\r\n\n\n//# sourceURL=webpack://earthquest/./src/shaders/SpriteInstanceShader.ts?");

/***/ }),

/***/ "./src/shaders/SpritePerspectiveShader.ts":
/*!************************************************!*\
  !*** ./src/shaders/SpritePerspectiveShader.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpritePerspectiveShader = void 0;\r\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\r\n//\r\n// Vertex Shader program\r\n//\r\nconst vsSource = `\nattribute vec3 aPos;\nattribute vec2 aTex;\nuniform mat4 uProj;\nvarying mediump vec2 vTex;\nvarying mediump vec3 depth;\n\nvoid main() {\n    vTex = aTex;\n    vec4 pos =  uProj * vec4(aPos.xyz, 1.0);\n    gl_Position =  pos;\n    depth = vec3((pos.z + 1.0) *.5);\n}\n`;\r\n//\r\n// Fragment shader program\r\n//\r\nconst fsSource = `\nvarying mediump vec2 vTex;\nvarying mediump  vec3 depth;\nuniform sampler2D uSampler;\n\nvoid main() {\n  mediump vec4 color = texture2D(uSampler, vTex);\n    if(color.a < .001) {\n      discard;\n    } \n\n    // uncomment to show depth\n    //gl_FragColor = vec4(depth.xyz, 1.0);\n    gl_FragColor = color;\n  \n}\n`;\r\n/**\r\n * Shader for sprites\r\n */\r\nclass SpritePerspectiveShader {\r\n    constructor(gl, shaderId) {\r\n        this.gl = gl;\r\n        this._shader = new ShaderController_1.ShaderController(this.gl, shaderId);\r\n        this._shader.initShaderProgram(vsSource, fsSource);\r\n        // set the info\r\n        this._aPos = this._shader.getAttribute('aPos');\r\n        this._aTex = this._shader.getAttribute('aTex');\r\n        this._uSampler = this._shader.getUniform('uSampler');\r\n        this._uProj = this._shader.getUniform('uProj');\r\n    }\r\n    setProj(proj) {\r\n        this._shader.setMat4(this._uProj, proj);\r\n    }\r\n    setSpriteSheet(texture) {\r\n        this._texture = texture;\r\n    }\r\n    enable() {\r\n        this._shader.enable();\r\n        if (!this._texture) {\r\n            console.warn('texture is null. Call setSpriteSheet()');\r\n        }\r\n        else {\r\n            // Bind the texture to texture unit 0\r\n            this._texture.enable(this._uSampler);\r\n        }\r\n    }\r\n}\r\nexports.SpritePerspectiveShader = SpritePerspectiveShader;\r\n\n\n//# sourceURL=webpack://earthquest/./src/shaders/SpritePerspectiveShader.ts?");

/***/ }),

/***/ "./src/shaders/SpriteShader.ts":
/*!*************************************!*\
  !*** ./src/shaders/SpriteShader.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpriteShader = void 0;\r\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\r\n//\r\n// Vertex Shader program\r\n//\r\nconst vsSource = `\nattribute vec3 aPos;\nattribute vec2 aTex;\nuniform vec4 uColorScale;\nuniform mat4 uWorld;\nuniform mat4 uProj;\nuniform vec2 uOffset;\nvarying mediump vec2 vTex;\nvarying mediump vec4 vColorScale;\nvarying mediump vec3 depth;\n\nvoid main() {\n    vTex = (aTex);\n    vColorScale = uColorScale;\n\n    vec4 pos = uProj * uWorld * vec4(aPos.xy + uOffset, aPos.z, 1.0);\n    gl_Position =  pos;\n    depth = vec3((pos.z + 1.0) *.5);\n}\n`;\r\n//\r\n// Fragment shader program\r\n//\r\nconst fsSource = `\nvarying mediump vec2 vTex;\nvarying mediump  vec3 depth;\nuniform sampler2D uSampler;\nvarying mediump vec4 vColorScale;\n\nvoid main() {\n  mediump vec4 color = texture2D(uSampler, vTex);\n    \n  // uncomment to show depth\n  //gl_FragColor = vec4(1,1,1, 1.0);\n  gl_FragColor = color * vColorScale;\n  \n}\n`;\r\n/**\r\n * Shader for sprites\r\n */\r\nclass SpriteShader {\r\n    constructor(gl, shaderId) {\r\n        this.gl = gl;\r\n        this._shader = new ShaderController_1.ShaderController(this.gl, shaderId);\r\n        this._shader.initShaderProgram(vsSource, fsSource);\r\n        // set the info\r\n        this._aPos = this._shader.getAttribute('aPos');\r\n        this._aTex = this._shader.getAttribute('aTex');\r\n        this._uSampler = this._shader.getUniform('uSampler');\r\n        this._uProj = this._shader.getUniform('uProj');\r\n        this._uWorld = this._shader.getUniform('uWorld');\r\n        this._uOffset = this._shader.getUniform('uOffset');\r\n        this._uColorScale = this._shader.getUniform('uColorScale');\r\n    }\r\n    setProj(proj) {\r\n        this._shader.setMat4(this._uProj, proj);\r\n    }\r\n    setWorld(world) {\r\n        this._shader.setMat4(this._uWorld, world);\r\n    }\r\n    setOffset(offset) {\r\n        this._shader.setVec2(this._uOffset, offset);\r\n    }\r\n    setColorScale(color) {\r\n        this._shader.setVec4(this._uColorScale, color);\r\n    }\r\n    setSpriteSheet(texture) {\r\n        this._texture = texture;\r\n    }\r\n    enable() {\r\n        this._shader.enable();\r\n        if (!this._texture) {\r\n            console.warn('texture is null. Call setSpriteSheet()');\r\n        }\r\n        else {\r\n            // Bind the texture to texture unit 0\r\n            this._texture.enable(this._uSampler);\r\n        }\r\n    }\r\n}\r\nexports.SpriteShader = SpriteShader;\r\n\n\n//# sourceURL=webpack://earthquest/./src/shaders/SpriteShader.ts?");

/***/ }),

/***/ "./src/systems/AnnotationManager.ts":
/*!******************************************!*\
  !*** ./src/systems/AnnotationManager.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AnnotationManager = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst SpriteInstanceCollection_1 = __webpack_require__(/*! ../graphics/SpriteInstanceCollection */ \"./src/graphics/SpriteInstanceCollection.ts\");\r\nconst SpriteInstanceController_1 = __webpack_require__(/*! ../graphics/SpriteInstanceController */ \"./src/graphics/SpriteInstanceController.ts\");\r\nconst constants_1 = __webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\");\r\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\r\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\r\nclass AnnotationManager extends Component_1.Component {\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._lineSprites = new SpriteInstanceCollection_1.SpriteInstanceCollection(eng);\r\n        //this._boundSprites = new SpriteInstanceController(eng);\r\n    }\r\n    reset() {\r\n        this._lineSprites.clear();\r\n    }\r\n    removeAnnotation(id) {\r\n        this._lineSprites.removeQuad(id);\r\n    }\r\n    removeLine(id) {\r\n        this._lineSprites.removeQuad(id + '_line');\r\n    }\r\n    removeRect(id) {\r\n        this.removeLine(id + '_left');\r\n        this.removeLine(id + '_right');\r\n        this.removeLine(id + '_top');\r\n        this.removeLine(id + '_bottom');\r\n    }\r\n    /**\r\n     * builds a line\r\n     * @param args\r\n     */\r\n    buildLine(args) {\r\n        const id = args.id + '_line';\r\n        const rotation = (0, constants_1.toDegrees)(Math.atan2(args.end.y - args.start.y, args.end.x - args.start.x));\r\n        const distance = args.end.copy().subtract(args.start).length();\r\n        const controller = new SpriteInstanceController_1.SpriteInstanceController(id, this._lineSprites);\r\n        controller.left = args.start.x;\r\n        controller.top = args.start.y;\r\n        controller.spriteImage('block');\r\n        controller.leftOffset = 1;\r\n        controller.topOffset = -0.5;\r\n        controller.depth = args.depth ?? -0.4;\r\n        controller.colorScale = args.color ?? new vec4_1.default([0, 0, 0, 1]);\r\n        controller.xScale = distance * 0.5;\r\n        controller.yScale = args.thickness ?? 1;\r\n        controller.angle = rotation;\r\n    }\r\n    buildCrossHair(id, bounds, color) {\r\n        const midX = (bounds.left + bounds.right) * 0.5;\r\n        const midY = (bounds.top + bounds.bottom) * 0.5;\r\n        this.buildLine({\r\n            id: id + '_vertical',\r\n            start: new vec2_1.default(midX, bounds.top),\r\n            end: new vec2_1.default(midX, bounds.bottom),\r\n            color,\r\n        });\r\n        this.buildLine({\r\n            id: id + '_horizontal',\r\n            start: new vec2_1.default(bounds.left, midY),\r\n            end: new vec2_1.default(bounds.right, midY),\r\n            color,\r\n        });\r\n    }\r\n    /**\r\n     * Builds a rect\r\n     * @param id\r\n     * @param bounds\r\n     * @param color\r\n     */\r\n    buildRect(id, bounds, color, depth) {\r\n        this.buildLine({\r\n            id: id + '_left',\r\n            start: new vec2_1.default(bounds.left, bounds.bottom),\r\n            end: new vec2_1.default(bounds.left, bounds.top),\r\n            color,\r\n            depth,\r\n        });\r\n        this.buildLine({\r\n            id: id + '_top',\r\n            start: new vec2_1.default(bounds.left, bounds.top),\r\n            end: new vec2_1.default(bounds.right, bounds.top),\r\n            color,\r\n            depth,\r\n        });\r\n        this.buildLine({\r\n            id: id + '_right',\r\n            start: new vec2_1.default(bounds.right, bounds.top),\r\n            end: new vec2_1.default(bounds.right, bounds.bottom),\r\n            color,\r\n            depth,\r\n        });\r\n        this.buildLine({\r\n            id: id + '_bottom',\r\n            start: new vec2_1.default(bounds.left, bounds.bottom),\r\n            end: new vec2_1.default(bounds.right, bounds.bottom),\r\n            color,\r\n            depth,\r\n        });\r\n    }\r\n    initialize() {\r\n        this._lineSprites.initialize(this.eng.assetManager.menu.texture, this.eng.assetManager.menu.data);\r\n    }\r\n    update(dt) {\r\n        this._lineSprites.update(dt);\r\n    }\r\n}\r\nexports.AnnotationManager = AnnotationManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/AnnotationManager.ts?");

/***/ }),

/***/ "./src/systems/AssetManager.ts":
/*!*************************************!*\
  !*** ./src/systems/AssetManager.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AssetManager = exports.BuiltInTextureAssets = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst font_png_1 = __importDefault(__webpack_require__(/*! ../assets/font.png */ \"./src/assets/font.png\"));\r\nconst font_json_1 = __importDefault(__webpack_require__(/*! ../assets/font.json */ \"./src/assets/font.json\"));\r\nconst menu_png_1 = __importDefault(__webpack_require__(/*! ../assets/menu.png */ \"./src/assets/menu.png\"));\r\nconst menu_json_1 = __importDefault(__webpack_require__(/*! ../assets/menu.json */ \"./src/assets/menu.json\"));\r\nconst Texture_1 = __webpack_require__(/*! ../graphics/Texture */ \"./src/graphics/Texture.ts\");\r\nconst ISpriteData_1 = __webpack_require__(/*! ../graphics/ISpriteData */ \"./src/graphics/ISpriteData.ts\");\r\nclass BuiltInTextureAssets {\r\n}\r\nexports.BuiltInTextureAssets = BuiltInTextureAssets;\r\nBuiltInTextureAssets.menu = 'menu';\r\n/**\r\n * Manages texture assets. This only has two that it manages. One is the font\r\n * the other is the menu.\r\n */\r\nclass AssetManager extends Component_1.Component {\r\n    get font() {\r\n        return { texture: this._font, data: font_json_1.default };\r\n    }\r\n    get menu() {\r\n        return this.textures.get(BuiltInTextureAssets.menu);\r\n    }\r\n    /**\r\n     * For implementation\r\n     * @param id\r\n     * @returns\r\n     */\r\n    getTexture(id) {\r\n        return this.textures.get(id);\r\n    }\r\n    /**\r\n     * Create a map of textures\r\n     * @param eng\r\n     */\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.textures = new Map();\r\n    }\r\n    /**\r\n     * Initialize built in textures\r\n     */\r\n    async initialize() {\r\n        this._font = new Texture_1.Texture('font', this.gl);\r\n        await this._font.loadImage(font_png_1.default);\r\n        await this.loadTexture(BuiltInTextureAssets.menu, menu_png_1.default, menu_json_1.default);\r\n    }\r\n    /**\r\n     * Loads a texture and saves it in the texture map\r\n     * @param imageFile\r\n     * @returns\r\n     */\r\n    async loadTexture(id, imageFile, data) {\r\n        // create the texture\r\n        const texture = new Texture_1.Texture(id, this.gl);\r\n        // load the texture\r\n        await texture.loadImage(imageFile);\r\n        // store the texture\r\n        this.textures.set(id, { texture, data: new ISpriteData_1.SpriteData(data) });\r\n        return texture;\r\n    }\r\n}\r\nexports.AssetManager = AssetManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/AssetManager.ts?");

/***/ }),

/***/ "./src/systems/BackgroundManager.ts":
/*!******************************************!*\
  !*** ./src/systems/BackgroundManager.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BackgroundManager = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\n/**\r\n * Manages different backgrounds and foregrounds in a level\r\n */\r\nclass BackgroundManager extends Component_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.backgrounds = [];\r\n    }\r\n    addBackground(background) {\r\n        this.backgrounds.push(background);\r\n    }\r\n    update(dt) {\r\n        this.backgrounds.forEach((bg) => bg.update(dt));\r\n    }\r\n    dispose() {\r\n        this.backgrounds.forEach((bg) => bg.dispose());\r\n    }\r\n}\r\nexports.BackgroundManager = BackgroundManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/BackgroundManager.ts?");

/***/ }),

/***/ "./src/systems/DialogManager.ts":
/*!**************************************!*\
  !*** ./src/systems/DialogManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DialogManager = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst SpriteBatchController_1 = __webpack_require__(/*! ../graphics/SpriteBatchController */ \"./src/graphics/SpriteBatchController.ts\");\r\nconst DialogComponent_1 = __webpack_require__(/*! ../menus/DialogComponent */ \"./src/menus/DialogComponent.ts\");\r\nconst GameMenuComponent_1 = __webpack_require__(/*! ../menus/GameMenuComponent */ \"./src/menus/GameMenuComponent.ts\");\r\nconst DialogBuilder_1 = __webpack_require__(/*! ../menus/DialogBuilder */ \"./src/menus/DialogBuilder.ts\");\r\nconst GameMenuBuilder_1 = __webpack_require__(/*! ../menus/GameMenuBuilder */ \"./src/menus/GameMenuBuilder.ts\");\r\n/**\r\n * Manages dialog boxes\r\n */\r\nclass DialogManager extends Component_1.Component {\r\n    /**\r\n     * Get the game menu\r\n     */\r\n    get gameMenu() {\r\n        return this._gameMenu;\r\n    }\r\n    /**\r\n     * Get the dialog menu\r\n     */\r\n    get dialog() {\r\n        return this._dialog;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._dialogBuild = new DialogBuilder_1.DialogBuilder(eng);\r\n        this._gameMenuBuilder = new GameMenuBuilder_1.GameMenuBuilder(eng);\r\n        this._spriteBatch = new SpriteBatchController_1.SpritBatchController(eng);\r\n        this._dialog = new DialogComponent_1.DialogComponent(this.eng, this._dialogBuild);\r\n        this._gameMenu = new GameMenuComponent_1.GameMenuComponent(this.eng, 'gameMenu', this._gameMenuBuilder);\r\n    }\r\n    async initialize() {\r\n        const texture = this.eng.assetManager.menu.texture;\r\n        const data = this.eng.assetManager.menu.data;\r\n        this._spriteBatch.initialize(texture, data);\r\n        this._dialog.initialize(this._spriteBatch);\r\n        this._gameMenu.initialize(this._spriteBatch);\r\n    }\r\n    /**\r\n     * Handles user actions for the menu\r\n     * @param action\r\n     * @returns\r\n     */\r\n    handleUserAction(state) {\r\n        return (this._dialog.handleUserAction(state) ||\r\n            this._gameMenu.handleUserAction(state));\r\n    }\r\n    /**\r\n     * Shows a dialog box\r\n     * @param text\r\n     * @param loc\r\n     */\r\n    showDialog(text, loc, onClosed, options, onClosing, depth = -0.5) {\r\n        this._dialog.setOptions(options);\r\n        this._dialog.setPosition(loc.x, loc.y);\r\n        this._dialog.setSize(loc.width, loc.height);\r\n        this._dialog.setText(text);\r\n        this._dialog.onClosed = onClosed;\r\n        this._dialog.onClosing = onClosing;\r\n        this._dialog.setDepth(depth);\r\n        this._dialog.show();\r\n    }\r\n    showGameMenu(onHide) {\r\n        this._gameMenu.onHide = onHide;\r\n        this._gameMenu.show();\r\n    }\r\n    /**\r\n     * Updates the dialog box\r\n     * @param dt\r\n     */\r\n    update(dt) {\r\n        this._dialog.update(dt);\r\n        this._gameMenu.update(dt);\r\n        this._spriteBatch.update(dt);\r\n    }\r\n}\r\nexports.DialogManager = DialogManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/DialogManager.ts?");

/***/ }),

/***/ "./src/systems/GameManager.ts":
/*!************************************!*\
  !*** ./src/systems/GameManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameManager = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst GameData_1 = __webpack_require__(/*! ../data/GameData */ \"./src/data/GameData.ts\");\r\n/** Key for local storage */\r\nconst localStorageKey = 'EarthQuest';\r\n/**\r\n * This is the main class that manages game state\r\n */\r\nclass GameManager extends Component_1.Component {\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._timeCounter = 0;\r\n    }\r\n    /**\r\n     * Load game data from local storage\r\n     */\r\n    initialize() {\r\n        if (localStorage.getItem(localStorageKey)) {\r\n            this.data = JSON.parse(localStorage[localStorageKey]);\r\n        }\r\n        else {\r\n            this.data = new GameData_1.GameData();\r\n        }\r\n    }\r\n    /**\r\n     * Save game data in local storage\r\n     */\r\n    save() {\r\n        localStorage[localStorageKey] = JSON.stringify(this.data);\r\n    }\r\n    /**\r\n     * Update the game time\r\n     * @param dt\r\n     */\r\n    update(dt) {\r\n        const t = this.data.player.timePlayed;\r\n        this._timeCounter += dt;\r\n        if (this._timeCounter > 1000) {\r\n            t.s++;\r\n            this._timeCounter = this._timeCounter % 1000;\r\n            if (t.s >= 60) {\r\n                t.s -= 60;\r\n                t.m++;\r\n            }\r\n            if (t.m >= 60) {\r\n                t.m -= 60;\r\n                t.h++;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.GameManager = GameManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/GameManager.ts?");

/***/ }),

/***/ "./src/systems/ParticleManager.ts":
/*!****************************************!*\
  !*** ./src/systems/ParticleManager.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ParticleManager = void 0;\r\nconst Emitter_1 = __webpack_require__(/*! ../particle/Emitter */ \"./src/particle/Emitter.ts\");\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst SpriteInstanceShader_1 = __webpack_require__(/*! ../shaders/SpriteInstanceShader */ \"./src/shaders/SpriteInstanceShader.ts\");\r\nclass ParticleManager extends Component_1.Component {\r\n    get shader() {\r\n        return this._shader;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.emitter = new Map();\r\n        this._shader = new SpriteInstanceShader_1.SpriteInstanceShader(eng.gl, 'instancing');\r\n    }\r\n    /**\r\n     * Add an emitter\r\n     * @param name\r\n     * @param options\r\n     */\r\n    setEmitter(name, options) {\r\n        let emitter = this.emitter.get(name);\r\n        if (!emitter) {\r\n            emitter = new Emitter_1.Emitter(this.eng, name);\r\n            this.emitter.set(name, emitter);\r\n        }\r\n        emitter.initialize(options);\r\n        return emitter;\r\n    }\r\n    /**\r\n     * Remove the emitter\r\n     * @param name\r\n     */\r\n    removeEmitter(name) {\r\n        let emitter = this.emitter.get(name);\r\n        if (emitter) {\r\n            emitter.dispose();\r\n            this.emitter.delete(name);\r\n        }\r\n    }\r\n    initialize() { }\r\n    update(dt) {\r\n        this.emitter.forEach((e) => e.update(dt));\r\n    }\r\n}\r\nexports.ParticleManager = ParticleManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/ParticleManager.ts?");

/***/ }),

/***/ "./src/systems/PhysicsManager.ts":
/*!***************************************!*\
  !*** ./src/systems/PhysicsManager.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PhysicsManager = exports.PixelsToMeters = exports.MetersToPixels = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst rect_1 = __importDefault(__webpack_require__(/*! ../math/rect */ \"./src/math/rect.ts\"));\r\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\r\nconst QuadTree_1 = __webpack_require__(/*! ../physics/QuadTree */ \"./src/physics/QuadTree.ts\");\r\n/**\r\n * How many pixels in a meter\r\n */\r\nexports.MetersToPixels = 70 / 0.25; // 70 pixels ~ 4.5 ft\r\nexports.PixelsToMeters = 1 / exports.MetersToPixels;\r\n/**\r\n * Holds forces\r\n */\r\nclass PhysicsManager extends Component_1.Component {\r\n    get bounds() {\r\n        return this._bounds;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.gravity = new vec3_1.default([0, -9.8, 0]);\r\n        this.wind = new vec3_1.default();\r\n        this._bounds = new rect_1.default([0, 10000, 2000, 2000]);\r\n        this.quadTree = new QuadTree_1.QuadTree(10000, 5);\r\n        this.ridgeBodies = [];\r\n        this.collisions = [];\r\n    }\r\n    initializeBounds(width, height, quadTreeDepth = 5) {\r\n        const size = Math.max(width, height);\r\n        this._bounds = new rect_1.default([0, width, height, height]);\r\n        this.quadTree = new QuadTree_1.QuadTree(size, quadTreeDepth);\r\n    }\r\n    initialize() { }\r\n    setCollision(collision) {\r\n        this.collisions.push(collision);\r\n        this.quadTree.addCollision(collision);\r\n    }\r\n    getCollision() {\r\n        return this.collisions;\r\n    }\r\n    addBody(body) {\r\n        this.ridgeBodies.push(body);\r\n    }\r\n    removeBody(body) {\r\n        this.ridgeBodies = this.ridgeBodies.filter((r) => r.id != body.id);\r\n    }\r\n    update(dt) {\r\n        for (let i = 0; i < this.ridgeBodies.length; i++) {\r\n            this.ridgeBodies[i].update(dt);\r\n        }\r\n    }\r\n    /**\r\n     * Check for collision\r\n     * @param collision\r\n     * @param results\r\n     * @param analytics\r\n     * @returns\r\n     */\r\n    checkForCollision(collision, results, analytics) {\r\n        return this.quadTree.checkForCollision(collision, results, analytics);\r\n    }\r\n}\r\nexports.PhysicsManager = PhysicsManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/PhysicsManager.ts?");

/***/ }),

/***/ "./src/systems/SceneManager.ts":
/*!*************************************!*\
  !*** ./src/systems/SceneManager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SceneManager = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nclass SceneManager extends Component_1.Component {\r\n    get sceneReady() {\r\n        return this._sceneReady;\r\n    }\r\n    get scene() {\r\n        return this._activeScene;\r\n    }\r\n    constructor(eng, _sceneFactory) {\r\n        super(eng);\r\n        this._sceneFactory = _sceneFactory;\r\n    }\r\n    async initialize() {\r\n        //NOP\r\n    }\r\n    /**\r\n     * This is used to change the scene on the next update.\r\n     * @param scene\r\n     */\r\n    setNextScene(scene) {\r\n        this._nextScene = scene;\r\n    }\r\n    /**\r\n     * Switch to a different scene. This should only be called from platform engine.\r\n     * everything else should use setNextScene()\r\n     * @param newScene\r\n     */\r\n    async changeScene(type) {\r\n        this._sceneReady = false;\r\n        this._nextScene = '';\r\n        const scene = this._sceneFactory.createScene(type);\r\n        if (!scene) {\r\n            console.error('failed to change scene to ' + type);\r\n            return false;\r\n        }\r\n        if (this._activeScene) {\r\n            this._activeScene.dispose();\r\n        }\r\n        this._activeScene = scene;\r\n        await this._activeScene.initialize();\r\n        this._sceneReady = true;\r\n    }\r\n    /**\r\n     * Called every frame\r\n     * @param dt\r\n     */\r\n    update(dt) {\r\n        if (this._nextScene) {\r\n            this.changeScene(this._nextScene);\r\n        }\r\n        if (this._sceneReady) {\r\n            this._activeScene.update(dt);\r\n        }\r\n    }\r\n    postUpdate(dt) {\r\n        this._activeScene.postUpdate(dt);\r\n    }\r\n    /**\r\n     * When the window is resized\r\n     */\r\n    resize(width, height) {\r\n        this._activeScene.resize(width, height);\r\n    }\r\n}\r\nexports.SceneManager = SceneManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/SceneManager.ts?");

/***/ }),

/***/ "./src/systems/SoundManager.ts":
/*!*************************************!*\
  !*** ./src/systems/SoundManager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SoundManager = void 0;\r\n/**\r\n * Manages background sounds and sounds effects\r\n */\r\nclass SoundManager {\r\n    constructor() { }\r\n    playMusic(music) {\r\n        console.warn(\"sound manager not implemented.\");\r\n    }\r\n    UserReady() {\r\n        if (!this.userInteraction) {\r\n            //this.audio.play();\r\n            //this.audio.loop = true;\r\n            this.userInteraction = true;\r\n        }\r\n    }\r\n}\r\nexports.SoundManager = SoundManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/SoundManager.ts?");

/***/ }),

/***/ "./src/systems/TextManager.ts":
/*!************************************!*\
  !*** ./src/systems/TextManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TextManager = void 0;\r\nconst TextController_1 = __webpack_require__(/*! ../graphics/TextController */ \"./src/graphics/TextController.ts\");\r\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\n/**\r\n * Vertex shader for Font\r\n */\r\nconst FontVS = `\n    attribute vec3 aPos;\n    attribute vec2 aTex;\n\n    varying mediump vec2 vTex;\n                                                \n    void main() {\n        vTex = aTex;\n        gl_Position = vec4(aPos.xyz, 1.0);\n    }                          \n`;\r\n/**\r\n * Fragment shader for Font\r\n */\r\nconst FontFS = ` \n      varying mediump vec2 vTex;\n\n      uniform sampler2D uFont;\n      uniform mediump vec4 uColor;\n                            \n      void main() {\n        mediump vec4 color = texture2D(uFont, vTex) * uColor;\n        if(color.w > 0.2) { \n          gl_FragColor = texture2D(uFont, vTex) * uColor;\n        } else {\n          discard;\n        }\n      }\n`;\r\n/**\r\n * Font manager keeps track of all FontController objects\r\n */\r\nclass TextManager extends Component_1.Component {\r\n    get lineHeight() {\r\n        return this.maxHeightOfCharacters;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this.texts = new Map();\r\n        this.shader = new ShaderController_1.ShaderController(this.gl, 'fontShader');\r\n        /** Shader info for this shader */\r\n        this.shaderInfo = {\r\n            attr: { aPos: 0, aTex: 0 },\r\n            uniform: { uFont: 0, uColor: 0 },\r\n        };\r\n    }\r\n    /**\r\n     * Initialize the font manage. Only one font can be used per manager\r\n     * The font data is a json structure.\r\n     * @param {} fontImage\r\n     * @param {FontData} fontData\r\n     */\r\n    async initialize() {\r\n        this.fontData = this.eng.assetManager.font.data;\r\n        this.fontTexture = this.eng.assetManager.font.texture;\r\n        this.shader.initShaderProgram(FontVS, FontFS);\r\n        this.shaderInfo.attr.aPos = this.shader.getAttribute('aPos');\r\n        this.shaderInfo.attr.aTex = this.shader.getAttribute('aTex');\r\n        this.shaderInfo.uniform.uFont = this.shader.getUniform('uFont');\r\n        this.shaderInfo.uniform.uColor = this.shader.getUniform('uColor');\r\n        // find the tallest character. This will be used when calculating new lines\r\n        this.maxHeightOfCharacters = 0;\r\n        this.fontData.forEach((value) => {\r\n            if (value.sizeY > this.maxHeightOfCharacters) {\r\n                this.maxHeightOfCharacters = value.sizeY;\r\n            }\r\n        });\r\n        // reset the text controllers\r\n        this.texts.clear();\r\n    }\r\n    /**\r\n     * Get text size of a given string\r\n     * @param text\r\n     * @returns\r\n     */\r\n    getTextSize(text) {\r\n        if (!text || this.maxHeightOfCharacters == 0) {\r\n            return { width: 0, height: 0 };\r\n        }\r\n        let width = 0;\r\n        let offsetX = 0;\r\n        let height = this.maxHeightOfCharacters;\r\n        for (let i = 0; i < text.length; i++) {\r\n            let ch = text[i];\r\n            if (ch == '\\n') {\r\n                offsetX = 0;\r\n                height += this.maxHeightOfCharacters;\r\n            }\r\n            else if (ch < ' ' || ch > '~') {\r\n                ch = '?';\r\n            }\r\n            const font = this.fontData.find((value) => value.ch == ch);\r\n            if (!font) {\r\n                console.warn(\"Don't have data for ch: \" + ch);\r\n                continue;\r\n            }\r\n            offsetX += font.advance;\r\n        }\r\n        return { width: offsetX, height };\r\n    }\r\n    /**\r\n     * Updates all the TextureController\r\n     * @param {number} dt Delta time in ms\r\n     */\r\n    update(dt) {\r\n        // enable the shader\r\n        this.shader.enable();\r\n        // Bind the texture to texture unit 0\r\n        this.fontTexture.enable(this.shaderInfo.uniform.uFont);\r\n        this.texts.forEach((text) => {\r\n            this.shader.setVec4(this.shaderInfo.uniform.uColor, text.color);\r\n            this.shaderInfo.uniform.uColor;\r\n            text.update(dt);\r\n        });\r\n    }\r\n    /**\r\n     * Hide a text\r\n     * @param id\r\n     */\r\n    hideText(id) {\r\n        this.texts.delete(id);\r\n    }\r\n    setTextBlock(textModel) {\r\n        let controller = this.texts.get(textModel.id);\r\n        // create one if needed\r\n        if (!controller) {\r\n            controller = new TextController_1.TextController(this.eng, this.fontData);\r\n            this.texts.set(textModel.id, controller);\r\n        }\r\n        controller.initialize(textModel, this.maxHeightOfCharacters);\r\n    }\r\n    /**\r\n     * clean up everything\r\n     */\r\n    dispose() { }\r\n}\r\nexports.TextManager = TextManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/TextManager.ts?");

/***/ }),

/***/ "./src/systems/ViewManager.ts":
/*!************************************!*\
  !*** ./src/systems/ViewManager.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ViewManager = void 0;\r\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\r\nconst MathConst = __importStar(__webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\"));\r\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../math/mat4 */ \"./src/math/mat4.ts\"));\r\n/**\r\n * The View manager is used to move the project.\r\n */\r\nclass ViewManager extends Component_1.Component {\r\n    setXLimits(minX, maxX) {\r\n        this.minX = minX;\r\n        this.maxX = maxX;\r\n        this.updateProjection();\r\n    }\r\n    setYLimits(minY, maxY) {\r\n        this.minX = minY;\r\n        this.maxY = maxY;\r\n        this.updateProjection();\r\n    }\r\n    get screenX() {\r\n        return this._screenX;\r\n    }\r\n    get screenY() {\r\n        return this._screenY;\r\n    }\r\n    /**\r\n     * Scale the width and height of the project\r\n     */\r\n    set scale(value) {\r\n        this._scale = value < this._minScale ? this._minScale : value;\r\n        this.updateProjection();\r\n    }\r\n    get scale() {\r\n        return this._scale;\r\n    }\r\n    get left() {\r\n        return this._left;\r\n    }\r\n    get top() {\r\n        return this._top;\r\n    }\r\n    get bottom() {\r\n        return this._bottom;\r\n    }\r\n    get right() {\r\n        return this._right;\r\n    }\r\n    get projection() {\r\n        return this._projection;\r\n    }\r\n    constructor(eng) {\r\n        super(eng);\r\n        this._minScale = 0.01;\r\n        this._targetX = 0;\r\n        this._targetY = 0;\r\n        this._top = 0;\r\n        this._left = 0;\r\n        this._right = 0;\r\n        this._bottom = 0;\r\n        this._projection = mat4_1.default.orthographic(this._left, this._right, this._bottom, this._top, 1, -1);\r\n        this._screenX = 0;\r\n        this._screenY = 0;\r\n        this._screenW = eng.width;\r\n        this._screenH = eng.height;\r\n        this.scale = 1.0;\r\n    }\r\n    /**\r\n     * Calculates a projection\r\n     * @returns\r\n     */\r\n    calculateProjection(offset, scale = 1.0) {\r\n        const adjustX = offset.x + (this.eng.width - this.eng.width * scale);\r\n        const adjustY = offset.y + (this.eng.height - this.eng.height * scale);\r\n        return mat4_1.default.orthographic(adjustX, this.eng.width * scale + offset.x, adjustY, this.eng.height * scale + offset.y, 1, -1);\r\n    }\r\n    /**\r\n     * Set the target for the project\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setTarget(x, y) {\r\n        this._targetX = x;\r\n        this._targetY = y;\r\n        this.updateProjection();\r\n    }\r\n    updateProjection() {\r\n        this._screenX = Math.floor(this._targetX);\r\n        if (this.minX != undefined && this.maxX != undefined) {\r\n            this._screenX = MathConst.clamp(this._targetX, this.minX, this.maxX);\r\n        }\r\n        this._screenY = Math.floor(this._targetY);\r\n        if (this.minY && this.maxY) {\r\n            this._screenY = MathConst.clamp(this._targetY, this.minY, this.maxY);\r\n        }\r\n        this._left =\r\n            this._screenX + (this.eng.width - this.eng.width * this._scale);\r\n        this._bottom =\r\n            this._screenY + (this.eng.height - this.eng.height * this._scale);\r\n        this._right = this.eng.width * this._scale + this._screenX;\r\n        this._top = this.eng.height * this._scale + this._screenY;\r\n        this._projection = mat4_1.default.orthographic(this._left, this._right, this._bottom, this._top, 1, -1);\r\n    }\r\n    update(dt) { }\r\n    resize(width, height) {\r\n        this.updateProjection();\r\n    }\r\n}\r\nexports.ViewManager = ViewManager;\r\n\n\n//# sourceURL=webpack://earthquest/./src/systems/ViewManager.ts?");

/***/ }),

/***/ "./src/utilities/Random.ts":
/*!*********************************!*\
  !*** ./src/utilities/Random.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Random = void 0;\r\n/**\r\n * A simple random class that takes a seed value.\r\n * https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\r\n */\r\nclass Random {\r\n    constructor(seed) {\r\n        const seedXor = seed ^ 0xdeadbeef; // 32-bit seed with optional XOR value\r\n        // Pad seed with Phi, Pi and E.\r\n        // https://en.wikipedia.org/wiki/Nothing-up-my-sleeve_number\r\n        this.rand = this.sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed);\r\n    }\r\n    getUuid() {\r\n        if ((typeof window !== 'undefined') && window?.crypto?.randomUUID != undefined) {\r\n            return window.crypto.randomUUID();\r\n        }\r\n        else {\r\n            return (Math.floor(this.rand() * 100000000)\r\n                .toString(16)\r\n                .padStart(8, '0') +\r\n                '-' +\r\n                Math.floor(this.rand() * 1000)\r\n                    .toString(16)\r\n                    .padStart(4, '0') +\r\n                '-' +\r\n                Math.floor(this.rand() * 1000)\r\n                    .toString(16)\r\n                    .padStart(4, '0') +\r\n                '-' +\r\n                Math.floor(this.rand() * 100000000)\r\n                    .toString(16)\r\n                    .padStart(8, '0'));\r\n        }\r\n    }\r\n    sfc32(a, b, c, d) {\r\n        return () => {\r\n            a >>>= 0;\r\n            b >>>= 0;\r\n            c >>>= 0;\r\n            d >>>= 0;\r\n            var t = (a + b) | 0;\r\n            a = b ^ (b >>> 9);\r\n            b = (c + (c << 3)) | 0;\r\n            c = (c << 21) | (c >>> 11);\r\n            d = (d + 1) | 0;\r\n            t = (t + d) | 0;\r\n            c = (c + t) | 0;\r\n            return (t >>> 0) / 4294967296;\r\n        };\r\n    }\r\n}\r\nexports.Random = Random;\r\n\n\n//# sourceURL=webpack://earthquest/./src/utilities/Random.ts?");

/***/ }),

/***/ "./node_modules/jsx-dom/index.js":
/*!***************************************!*\
  !*** ./node_modules/jsx-dom/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Component: () => (/* binding */ Component),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   PureComponent: () => (/* binding */ Component),\n/* harmony export */   SVGNamespace: () => (/* binding */ SVGNamespace),\n/* harmony export */   ShadowRoot: () => (/* binding */ ShadowRoot),\n/* harmony export */   StrictMode: () => (/* binding */ Fragment),\n/* harmony export */   className: () => (/* binding */ className),\n/* harmony export */   createElement: () => (/* binding */ createElement),\n/* harmony export */   createFactory: () => (/* binding */ createFactory),\n/* harmony export */   createRef: () => (/* binding */ createRef),\n/* harmony export */   \"default\": () => (/* binding */ index),\n/* harmony export */   h: () => (/* binding */ createElement),\n/* harmony export */   isRef: () => (/* binding */ isRef),\n/* harmony export */   jsx: () => (/* binding */ jsx),\n/* harmony export */   jsxs: () => (/* binding */ jsx),\n/* harmony export */   memo: () => (/* binding */ identity),\n/* harmony export */   preventDefault: () => (/* binding */ preventDefault),\n/* harmony export */   stopPropagation: () => (/* binding */ stopPropagation),\n/* harmony export */   styled: () => (/* binding */ styled),\n/* harmony export */   useCallback: () => (/* binding */ identity),\n/* harmony export */   useClassList: () => (/* binding */ useClassList),\n/* harmony export */   useMemo: () => (/* binding */ useMemo),\n/* harmony export */   useRef: () => (/* binding */ createRef),\n/* harmony export */   useText: () => (/* binding */ useText)\n/* harmony export */ });\n/* eslint-disable */\nconst keys = Object.keys\nfunction identity(value) {\n  return value\n}\nfunction isBoolean(val) {\n  return typeof val === \"boolean\"\n}\nfunction isElement(val) {\n  return val && typeof val.nodeType === \"number\"\n}\nfunction isString(val) {\n  return typeof val === \"string\"\n}\nfunction isNumber(val) {\n  return typeof val === \"number\"\n}\nfunction isObject(val) {\n  return typeof val === \"object\" ? val !== null : isFunction(val)\n}\nfunction isFunction(val) {\n  return typeof val === \"function\"\n}\nfunction isComponentClass(Component) {\n  const { prototype } = Component\n  return !!(prototype && prototype.isReactComponent)\n}\nfunction isArrayLike(obj) {\n  return isObject(obj) && typeof obj.length === \"number\" && typeof obj.nodeType !== \"number\"\n}\nfunction forEach(value, fn) {\n  if (!value) return\n  for (const key of keys(value)) {\n    fn(value[key], key)\n  }\n}\n\nfunction createRef() {\n  return Object.seal({\n    current: null,\n  })\n}\nfunction isRef(maybeRef) {\n  return isObject(maybeRef) && \"current\" in maybeRef\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found on\n * https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/LICENSE\n */\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nconst isUnitlessNumber = {\n  animationIterationCount: 0,\n  borderImageOutset: 0,\n  borderImageSlice: 0,\n  borderImageWidth: 0,\n  boxFlex: 0,\n  boxFlexGroup: 0,\n  boxOrdinalGroup: 0,\n  columnCount: 0,\n  columns: 0,\n  flex: 0,\n  flexGrow: 0,\n  flexPositive: 0,\n  flexShrink: 0,\n  flexNegative: 0,\n  flexOrder: 0,\n  gridArea: 0,\n  gridRow: 0,\n  gridRowEnd: 0,\n  gridRowSpan: 0,\n  gridRowStart: 0,\n  gridColumn: 0,\n  gridColumnEnd: 0,\n  gridColumnSpan: 0,\n  gridColumnStart: 0,\n  fontWeight: 0,\n  lineClamp: 0,\n  lineHeight: 0,\n  opacity: 0,\n  order: 0,\n  orphans: 0,\n  tabSize: 0,\n  widows: 0,\n  zIndex: 0,\n  zoom: 0,\n  // SVG-related properties\n  fillOpacity: 0,\n  floodOpacity: 0,\n  stopOpacity: 0,\n  strokeDasharray: 0,\n  strokeDashoffset: 0,\n  strokeMiterlimit: 0,\n  strokeOpacity: 0,\n  strokeWidth: 0,\n}\n\n/**\n * @param prefix vendor-specific prefix, eg: Webkit\n * @param key style name, eg: transitionDuration\n * @return style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1)\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nconst prefixes = [\"Webkit\", \"ms\", \"Moz\", \"O\"]\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nkeys(isUnitlessNumber).forEach(prop => {\n  prefixes.forEach(prefix => {\n    isUnitlessNumber[prefixKey(prefix, prop)] = 0 // isUnitlessNumber[prop]\n  })\n})\n\nconst jsxDomType = Symbol.for(\"jsx-dom:type\")\nvar JsxDomType = /*#__PURE__*/ (function (JsxDomType) {\n  JsxDomType[\"ShadowRoot\"] = \"ShadowRoot\"\n  return JsxDomType\n})(JsxDomType || {})\nfunction ShadowRoot(_ref) {\n  let { children, ref, ...attr } = _ref\n  return {\n    [jsxDomType]: JsxDomType.ShadowRoot,\n    ref,\n    attr,\n    children,\n  }\n}\nfunction isShadowRoot(el) {\n  return el != null && el[jsxDomType] === JsxDomType.ShadowRoot\n}\n\nconst SVGNamespace = \"http://www.w3.org/2000/svg\"\nconst XLinkNamespace = \"http://www.w3.org/1999/xlink\"\nconst XMLNamespace = \"http://www.w3.org/XML/1998/namespace\"\n\n// https://facebook.github.io/react/docs/jsx-in-depth.html#booleans-null-and-undefined-are-ignored\n// Emulate JSX Expression logic to ignore certain type of children or className.\nfunction isVisibleChild(value) {\n  return !isBoolean(value) && value != null\n}\nconst DomTokenList = typeof DOMTokenList !== \"undefined\" ? DOMTokenList : function () {}\n\n/**\n * Convert a `value` to a className string.\n * `value` can be a string, an array or a `Dictionary<boolean>`.\n */\nfunction className(value) {\n  if (Array.isArray(value)) {\n    return value.map(className).filter(Boolean).join(\" \")\n  } else if (value instanceof DomTokenList) {\n    return \"\" + value\n  } else if (isObject(value)) {\n    return keys(value)\n      .filter(k => value[k])\n      .join(\" \")\n  } else if (isVisibleChild(value)) {\n    return \"\" + value\n  } else {\n    return \"\"\n  }\n}\nconst svg = {\n  animate: 0,\n  circle: 0,\n  clipPath: 0,\n  defs: 0,\n  desc: 0,\n  ellipse: 0,\n  feBlend: 0,\n  feColorMatrix: 0,\n  feComponentTransfer: 0,\n  feComposite: 0,\n  feConvolveMatrix: 0,\n  feDiffuseLighting: 0,\n  feDisplacementMap: 0,\n  feDistantLight: 0,\n  feFlood: 0,\n  feFuncA: 0,\n  feFuncB: 0,\n  feFuncG: 0,\n  feFuncR: 0,\n  feGaussianBlur: 0,\n  feImage: 0,\n  feMerge: 0,\n  feMergeNode: 0,\n  feMorphology: 0,\n  feOffset: 0,\n  fePointLight: 0,\n  feSpecularLighting: 0,\n  feSpotLight: 0,\n  feTile: 0,\n  feTurbulence: 0,\n  filter: 0,\n  foreignObject: 0,\n  g: 0,\n  image: 0,\n  line: 0,\n  linearGradient: 0,\n  marker: 0,\n  mask: 0,\n  metadata: 0,\n  path: 0,\n  pattern: 0,\n  polygon: 0,\n  polyline: 0,\n  radialGradient: 0,\n  rect: 0,\n  stop: 0,\n  svg: 0,\n  switch: 0,\n  symbol: 0,\n  text: 0,\n  textPath: 0,\n  tspan: 0,\n  use: 0,\n  view: 0,\n}\nconst nonPresentationSVGAttributes =\n  /^(a(ll|t|u)|base[FP]|c(al|lipPathU|on)|di|ed|ex|filter[RU]|g(lyphR|r)|ke|l(en|im)|ma(rker[HUW]|s)|n|pat|pr|point[^e]|re[^n]|s[puy]|st[^or]|ta|textL|vi|xC|y|z)/\nfunction createFactory(tag) {\n  return createElement.bind(null, tag)\n}\nfunction Fragment(attr) {\n  const fragment = document.createDocumentFragment()\n  appendChild(attr.children, fragment)\n  return fragment\n}\nclass Component {\n  constructor(props) {\n    this.props = props\n  }\n  render() {\n    return null\n  }\n}\n\n/* @__PURE__ */\nObject.defineProperties(Component.prototype, {\n  isReactComponent: {\n    value: true,\n  },\n})\nfunction initComponentClass(Class, attr, children) {\n  attr = {\n    ...attr,\n    children,\n  }\n  const instance = new Class(attr)\n  return instance.render()\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction jsx(tag, _ref) {\n  let { children, ...attr } = _ref\n  if (!attr.namespaceURI && svg[tag] === 0) {\n    attr = {\n      ...attr,\n      namespaceURI: SVGNamespace,\n    }\n  }\n  let node\n  if (isString(tag)) {\n    node = attr.namespaceURI\n      ? document.createElementNS(attr.namespaceURI, tag)\n      : document.createElement(tag)\n    attributes(attr, node)\n    appendChild(children, node)\n\n    // Select `option` elements in `select`\n    if (node instanceof window.HTMLSelectElement && attr.value != null) {\n      if (attr.multiple === true && Array.isArray(attr.value)) {\n        const values = attr.value.map(value => String(value))\n        node\n          .querySelectorAll(\"option\")\n          .forEach(option => (option.selected = values.includes(option.value)))\n      } else {\n        node.value = attr.value\n      }\n    }\n    attachRef(attr.ref, node)\n  } else if (isFunction(tag)) {\n    // Custom elements.\n    if (isObject(tag.defaultProps)) {\n      attr = {\n        ...tag.defaultProps,\n        ...attr,\n      }\n    }\n    node = isComponentClass(tag)\n      ? initComponentClass(tag, attr, children)\n      : tag({\n          ...attr,\n          children,\n        })\n  } else {\n    throw new TypeError(`Invalid JSX element type: ${tag}`)\n  }\n  return node\n}\nfunction createElement(tag, attr) {\n  for (\n    var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key2 = 2;\n    _key2 < _len;\n    _key2++\n  ) {\n    children[_key2 - 2] = arguments[_key2]\n  }\n  if (isString(attr) || Array.isArray(attr)) {\n    children.unshift(attr)\n    attr = {}\n  }\n  attr = attr || {}\n  if (attr.children != null && !children.length) {\n    ;({ children, ...attr } = attr)\n  }\n  return jsx(\n    tag,\n    {\n      ...attr,\n      children,\n    },\n    attr.key\n  )\n}\nfunction attachRef(ref, node) {\n  if (isRef(ref)) {\n    ref.current = node\n  } else if (isFunction(ref)) {\n    ref(node)\n  }\n}\nfunction appendChild(child, node) {\n  if (isArrayLike(child)) {\n    appendChildren(child, node)\n  } else if (isString(child) || isNumber(child)) {\n    appendChildToNode(document.createTextNode(child), node)\n  } else if (child === null) {\n    appendChildToNode(document.createComment(\"\"), node)\n  } else if (isElement(child)) {\n    appendChildToNode(child, node)\n  } else if (isShadowRoot(child)) {\n    const shadowRoot = node.attachShadow(child.attr)\n    appendChild(child.children, shadowRoot)\n    attachRef(child.ref, shadowRoot)\n  }\n}\nfunction appendChildren(children, node) {\n  for (const child of [...children]) {\n    appendChild(child, node)\n  }\n  return node\n}\nfunction appendChildToNode(child, node) {\n  if (node instanceof window.HTMLTemplateElement) {\n    node.content.appendChild(child)\n  } else {\n    node.appendChild(child)\n  }\n}\nfunction normalizeAttribute(s, separator) {\n  return s.replace(/[A-Z]/g, match => separator + match.toLowerCase())\n}\nfunction style(node, value) {\n  if (value == null || value === false);\n  else if (Array.isArray(value)) {\n    value.forEach(v => style(node, v))\n  } else if (isString(value)) {\n    node.setAttribute(\"style\", value)\n  } else if (isObject(value)) {\n    forEach(value, (val, key) => {\n      if (key.indexOf(\"-\") === 0) {\n        // CSS custom properties (variables) start with `-` (e.g. `--my-variable`)\n        // and must be assigned via `setProperty`.\n        node.style.setProperty(key, val)\n      } else if (isNumber(val) && isUnitlessNumber[key] !== 0) {\n        node.style[key] = val + \"px\"\n      } else {\n        node.style[key] = val\n      }\n    })\n  }\n}\nfunction attribute(key, value, node) {\n  switch (key) {\n    case \"xlinkActuate\":\n    case \"xlinkArcrole\":\n    case \"xlinkHref\":\n    case \"xlinkRole\":\n    case \"xlinkShow\":\n    case \"xlinkTitle\":\n    case \"xlinkType\":\n      attrNS(node, XLinkNamespace, normalizeAttribute(key, \":\"), value)\n      return\n    case \"xmlnsXlink\":\n      attr(node, normalizeAttribute(key, \":\"), value)\n      return\n    case \"xmlBase\":\n    case \"xmlLang\":\n    case \"xmlSpace\":\n      attrNS(node, XMLNamespace, normalizeAttribute(key, \":\"), value)\n      return\n  }\n  switch (key) {\n    case \"htmlFor\":\n      attr(node, \"for\", value)\n      return\n    case \"dataset\":\n      forEach(value, (dataValue, dataKey) => {\n        if (dataValue != null) {\n          node.dataset[dataKey] = dataValue\n        }\n      })\n      return\n    case \"innerHTML\":\n    case \"innerText\":\n    case \"textContent\":\n      if (isVisibleChild(value)) {\n        node[key] = value\n      }\n      return\n    case \"dangerouslySetInnerHTML\":\n      if (isObject(value)) {\n        node.innerHTML = value[\"__html\"]\n      }\n      return\n    case \"value\":\n      if (value == null || node instanceof window.HTMLSelectElement) {\n        // skip nullish values\n        // for `<select>` apply value after appending `<option>` elements\n        return\n      } else if (node instanceof window.HTMLTextAreaElement) {\n        node.value = value\n        return\n      }\n      // use attribute for other elements\n      break\n    case \"spellCheck\":\n      node.spellcheck = value\n      return\n    case \"class\":\n    case \"className\":\n      if (isFunction(value)) {\n        value(node)\n      } else {\n        attr(node, \"class\", className(value))\n      }\n      return\n    case \"ref\":\n    case \"namespaceURI\":\n      return\n    case \"style\":\n      style(node, value)\n      return\n    case \"on\":\n    case \"onCapture\":\n      forEach(value, (eventHandler, eventName) => {\n        node.addEventListener(eventName, eventHandler, key === \"onCapture\")\n      })\n      return\n    // fallthrough\n  }\n\n  if (isFunction(value)) {\n    if (key[0] === \"o\" && key[1] === \"n\") {\n      let attribute = key.toLowerCase()\n      const useCapture = attribute.endsWith(\"capture\")\n      if (attribute === \"ondoubleclick\") {\n        attribute = \"ondblclick\"\n      } else if (useCapture && attribute === \"ondoubleclickcapture\") {\n        attribute = \"ondblclickcapture\"\n      }\n      if (!useCapture && node[attribute] === null) {\n        // use property when possible PR #17\n        node[attribute] = value\n      } else if (useCapture) {\n        node.addEventListener(attribute.substring(2, attribute.length - 7), value, true)\n      } else {\n        let eventName\n        if (attribute in window) {\n          // standard event\n          // the JSX attribute could have been \"onMouseOver\" and the\n          // member name \"onmouseover\" is on the window's prototype\n          // so let's add the listener \"mouseover\", which is all lowercased\n          const standardEventName = attribute.substring(2)\n          eventName = standardEventName\n        } else {\n          // custom event\n          // the JSX attribute could have been \"onMyCustomEvent\"\n          // so let's trim off the \"on\" prefix and lowercase the first character\n          // and add the listener \"myCustomEvent\"\n          // except for the first character, we keep the event name case\n          const customEventName = attribute[2] + key.slice(3)\n          eventName = customEventName\n        }\n        node.addEventListener(eventName, value)\n      }\n    }\n  } else if (isObject(value)) {\n    node[key] = value\n  } else if (value === true) {\n    attr(node, key, \"\")\n  } else if (value !== false && value != null) {\n    if (node instanceof SVGElement && !nonPresentationSVGAttributes.test(key)) {\n      attr(node, normalizeAttribute(key, \"-\"), value)\n    } else {\n      attr(node, key, value)\n    }\n  }\n}\nfunction attr(node, key, value) {\n  node.setAttribute(key, value)\n}\nfunction attrNS(node, namespace, key, value) {\n  node.setAttributeNS(namespace, key, value)\n}\nfunction attributes(attr, node) {\n  for (const key of keys(attr)) {\n    attribute(key, attr[key], node)\n  }\n  return node\n}\n\nfunction useText(initialValue) {\n  const text = new Text()\n  Object.defineProperty(text, \"toString\", {\n    value() {\n      return this.textContent\n    },\n  })\n  function setText(value) {\n    text.textContent = value\n  }\n  if (initialValue != null) {\n    setText(initialValue)\n  }\n  return [text, setText]\n}\nfunction useClassList(initialValue) {\n  const div = document.createElement(\"div\")\n  if (initialValue != null) {\n    div.className = className(initialValue)\n  }\n  let list = div.classList\n  function ClassList(value) {\n    value.setAttribute(\"class\", list.value)\n    list = value.classList\n  }\n  Object.defineProperties(\n    ClassList,\n    Object.getOwnPropertyDescriptors({\n      get size() {\n        return list.length\n      },\n      get value() {\n        return list.value\n      },\n      add() {\n        list.add(...arguments)\n      },\n      remove() {\n        list.remove(...arguments)\n      },\n      toggle(token, force) {\n        list.toggle(token, force)\n      },\n      contains(token) {\n        return list.contains(token)\n      },\n    })\n  )\n  return ClassList\n}\n\nfunction useMemo(factory) {\n  return factory()\n}\n\nconst cache = /* @__PURE__ */ new Map()\nconst createStyledComponent = name =>\n  function (list) {\n    for (\n      var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1;\n      _key < _len;\n      _key++\n    ) {\n      interpolations[_key - 1] = arguments[_key]\n    }\n    return _ref => {\n      let { style, ...props } = _ref\n      const lastIndex = list.length - 1\n      const css =\n        list.slice(0, lastIndex).reduce((p, s, i) => p + s + interpolations[i](props), \"\") +\n        list[lastIndex]\n      return createElement(name, {\n        style: [css, style],\n        ...props,\n      })\n    }\n  }\nconst baseStyled = customComponent => createStyledComponent(customComponent)\nconst styled = /* @__PURE__ */ new Proxy(baseStyled, {\n  get(_, name) {\n    return setIfAbsent(cache, name, () => createStyledComponent(name))\n  },\n})\nfunction setIfAbsent(map, key, getValue) {\n  if (map.has(key)) {\n    return map.get(key)\n  } else {\n    const value = getValue(key)\n    map.set(key, value)\n    return value\n  }\n}\n\nvar index = {\n  Component,\n  PureComponent: Component,\n  createElement,\n  Fragment,\n  ShadowRoot,\n}\nfunction preventDefault(event) {\n  event.preventDefault()\n  return event\n}\nfunction stopPropagation(event) {\n  event.stopPropagation()\n  return event\n}\n\n\n\n\n//# sourceURL=webpack://earthquest/./node_modules/jsx-dom/index.js?");

/***/ }),

/***/ "./node_modules/jsx-dom/jsx-runtime.js":
/*!*********************************************!*\
  !*** ./node_modules/jsx-dom/jsx-runtime.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Fragment: () => (/* reexport safe */ jsx_dom__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   jsx: () => (/* reexport safe */ jsx_dom__WEBPACK_IMPORTED_MODULE_0__.jsx),\n/* harmony export */   jsxDEV: () => (/* reexport safe */ jsx_dom__WEBPACK_IMPORTED_MODULE_0__.jsx),\n/* harmony export */   jsxs: () => (/* reexport safe */ jsx_dom__WEBPACK_IMPORTED_MODULE_0__.jsx)\n/* harmony export */ });\n/* harmony import */ var jsx_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsx-dom */ \"./node_modules/jsx-dom/index.js\");\n/* eslint-disable */\n\n\n\n//# sourceURL=webpack://earthquest/./node_modules/jsx-dom/jsx-runtime.js?");

/***/ }),

/***/ "./src/_game/assets/common/edge.json":
/*!*******************************************!*\
  !*** ./src/_game/assets/common/edge.json ***!
  \*******************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"imageSize\":[480,240],\"tiles\":[{\"id\":\"hit.3\",\"loc\":[5,0,38,48]},{\"id\":\"hit.2\",\"loc\":[53,3,38,45]},{\"id\":\"hit.1\",\"loc\":[101,3,38,45]},{\"id\":\"run.shoot.10\",\"loc\":[144,0,48,48]},{\"id\":\"run.shoot.9\",\"loc\":[192,0,48,49]},{\"id\":\"run.shoot.8\",\"loc\":[240,0,48,48]},{\"id\":\"run.shoot.7\",\"loc\":[288,0,48,48]},{\"id\":\"run.shoot.6\",\"loc\":[336,0,48,48]},{\"id\":\"run.shoot.5\",\"loc\":[384,0,48,48]},{\"id\":\"run.shoot.4\",\"loc\":[432,0,48,50]},{\"id\":\"run.shoot.3\",\"loc\":[0,48,48,48]},{\"id\":\"run.shoot.2\",\"loc\":[48,48,48,48]},{\"id\":\"run.shoot.1\",\"loc\":[96,48,48,49]},{\"id\":\"run.shoot.0\",\"loc\":[144,48,48,50]},{\"id\":\"bullet.normal.2\",\"loc\":[211,67,10,9]},{\"id\":\"bullet.normal.1\",\"loc\":[259,67,10,9]},{\"id\":\"jump.7\",\"loc\":[293,50,38,46]},{\"id\":\"jump.6\",\"loc\":[341,50,38,46]},{\"id\":\"jump.5\",\"loc\":[389,50,38,46]},{\"id\":\"jump.4\",\"loc\":[437,50,38,46]},{\"id\":\"jump.3\",\"loc\":[5,98,38,46]},{\"id\":\"jump.2\",\"loc\":[53,98,38,46]},{\"id\":\"jump.1\",\"loc\":[101,98,38,46]},{\"id\":\"idle.2\",\"loc\":[144,96,48,51]},{\"id\":\"Idle.1\",\"loc\":[192,96,48,52]},{\"id\":\"teleport.7\",\"loc\":[249,101,30,43]},{\"id\":\"teleport.6\",\"loc\":[297,101,30,43]},{\"id\":\"teleport.5\",\"loc\":[345,101,30,43]},{\"id\":\"teleport.4\",\"loc\":[393,101,30,43]},{\"id\":\"teleport.3\",\"loc\":[441,101,30,43]},{\"id\":\"teleport.2\",\"loc\":[9,149,30,43]},{\"id\":\"teleport.1\",\"loc\":[57,144,30,48]},{\"id\":\"ground.shoot.2\",\"loc\":[101,157,38,35]},{\"id\":\"ground.shoot.1\",\"loc\":[149,157,38,35]},{\"id\":\"run.10\",\"loc\":[197,157,38,35]},{\"id\":\"run.9\",\"loc\":[245,157,38,35]},{\"id\":\"run.8\",\"loc\":[293,157,38,35]},{\"id\":\"run.7\",\"loc\":[341,157,38,35]},{\"id\":\"run.6\",\"loc\":[389,157,38,35]},{\"id\":\"run.5\",\"loc\":[437,157,38,35]},{\"id\":\"run.4\",\"loc\":[5,205,38,35]},{\"id\":\"run.3\",\"loc\":[53,205,38,35]},{\"id\":\"run.2\",\"loc\":[101,205,38,35]},{\"id\":\"run.1\",\"loc\":[149,205,38,35]},{\"id\":\"run.0\",\"loc\":[197,205,38,35]},{\"id\":\"default\",\"loc\":[245,205,38,35]},{\"id\":\"Background\",\"loc\":[288,192,48,48]}]}');\n\n//# sourceURL=webpack://earthquest/./src/_game/assets/common/edge.json?");

/***/ }),

/***/ "./src/_game/assets/common/enemies.json":
/*!**********************************************!*\
  !*** ./src/_game/assets/common/enemies.json ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"tileHeight\":24,\"tileWidth\":16,\"tileSpacing\":1,\"tileOffset\":0,\"tiles\":[{\"id\":\"teleport.1\",\"loc\":[9,80,16,48],\"offset\":[0,0]},{\"id\":\"teleport.2\",\"loc\":[25,80,22,48],\"offset\":[0,0]},{\"id\":\"teleport.3\",\"loc\":[51,80,32,48],\"offset\":[0,0]},{\"id\":\"teleport.4\",\"loc\":[85,80,32,48],\"offset\":[0,0]},{\"id\":\"teleport.5\",\"loc\":[119,80,32,48],\"offset\":[0,0]},{\"id\":\"teleport.6\",\"loc\":[152,80,32,48],\"offset\":[0,0]},{\"id\":\"teleport.7\",\"loc\":[186,80,32,48],\"offset\":[0,0]},{\"id\":\"default\",\"loc\":[221,94,32,35],\"offset\":[0,0]},{\"id\":\"ground.shot.1\",\"loc\":[284,94,32,35],\"offset\":[0,0,0]},{\"id\":\"ground.shot.2\",\"loc\":[293,94,32,35],\"offset\":[0,0,-3]},{\"id\":\"hit.1\",\"loc\":[363,91,32,39],\"offset\":[0,0,-3]},{\"id\":\"hit.2\",\"loc\":[331,94,32,35],\"offset\":[0,0,-3]},{\"id\":\"particle.1\",\"loc\":[32,160,32,35],\"offset\":[0,0,0]}]}');\n\n//# sourceURL=webpack://earthquest/./src/_game/assets/common/enemies.json?");

/***/ }),

/***/ "./src/_game/assets/level2/level2.json":
/*!*********************************************!*\
  !*** ./src/_game/assets/level2/level2.json ***!
  \*********************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"size\":[15360,1080],\"spriteSheet\":\"level1Tiles\",\"backgrounds\":[{\"type\":\"background0\",\"image\":\"/assets/level2/background0.png\"}],\"player\":{\"pos\":[50,150],\"meta\":[[\"debug\",\"false\"],[\"health\",\"90\"]]},\"entities\":[{\"type\":\"enemy\",\"pos\":[100,10],\"meta\":[[\"health\",\"100\"]]}],\"collision\":[{\"id\":\"bottomless\",\"box\":[0,15360,1,1],\"type\":\"bottomless\",\"meta\":[[\"debug\",\"true\"],[\"color\",\"1,0,0,1\"]]},{\"id\":\"ground1\",\"box\":[10,1800,100,100],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"elevator1\",\"box\":[1500,200,550,10],\"type\":\"elevator\",\"meta\":[[\"debug\",\"true\"],[\"color\",\"1,0,0,1\"],[\"msTime\",\"3000\"],[\"offset\",\"-800,0\"]]},{\"id\":\"elevator2\",\"box\":[500,200,150,10],\"type\":\"elevator\",\"meta\":[[\"debug\",\"true\"],[\"color\",\"1,0,0,1\"],[\"msTime\",\"3000\"],[\"offset\",\"0,500\"]]},{\"id\":\"step2\",\"box\":[700,100,250,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"step3\",\"box\":[800,100,350,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"step4\",\"box\":[900,100,450,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"ledge1\",\"box\":[900,700,750,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"slop1\",\"box\":[900,500,110,10],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"slop2\",\"box\":[950,450,120,10],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"slop3\",\"box\":[1000,400,130,10],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"slop4\",\"box\":[1050,350,140,10],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"topBack\",\"box\":[1400,10,140,40],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"ground2\",\"box\":[2000,4000,120,100],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"block1.2\",\"box\":[2500,200,200,100],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"block1.3\",\"box\":[2700,200,250,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"],[\"color\",\"0,0,1,1\"]]},{\"id\":\"block1.4\",\"box\":[2900,200,420,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"block1.5\",\"box\":[3100,200,520,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"block1.6\",\"box\":[3200,200,620,50],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"ground3\",\"box\":[6000,4000,220,100],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"ground4\",\"box\":[10200,4000,220,1],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]},{\"id\":\"ground5\",\"box\":[14400,1000,320,100],\"type\":\"box\",\"meta\":[[\"debug\",\"true\"]]}]}');\n\n//# sourceURL=webpack://earthquest/./src/_game/assets/level2/level2.json?");

/***/ }),

/***/ "./src/_game/assets/ui/hud.json":
/*!**************************************!*\
  !*** ./src/_game/assets/ui/hud.json ***!
  \**************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"imageSize\":[640,128],\"tiles\":[{\"id\":\"attack.on\",\"loc\":[0,0,64,64]},{\"id\":\"attack.off\",\"loc\":[64,0,64,64]},{\"id\":\"pause.on\",\"loc\":[128,0,64,64]},{\"id\":\"pause.off\",\"loc\":[192,0,64,64]},{\"id\":\"jump.on\",\"loc\":[256,0,64,64]},{\"id\":\"jump.off\",\"loc\":[320,0,64,64]},{\"id\":\"up.on\",\"loc\":[384,0,64,64]},{\"id\":\"up.off\",\"loc\":[448,0,64,64]},{\"id\":\"left.off\",\"loc\":[512,0,64,64]},{\"id\":\"left.on\",\"loc\":[576,0,64,64]},{\"id\":\"right.on\",\"loc\":[0,64,64,64]},{\"id\":\"right.off\",\"loc\":[64,64,64,64]},{\"id\":\"b\",\"loc\":[128,64,64,66]},{\"id\":\"esc\",\"loc\":[192,64,64,64]},{\"id\":\"attack\",\"loc\":[256,64,64,64]},{\"id\":\"left\",\"loc\":[320,64,64,64]},{\"id\":\"up\",\"loc\":[384,64,64,64]},{\"id\":\"right\",\"loc\":[448,64,64,64]},{\"id\":\"button\",\"loc\":[512,64,64,64]},{\"id\":\"Background\",\"loc\":[576,64,64,64]}]}');\n\n//# sourceURL=webpack://earthquest/./src/_game/assets/ui/hud.json?");

/***/ }),

/***/ "./src/assets/font.json":
/*!******************************!*\
  !*** ./src/assets/font.json ***!
  \******************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"ch\":\" \",\"value\":\"32\",\"sizeX\":0,\"sizeY\":0,\"bearingX\":0,\"bearingY\":0,\"advance\":8,\"u1\":0,\"v1\":0,\"u2\":0,\"v2\":0},{\"ch\":\"!\",\"value\":\"33\",\"sizeX\":5,\"sizeY\":21,\"bearingX\":3,\"bearingY\":21,\"advance\":11,\"u1\":0,\"v1\":0,\"u2\":0.00488281,\"v2\":0.0205078},{\"ch\":\"\\\\\"\",\"value\":\"34\",\"sizeX\":11,\"sizeY\":8,\"bearingX\":1,\"bearingY\":21,\"advance\":13,\"u1\":0.00488281,\"v1\":0,\"u2\":0.015625,\"v2\":0.0078125},{\"ch\":\"#\",\"value\":\"35\",\"sizeX\":16,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":16,\"u1\":0.015625,\"v1\":0,\"u2\":0.03125,\"v2\":0.0205078},{\"ch\":\"$\",\"value\":\"36\",\"sizeX\":15,\"sizeY\":25,\"bearingX\":1,\"bearingY\":23,\"advance\":16,\"u1\":0.03125,\"v1\":0,\"u2\":0.0458984,\"v2\":0.0244141},{\"ch\":\"%\",\"value\":\"37\",\"sizeX\":25,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":27,\"u1\":0.0458984,\"v1\":0,\"u2\":0.0703125,\"v2\":0.0205078},{\"ch\":\"&\",\"value\":\"38\",\"sizeX\":24,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":25,\"u1\":0.0703125,\"v1\":0,\"u2\":0.09375,\"v2\":0.0205078},{\"ch\":\"\\'\",\"value\":\"39\",\"sizeX\":4,\"sizeY\":8,\"bearingX\":1,\"bearingY\":21,\"advance\":6,\"u1\":0.09375,\"v1\":0,\"u2\":0.0976562,\"v2\":0.0078125},{\"ch\":\"(\",\"value\":\"40\",\"sizeX\":9,\"sizeY\":29,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.0976562,\"v1\":0,\"u2\":0.106445,\"v2\":0.0283203},{\"ch\":\")\",\"value\":\"41\",\"sizeX\":9,\"sizeY\":29,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.106445,\"v1\":0,\"u2\":0.115234,\"v2\":0.0283203},{\"ch\":\"*\",\"value\":\"42\",\"sizeX\":14,\"sizeY\":12,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.115234,\"v1\":0,\"u2\":0.128906,\"v2\":0.0117188},{\"ch\":\"+\",\"value\":\"43\",\"sizeX\":16,\"sizeY\":16,\"bearingX\":1,\"bearingY\":18,\"advance\":18,\"u1\":0.128906,\"v1\":0,\"u2\":0.144531,\"v2\":0.015625},{\"ch\":\",\",\"value\":\"44\",\"sizeX\":5,\"sizeY\":8,\"bearingX\":1,\"bearingY\":3,\"advance\":8,\"u1\":0.144531,\"v1\":0,\"u2\":0.149414,\"v2\":0.0078125},{\"ch\":\"-\",\"value\":\"45\",\"sizeX\":9,\"sizeY\":3,\"bearingX\":1,\"bearingY\":9,\"advance\":11,\"u1\":0.149414,\"v1\":0,\"u2\":0.158203,\"v2\":0.00292969},{\"ch\":\".\",\"value\":\"46\",\"sizeX\":4,\"sizeY\":4,\"bearingX\":2,\"bearingY\":4,\"advance\":8,\"u1\":0.158203,\"v1\":0,\"u2\":0.162109,\"v2\":0.00390625},{\"ch\":\"/\",\"value\":\"47\",\"sizeX\":9,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":9,\"u1\":0.162109,\"v1\":0,\"u2\":0.170898,\"v2\":0.0205078},{\"ch\":\"0\",\"value\":\"48\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.170898,\"v1\":0,\"u2\":0.18457,\"v2\":0.0205078},{\"ch\":\"1\",\"value\":\"49\",\"sizeX\":13,\"sizeY\":21,\"bearingX\":2,\"bearingY\":21,\"advance\":16,\"u1\":0.18457,\"v1\":0,\"u2\":0.197266,\"v2\":0.0205078},{\"ch\":\"2\",\"value\":\"50\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.197266,\"v1\":0,\"u2\":0.210938,\"v2\":0.0205078},{\"ch\":\"3\",\"value\":\"51\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.210938,\"v1\":0,\"u2\":0.224609,\"v2\":0.0205078},{\"ch\":\"4\",\"value\":\"52\",\"sizeX\":16,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":16,\"u1\":0.224609,\"v1\":0,\"u2\":0.240234,\"v2\":0.0205078},{\"ch\":\"5\",\"value\":\"53\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.240234,\"v1\":0,\"u2\":0.253906,\"v2\":0.0205078},{\"ch\":\"6\",\"value\":\"54\",\"sizeX\":15,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.253906,\"v1\":0,\"u2\":0.268555,\"v2\":0.0205078},{\"ch\":\"7\",\"value\":\"55\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":2,\"bearingY\":21,\"advance\":16,\"u1\":0.268555,\"v1\":0,\"u2\":0.282227,\"v2\":0.0205078},{\"ch\":\"8\",\"value\":\"56\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.282227,\"v1\":0,\"u2\":0.295898,\"v2\":0.0205078},{\"ch\":\"9\",\"value\":\"57\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.295898,\"v1\":0,\"u2\":0.30957,\"v2\":0.0205078},{\"ch\":\":\",\"value\":\"58\",\"sizeX\":5,\"sizeY\":15,\"bearingX\":2,\"bearingY\":15,\"advance\":9,\"u1\":0.30957,\"v1\":0,\"u2\":0.314453,\"v2\":0.0146484},{\"ch\":\";\",\"value\":\"59\",\"sizeX\":6,\"sizeY\":20,\"bearingX\":1,\"bearingY\":15,\"advance\":9,\"u1\":0.314453,\"v1\":0,\"u2\":0.320312,\"v2\":0.0195312},{\"ch\":\"<\",\"value\":\"60\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":1,\"bearingY\":18,\"advance\":18,\"u1\":0.320312,\"v1\":0,\"u2\":0.335938,\"v2\":0.0146484},{\"ch\":\"=\",\"value\":\"61\",\"sizeX\":16,\"sizeY\":8,\"bearingX\":1,\"bearingY\":15,\"advance\":18,\"u1\":0.335938,\"v1\":0,\"u2\":0.351562,\"v2\":0.0078125},{\"ch\":\">\",\"value\":\"62\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":1,\"bearingY\":18,\"advance\":18,\"u1\":0.351562,\"v1\":0,\"u2\":0.367188,\"v2\":0.0146484},{\"ch\":\"?\",\"value\":\"63\",\"sizeX\":12,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":14,\"u1\":0.367188,\"v1\":0,\"u2\":0.378906,\"v2\":0.0205078},{\"ch\":\"@\",\"value\":\"64\",\"sizeX\":27,\"sizeY\":27,\"bearingX\":1,\"bearingY\":21,\"advance\":29,\"u1\":0.378906,\"v1\":0,\"u2\":0.405273,\"v2\":0.0263672},{\"ch\":\"A\",\"value\":\"65\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.405273,\"v1\":0,\"u2\":0.427734,\"v2\":0.0205078},{\"ch\":\"B\",\"value\":\"66\",\"sizeX\":20,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":21,\"u1\":0.427734,\"v1\":0,\"u2\":0.447266,\"v2\":0.0205078},{\"ch\":\"C\",\"value\":\"67\",\"sizeX\":19,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":21,\"u1\":0.447266,\"v1\":0,\"u2\":0.46582,\"v2\":0.0205078},{\"ch\":\"D\",\"value\":\"68\",\"sizeX\":22,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.46582,\"v1\":0,\"u2\":0.487305,\"v2\":0.0205078},{\"ch\":\"E\",\"value\":\"69\",\"sizeX\":18,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":20,\"u1\":0.487305,\"v1\":0,\"u2\":0.504883,\"v2\":0.0205078},{\"ch\":\"F\",\"value\":\"70\",\"sizeX\":17,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":18,\"u1\":0.504883,\"v1\":0,\"u2\":0.521484,\"v2\":0.0205078},{\"ch\":\"G\",\"value\":\"71\",\"sizeX\":22,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":23,\"u1\":0.521484,\"v1\":0,\"u2\":0.542969,\"v2\":0.0205078},{\"ch\":\"H\",\"value\":\"72\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.542969,\"v1\":0,\"u2\":0.56543,\"v2\":0.0205078},{\"ch\":\"I\",\"value\":\"73\",\"sizeX\":9,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":11,\"u1\":0.56543,\"v1\":0,\"u2\":0.574219,\"v2\":0.0205078},{\"ch\":\"J\",\"value\":\"74\",\"sizeX\":12,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":12,\"u1\":0.574219,\"v1\":0,\"u2\":0.585938,\"v2\":0.0205078},{\"ch\":\"K\",\"value\":\"75\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.585938,\"v1\":0,\"u2\":0.608398,\"v2\":0.0205078},{\"ch\":\"L\",\"value\":\"76\",\"sizeX\":18,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":20,\"u1\":0.608398,\"v1\":0,\"u2\":0.625977,\"v2\":0.0205078},{\"ch\":\"M\",\"value\":\"77\",\"sizeX\":28,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":28,\"u1\":0.625977,\"v1\":0,\"u2\":0.65332,\"v2\":0.0205078},{\"ch\":\"N\",\"value\":\"78\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.65332,\"v1\":0,\"u2\":0.675781,\"v2\":0.0205078},{\"ch\":\"O\",\"value\":\"79\",\"sizeX\":21,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":23,\"u1\":0.675781,\"v1\":0,\"u2\":0.696289,\"v2\":0.0205078},{\"ch\":\"P\",\"value\":\"80\",\"sizeX\":17,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":18,\"u1\":0.696289,\"v1\":0,\"u2\":0.712891,\"v2\":0.0205078},{\"ch\":\"Q\",\"value\":\"81\",\"sizeX\":22,\"sizeY\":26,\"bearingX\":1,\"bearingY\":21,\"advance\":23,\"u1\":0.712891,\"v1\":0,\"u2\":0.734375,\"v2\":0.0253906},{\"ch\":\"R\",\"value\":\"82\",\"sizeX\":22,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":21,\"u1\":0.734375,\"v1\":0,\"u2\":0.755859,\"v2\":0.0205078},{\"ch\":\"S\",\"value\":\"83\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":2,\"bearingY\":21,\"advance\":18,\"u1\":0.755859,\"v1\":0,\"u2\":0.769531,\"v2\":0.0205078},{\"ch\":\"T\",\"value\":\"84\",\"sizeX\":20,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":20,\"u1\":0.769531,\"v1\":0,\"u2\":0.789062,\"v2\":0.0205078},{\"ch\":\"U\",\"value\":\"85\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.789062,\"v1\":0,\"u2\":0.811523,\"v2\":0.0205078},{\"ch\":\"V\",\"value\":\"86\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.811523,\"v1\":0,\"u2\":0.833984,\"v2\":0.0205078},{\"ch\":\"W\",\"value\":\"87\",\"sizeX\":31,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":30,\"u1\":0.833984,\"v1\":0,\"u2\":0.864258,\"v2\":0.0205078},{\"ch\":\"X\",\"value\":\"88\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.864258,\"v1\":0,\"u2\":0.886719,\"v2\":0.0205078},{\"ch\":\"Y\",\"value\":\"89\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.886719,\"v1\":0,\"u2\":0.90918,\"v2\":0.0205078},{\"ch\":\"Z\",\"value\":\"90\",\"sizeX\":17,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":20,\"u1\":0.90918,\"v1\":0,\"u2\":0.925781,\"v2\":0.0205078},{\"ch\":\"[\",\"value\":\"91\",\"sizeX\":8,\"sizeY\":26,\"bearingX\":2,\"bearingY\":22,\"advance\":11,\"u1\":0.925781,\"v1\":0,\"u2\":0.933594,\"v2\":0.0253906},{\"ch\":\"\\\\\\\\\",\"value\":\"92\",\"sizeX\":9,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":9,\"u1\":0.933594,\"v1\":0,\"u2\":0.942383,\"v2\":0.0205078},{\"ch\":\"]\",\"value\":\"93\",\"sizeX\":8,\"sizeY\":26,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.942383,\"v1\":0,\"u2\":0.950195,\"v2\":0.0253906},{\"ch\":\"^\",\"value\":\"94\",\"sizeX\":15,\"sizeY\":15,\"bearingX\":0,\"bearingY\":21,\"advance\":15,\"u1\":0.950195,\"v1\":0,\"u2\":0.964844,\"v2\":0.0146484},{\"ch\":\"_\",\"value\":\"95\",\"sizeX\":18,\"sizeY\":2,\"bearingX\":-1,\"bearingY\":-3,\"advance\":16,\"u1\":0.964844,\"v1\":0,\"u2\":0.982422,\"v2\":0.00195312},{\"ch\":\"`\",\"value\":\"96\",\"sizeX\":8,\"sizeY\":5,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.982422,\"v1\":0,\"u2\":0.990234,\"v2\":0.00488281},{\"ch\":\"a\",\"value\":\"97\",\"sizeX\":13,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":14,\"u1\":0,\"v1\":0.0283203,\"u2\":0.0126953,\"v2\":0.0429688},{\"ch\":\"b\",\"value\":\"98\",\"sizeX\":15,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":16,\"u1\":0.0126953,\"v1\":0.0283203,\"u2\":0.0273438,\"v2\":0.0498047},{\"ch\":\"c\",\"value\":\"99\",\"sizeX\":13,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":14,\"u1\":0.0273438,\"v1\":0.0283203,\"u2\":0.0400391,\"v2\":0.0429688},{\"ch\":\"d\",\"value\":\"100\",\"sizeX\":15,\"sizeY\":22,\"bearingX\":1,\"bearingY\":22,\"advance\":16,\"u1\":0.0400391,\"v1\":0.0283203,\"u2\":0.0546875,\"v2\":0.0498047},{\"ch\":\"e\",\"value\":\"101\",\"sizeX\":13,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":14,\"u1\":0.0546875,\"v1\":0.0283203,\"u2\":0.0673828,\"v2\":0.0429688},{\"ch\":\"f\",\"value\":\"102\",\"sizeX\":11,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":11,\"u1\":0.0673828,\"v1\":0.0283203,\"u2\":0.078125,\"v2\":0.0498047},{\"ch\":\"g\",\"value\":\"103\",\"sizeX\":15,\"sizeY\":24,\"bearingX\":1,\"bearingY\":17,\"advance\":16,\"u1\":0.078125,\"v1\":0.0283203,\"u2\":0.0927734,\"v2\":0.0517578},{\"ch\":\"h\",\"value\":\"104\",\"sizeX\":16,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":16,\"u1\":0.0927734,\"v1\":0.0283203,\"u2\":0.108398,\"v2\":0.0498047},{\"ch\":\"i\",\"value\":\"105\",\"sizeX\":9,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":9,\"u1\":0.108398,\"v1\":0.0283203,\"u2\":0.117188,\"v2\":0.0498047},{\"ch\":\"j\",\"value\":\"106\",\"sizeX\":8,\"sizeY\":29,\"bearingX\":-1,\"bearingY\":22,\"advance\":9,\"u1\":0.117188,\"v1\":0.0283203,\"u2\":0.125,\"v2\":0.0566406},{\"ch\":\"k\",\"value\":\"107\",\"sizeX\":16,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":16,\"u1\":0.125,\"v1\":0.0283203,\"u2\":0.140625,\"v2\":0.0498047},{\"ch\":\"l\",\"value\":\"108\",\"sizeX\":9,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":9,\"u1\":0.140625,\"v1\":0.0283203,\"u2\":0.149414,\"v2\":0.0498047},{\"ch\":\"m\",\"value\":\"109\",\"sizeX\":25,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":25,\"u1\":0.149414,\"v1\":0.0283203,\"u2\":0.173828,\"v2\":0.0429688},{\"ch\":\"n\",\"value\":\"110\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.173828,\"v1\":0.0283203,\"u2\":0.189453,\"v2\":0.0429688},{\"ch\":\"o\",\"value\":\"111\",\"sizeX\":14,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":16,\"u1\":0.189453,\"v1\":0.0283203,\"u2\":0.203125,\"v2\":0.0429688},{\"ch\":\"p\",\"value\":\"112\",\"sizeX\":15,\"sizeY\":22,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.203125,\"v1\":0.0283203,\"u2\":0.217773,\"v2\":0.0498047},{\"ch\":\"q\",\"value\":\"113\",\"sizeX\":15,\"sizeY\":23,\"bearingX\":1,\"bearingY\":16,\"advance\":16,\"u1\":0.217773,\"v1\":0.0283203,\"u2\":0.232422,\"v2\":0.0507812},{\"ch\":\"r\",\"value\":\"114\",\"sizeX\":11,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":11,\"u1\":0.232422,\"v1\":0.0283203,\"u2\":0.243164,\"v2\":0.0429688},{\"ch\":\"s\",\"value\":\"115\",\"sizeX\":11,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":12,\"u1\":0.243164,\"v1\":0.0283203,\"u2\":0.253906,\"v2\":0.0429688},{\"ch\":\"t\",\"value\":\"116\",\"sizeX\":9,\"sizeY\":19,\"bearingX\":0,\"bearingY\":19,\"advance\":9,\"u1\":0.253906,\"v1\":0.0283203,\"u2\":0.262695,\"v2\":0.046875},{\"ch\":\"u\",\"value\":\"117\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.262695,\"v1\":0.0283203,\"u2\":0.27832,\"v2\":0.0429688},{\"ch\":\"v\",\"value\":\"118\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.27832,\"v1\":0.0283203,\"u2\":0.293945,\"v2\":0.0429688},{\"ch\":\"w\",\"value\":\"119\",\"sizeX\":23,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":23,\"u1\":0.293945,\"v1\":0.0283203,\"u2\":0.316406,\"v2\":0.0429688},{\"ch\":\"x\",\"value\":\"120\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.316406,\"v1\":0.0283203,\"u2\":0.332031,\"v2\":0.0429688},{\"ch\":\"y\",\"value\":\"121\",\"sizeX\":16,\"sizeY\":22,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.332031,\"v1\":0.0283203,\"u2\":0.347656,\"v2\":0.0498047},{\"ch\":\"z\",\"value\":\"122\",\"sizeX\":14,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":14,\"u1\":0.347656,\"v1\":0.0283203,\"u2\":0.361328,\"v2\":0.0429688},{\"ch\":\"{\",\"value\":\"123\",\"sizeX\":11,\"sizeY\":26,\"bearingX\":2,\"bearingY\":22,\"advance\":15,\"u1\":0.361328,\"v1\":0.0283203,\"u2\":0.37207,\"v2\":0.0537109},{\"ch\":\"|\",\"value\":\"124\",\"sizeX\":2,\"sizeY\":29,\"bearingX\":2,\"bearingY\":22,\"advance\":6,\"u1\":0.37207,\"v1\":0.0283203,\"u2\":0.374023,\"v2\":0.0566406},{\"ch\":\"}\",\"value\":\"125\",\"sizeX\":11,\"sizeY\":26,\"bearingX\":2,\"bearingY\":22,\"advance\":15,\"u1\":0.374023,\"v1\":0.0283203,\"u2\":0.384766,\"v2\":0.0537109},{\"ch\":\"~\",\"value\":\"126\",\"sizeX\":17,\"sizeY\":5,\"bearingX\":0,\"bearingY\":13,\"advance\":17,\"u1\":0.384766,\"v1\":0.0283203,\"u2\":0.401367,\"v2\":0.0332031}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/font.json?");

/***/ }),

/***/ "./src/assets/menu.json":
/*!******************************!*\
  !*** ./src/assets/menu.json ***!
  \******************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"tiles\":[{\"id\":\"menu.left.top\",\"loc\":[19,193,64,64],\"offset\":[0,0]},{\"id\":\"menu.left.middle\",\"loc\":[19,239,64,64],\"offset\":[0,0]},{\"id\":\"menu.left.bottom\",\"loc\":[19,284,64,64],\"offset\":[0,0]},{\"id\":\"menu.center.top\",\"loc\":[69,193,64,64],\"offset\":[0,0]},{\"id\":\"menu.center.middle\",\"loc\":[69,245,64,64],\"offset\":[0,0]},{\"id\":\"menu.center.bottom\",\"loc\":[69,284,64,64],\"offset\":[0,0]},{\"id\":\"menu.right.top\",\"loc\":[130,193,64,64],\"offset\":[0,0]},{\"id\":\"menu.right.middle\",\"loc\":[130,245,64,64],\"offset\":[0,0]},{\"id\":\"menu.right.bottom\",\"loc\":[130,284,64,64],\"offset\":[0,0]},{\"id\":\"cursor\",\"loc\":[25,118,64,47],\"offset\":[-4,0]},{\"id\":\"block\",\"loc\":[0,0,1,1],\"offset\":[0,0]},{\"id\":\"arrow\",\"loc\":[48,16,32,16],\"offset\":[16,0]}]}');\n\n//# sourceURL=webpack://earthquest/./src/assets/menu.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;